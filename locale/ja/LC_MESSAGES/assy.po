# SOME DESCRIPTIVE TITLE.
# Copyright (C) CadQuery Development Team
# This file is distributed under the same license as the CadQuery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CadQuery 2.7.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-08 00:07+0000\n"
"PO-Revision-Date: 2021-05-27 10:38+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2022\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/121077/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../cadquery/doc/assy.rst:5
msgid "Assemblies"
msgstr "アセンブリ"

#: ../../cadquery/doc/assy.rst:8
msgid "Assembly tutorial"
msgstr ""

#: ../../cadquery/doc/assy.rst:10
msgid ""
"The purpose of this section is to demonstrate how to use the assembly and "
"constraints functionality to build a realistic model. It will be a enclosure"
" door assembly made out of 20x20 v-slot profiles."
msgstr ""
"このセクションの目的は、アセンブリーと拘束の機能を使用して現実的なモデルを作成する方法を示すことです。20x20Vスロットプロファイルで構成されたエンクロージャドアアセンブリです。"

#: ../../cadquery/doc/assy.rst:15
msgid "Defining parameters"
msgstr "パラメータを定義する"

#: ../../cadquery/doc/assy.rst:17
msgid ""
"We want to start with defining the model parameters to allow for easy "
"dimension changes later:"
msgstr "後で簡単に寸法を変更できるように、モデルパラメータの定義から始めます。"

#: ../../cadquery/doc/assy.rst:37
msgid ""
"It is interesting to note that the v-slot profile is imported from a DXF "
"file. This way it is very easy to change to other aluminum extrusion type, "
"e.g. Item or Bosch. Vendors usually provide DXF files."
msgstr ""
"VスロットプロファイルがDXFファイルからインポートされていることに注目してください。このようにして、ItemやBoschのような他のアルミニウム押し出しタイプに変更することは非常に容易です。ベンダーは通常、DXFファイルを提供しています。"

#: ../../cadquery/doc/assy.rst:42
msgid "Defining reusable components"
msgstr "再利用可能なコンポーネントの定義"

#: ../../cadquery/doc/assy.rst:44
msgid ""
"Next we want to define functions generating the assembly components based on"
" the specified parameters."
msgstr "次に、指定したパラメータに基づいてアセンブリ構成部品を生成する関数を定義します。"

#: ../../cadquery/doc/assy.rst:116
msgid "Initial assembly"
msgstr "初期アセンブリ"

#: ../../cadquery/doc/assy.rst:118
msgid ""
"Next we want to instantiate all the components and add them to the assembly."
msgstr "次に、すべての構成要素をインスタンス化し、アセンブリーに追加します。"

#: ../../cadquery/doc/assy.rst:146
msgid "Constraints definition"
msgstr "拘束の定義"

#: ../../cadquery/doc/assy.rst:148
msgid "Then we want to define all the constraints"
msgstr "次に、すべての制約を定義します。"

#: ../../cadquery/doc/assy.rst:182
msgid ""
"Should you need to do something unusual that is not possible with the string"
" based selectors (e.g. use :py:class:`cadquery.selectors.BoxSelector` or a "
"user-defined selector class), it is possible to pass "
":py:class:`cadquery.Shape` objects to the "
":py:meth:`cadquery.Assembly.constrain` method directly. For example, the "
"above"
msgstr ""

#: ../../cadquery/doc/assy.rst:190
msgid "is equivalent to"
msgstr ""

#: ../../cadquery/doc/assy.rst:196
msgid ""
"This method requires a :py:class:`cadquery.Shape` object, so remember to use"
" the :py:meth:`cadquery.Workplane.val` method to pass a single "
":py:class:`cadquery.Shape` and not the whole :py:class:`cadquery.Workplane` "
"object."
msgstr ""

#: ../../cadquery/doc/assy.rst:200
msgid "Final result"
msgstr ""

#: ../../cadquery/doc/assy.rst:202
msgid "Below is the complete code including the final solve step."
msgstr ""

#: ../../cadquery/doc/assy.rst:352
msgid "Data export"
msgstr ""

#: ../../cadquery/doc/assy.rst:354
msgid ""
"The resulting assembly can be exported as a STEP file or in a internal OCCT "
"XML format."
msgstr ""

#: ../../cadquery/doc/assy.rst:357
msgid ""
"STEP can be loaded in all CAD tool, e.g. in FreeCAD and the XML be used in "
"other applications using OCCT."
msgstr ""

#: ../../cadquery/doc/assy.rst:369
msgid "Object locations"
msgstr ""

#: ../../cadquery/doc/assy.rst:371
msgid ""
"Objects can be added to an assembly with initial locations supplied, such "
"as:"
msgstr ""

#: ../../cadquery/doc/assy.rst:391
msgid ""
"As an alternative to the user calculating locations, constraints and the "
"method :meth:`~cadquery.Assembly.solve` can be used to position objects in "
"an assembly."
msgstr ""

#: ../../cadquery/doc/assy.rst:394
msgid ""
"If initial locations and the method :meth:`~cadquery.Assembly.solve` are "
"used the solver will overwrite these initial locations with it's solution, "
"however initial locations can still affect the final solution. In an "
"underconstrained system the solver may not move an object if it does not "
"contribute to the cost function, or if multiple solutions exist (ie. "
"multiple instances where the cost function is at a minimum) initial "
"locations can cause the solver to converge on one particular solution. For "
"very complicated assemblies setting approximately correct initial locations "
"can also reduce the computational time required."
msgstr ""

#: ../../cadquery/doc/assy.rst:404
msgid "Constraints"
msgstr ""

#: ../../cadquery/doc/assy.rst:406
msgid ""
"Constraints are often a better representation of the real world relationship"
" the user wants to model than directly supplying locations. In the above "
"example the real world relationship is that the bottom face of each cone "
"should touch, which can be modelled with a Plane constraint. When the user "
"provides explicit locations (instead of constraints) then they are also "
"responsible for updating them when, for example, the location of ``cone1`` "
"changes."
msgstr ""

#: ../../cadquery/doc/assy.rst:412
msgid ""
"When at least one constraint is supplied and the method "
":meth:`~cadquery.Assembly.solve` is run, an optimization problem is set up. "
"Each constraint provides a cost function that depends on the position and "
"orientation (represented by a :class:`~cadquery.Location`) of the two "
"objects specified when creating the constraint. The solver varies the "
"location of the assembly's children and attempts to minimize the sum of all "
"cost functions. Hence by reading the formulae of the cost functions below, "
"you can understand exactly what each constraint does."
msgstr ""

#: ../../cadquery/doc/assy.rst:421
msgid "Point"
msgstr ""

#: ../../cadquery/doc/assy.rst:423
msgid ""
"The Point constraint is a frequently used constraint that minimizes the "
"distance between two points. Some example uses are centering faces or "
"aligning verticies, but it is also useful with dummy vertices to create "
"offsets between two parts."
msgstr ""

#: ../../cadquery/doc/assy.rst:427 ../../cadquery/doc/assy.rst:505
msgid "The cost function is:"
msgstr ""

#: ../../cadquery/doc/assy.rst:429
msgid "( param - \\lvert \\vec{ c_1 } - \\vec{ c_2 } \\rvert ) ^2"
msgstr ""

#: ../../cadquery/doc/assy.rst:433 ../../cadquery/doc/assy.rst:511
#: ../../cadquery/doc/assy.rst:657 ../../cadquery/doc/assy.rst:721
#: ../../cadquery/doc/assy.rst:766 ../../cadquery/doc/assy.rst:812
#: ../../cadquery/doc/assy.rst:853
msgid "Where:"
msgstr ""

#: ../../cadquery/doc/assy.rst:435 ../../cadquery/doc/assy.rst:725
msgid ":math:`param` is the parameter of the constraint, which defaults to 0,"
msgstr ""

#: ../../cadquery/doc/assy.rst:436
msgid ":math:`\\vec{ c_i }` is the center of the ith object, and"
msgstr ""

#: ../../cadquery/doc/assy.rst:437
msgid ""
":math:`\\lvert \\vec{ v } \\rvert` is the modulus of :math:`\\vec{ v }`, ie."
" the length of :math:`\\vec{ v }`."
msgstr ""

#: ../../cadquery/doc/assy.rst:440
msgid ""
"When creating a Point constraint, the ``param`` argument can be used to "
"specify a desired offset between the two centers. This offset does not have "
"a direction associated with it, if you want to specify an offset in a "
"specific direction then you should use a dummy :class:`~cadquery.Vertex`."
msgstr ""

#: ../../cadquery/doc/assy.rst:444
msgid ""
"The Point constraint uses the :meth:`~cadquery.Shape.Center` to find the "
"center of the argument. Hence it will work with all subclasses of "
":class:`~cadquery.Shape`."
msgstr ""

#: ../../cadquery/doc/assy.rst:500
msgid "Axis"
msgstr ""

#: ../../cadquery/doc/assy.rst:502
msgid ""
"The Axis constraint minimizes the angle between two vectors. It is "
"frequently used to align faces and control the rotation of an object."
msgstr ""

#: ../../cadquery/doc/assy.rst:507
msgid ""
"( k_{ dir } \\times ( param - \\vec{ d_1 } \\angle \\vec{ d_2 } ) ^2\n"
"\n"
msgstr ""

#: ../../cadquery/doc/assy.rst:513
msgid ":math:`k_{ dir }` is a scaling factor for directional constraints,"
msgstr ""

#: ../../cadquery/doc/assy.rst:514
msgid ""
":math:`param` is the parameter of the constraint, which defaults to 180 "
"degrees,"
msgstr ""

#: ../../cadquery/doc/assy.rst:515
msgid ""
":math:`\\vec{d_i}` is the direction created from the ith object argument as "
"described below, and"
msgstr ""

#: ../../cadquery/doc/assy.rst:516
msgid ""
":math:`\\vec{ d_1 } \\angle \\vec{ d_2 }` is the angle between :math:`\\vec{"
" d_1 }` and :math:`\\vec{ d_2 }`."
msgstr ""

#: ../../cadquery/doc/assy.rst:520
msgid ""
"The argument ``param`` defaults to 180 degrees, which sets the two "
"directions opposite to each other. This represents what is often called a "
"\"mate\" relationship, where the external faces of two objects touch."
msgstr ""

#: ../../cadquery/doc/assy.rst:540
msgid ""
"If the ``param`` argument is set to zero, then the two objects will point in"
" the same direction. This is often used when one object goes through "
"another, such as a pin going into a hole in a plate:"
msgstr ""

#: ../../cadquery/doc/assy.rst:564
msgid ""
"In creating an Axis constraint, a direction vector is extracted in one of "
"three different ways, depending on the object's type."
msgstr ""

#: ../../cadquery/doc/assy.rst:567
msgid ":class:`~cadquery.Face`:"
msgstr ""

#: ../../cadquery/doc/assy.rst:568
msgid "Using :meth:`~cadquery.Face.normalAt`"
msgstr ""

#: ../../cadquery/doc/assy.rst:570
msgid ""
":class:`~cadquery.Edge` and :meth:`~cadquery.Shape.geomType` is "
"``\"CIRCLE\"``:"
msgstr ""

#: ../../cadquery/doc/assy.rst:571
msgid "Using :meth:`~cadquery.Mixin1D.normal`"
msgstr ""

#: ../../cadquery/doc/assy.rst:573
msgid ""
":class:`~cadquery.Edge` and :meth:`~cadquery.Shape.geomType` is not "
"``\"CIRCLE\"``:"
msgstr ""

#: ../../cadquery/doc/assy.rst:574
msgid "Using :meth:`~cadquery.Mixin1D.tangentAt`"
msgstr ""

#: ../../cadquery/doc/assy.rst:576
msgid ""
"Using any other type of object will raise a :exc:`ValueError`. By far the "
"most common use case is to define an Axis constraint from a "
":class:`~cadquery.Face`."
msgstr ""

#: ../../cadquery/doc/assy.rst:617
msgid "Plane"
msgstr ""

#: ../../cadquery/doc/assy.rst:619
msgid ""
"The Plane constraint is simply a combination of both the Point and Axis "
"constraints. It is a convenient shortcut for a commonly used combination of "
"constraints. It can be used to shorten the previous example from the two "
"constraints to just one:"
msgstr ""

#: ../../cadquery/doc/assy.rst:639
msgid ""
"The result of this code is identical to the above two constraint example."
msgstr ""

#: ../../cadquery/doc/assy.rst:641
msgid ""
"For the cost function of Plane, please see the Point and Axis sections. The "
"``param`` argument is applied to Axis and should be left as the default "
"value for a \"mate\" style constraint (two surfaces touching) or can be set "
"to ``0`` for a through surface constraint (see description in the Axis "
"constraint section)."
msgstr ""

#: ../../cadquery/doc/assy.rst:647
msgid "PointInPlane"
msgstr ""

#: ../../cadquery/doc/assy.rst:649
msgid ""
"PointInPlane positions the center of the first object within the plane "
"defined by the second object. The cost function is:"
msgstr ""

#: ../../cadquery/doc/assy.rst:652
msgid "\\operatorname{dist}( \\vec{ c }, p_\\text{ offset } ) ^2"
msgstr ""

#: ../../cadquery/doc/assy.rst:659 ../../cadquery/doc/assy.rst:723
msgid ":math:`\\vec{ c }` is the center of the first argument,"
msgstr ""

#: ../../cadquery/doc/assy.rst:660
msgid ""
":math:`p_\\text{ offset }` is a plane created from the second object, offset"
" in the plane's normal direction by ``param``, and"
msgstr ""

#: ../../cadquery/doc/assy.rst:662
msgid ""
":math:`\\operatorname{dist}( \\vec{ a }, b)` is the distance between point "
":math:`\\vec{ a }` and plane :math:`b`."
msgstr ""

#: ../../cadquery/doc/assy.rst:711
msgid "PointOnLine"
msgstr ""

#: ../../cadquery/doc/assy.rst:713
msgid ""
"PointOnLine positions the center of the first object on the line defined by "
"the second object. The cost function is:"
msgstr ""

#: ../../cadquery/doc/assy.rst:716
msgid "( param - \\operatorname{dist}(\\vec{ c }, l ) )^2"
msgstr ""

#: ../../cadquery/doc/assy.rst:724
msgid ":math:`l` is a line created from the second object"
msgstr ""

#: ../../cadquery/doc/assy.rst:726
msgid ""
":math:`\\operatorname{dist}( \\vec{ a }, b)` is the distance between point "
":math:`\\vec{ a }` and line :math:`b`."
msgstr ""

#: ../../cadquery/doc/assy.rst:756
msgid "FixedPoint"
msgstr ""

#: ../../cadquery/doc/assy.rst:758
msgid ""
"FixedPoint fixes the position of the given argument to be equal to the given"
" point specified via the parameter of the constraint. This constraint locks "
"all translational degrees of freedom of the argument. The cost function is:"
msgstr ""

#: ../../cadquery/doc/assy.rst:761
msgid "\\left\\lVert \\vec{ c } - \\vec{param} \\right\\rVert ^2"
msgstr ""

#: ../../cadquery/doc/assy.rst:768
msgid ":math:`\\vec{ c }` is the center of the argument,"
msgstr ""

#: ../../cadquery/doc/assy.rst:769
msgid ""
":math:`param` is the parameter of the constraint - tuple specifying the "
"target position."
msgstr ""

#: ../../cadquery/doc/assy.rst:800
msgid "FixedRotation"
msgstr ""

#: ../../cadquery/doc/assy.rst:802
msgid ""
"FixedRotation fixes the rotation of the given argument to be equal to the "
"value specified via the parameter of the constraint."
msgstr ""

#: ../../cadquery/doc/assy.rst:804
msgid ""
"This constraint locks all rotational degrees of freedom of the argument. The"
" cost function is:"
msgstr ""

#: ../../cadquery/doc/assy.rst:807
msgid "\\left\\lVert \\vec{ R } - \\vec{param} \\right\\rVert ^2"
msgstr ""

#: ../../cadquery/doc/assy.rst:814
msgid ""
":math:`\\vec{ R }` vector of the rotation angles of the rotation applied to "
"the argument,"
msgstr ""

#: ../../cadquery/doc/assy.rst:815
msgid ""
":math:`param` is the parameter of the constraint - tuple specifying the "
"target rotation."
msgstr ""

#: ../../cadquery/doc/assy.rst:843
msgid "FixedAxis"
msgstr ""

#: ../../cadquery/doc/assy.rst:845
msgid ""
"FixedAxis fixes the orientation of the given argument's normal or tangent to"
" be equal to the orientation of the vector specified via the parameter of "
"the constraint. This constraint locks two rotational degrees of freedom of "
"the argument. The cost function is:"
msgstr ""

#: ../../cadquery/doc/assy.rst:848
msgid "( \\vec{ a } \\angle \\vec{ param } ) ^2"
msgstr ""

#: ../../cadquery/doc/assy.rst:855
msgid ":math:`\\vec{ a }` normal or tangent vector of the argument,"
msgstr ""

#: ../../cadquery/doc/assy.rst:856
msgid ""
":math:`param` is the parameter of the constraint - tuple specifying the "
"target direction."
msgstr ""

#: ../../cadquery/doc/assy.rst:884
msgid "Assembly colors"
msgstr ""

#: ../../cadquery/doc/assy.rst:886
msgid ""
"Aside from RGBA values, the :class:`~cadquery.Color` class can be "
"instantiated from a text name. Valid names are listed along with a color "
"sample below:"
msgstr ""
