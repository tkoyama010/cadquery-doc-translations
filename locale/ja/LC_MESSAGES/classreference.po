# SOME DESCRIPTIVE TITLE.
# Copyright (C) CadQuery Development Team
# This file is distributed under the same license as the CadQuery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CadQuery 2.6.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-06 00:06+0000\n"
"PO-Revision-Date: 2021-05-27 10:38+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2022\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/121077/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../cadquery/doc/classreference.rst:5
msgid "CadQuery Class Summary"
msgstr "CadQueryクラスの概要"

#: ../../cadquery/doc/classreference.rst:7
msgid ""
"This page documents all of the methods and functions of the CadQuery "
"classes, organized alphabetically."
msgstr "このページでは、CadQuery クラスのすべてのメソッドと関数について、アルファベット順に整理して説明しています。"

#: ../../cadquery/doc/classreference.rst:11
msgid ""
"For a listing organized by functional area, see the :ref:`apireference`"
msgstr "機能分野別の一覧は、 :ref:`apireference` をご覧ください。"

#: ../../cadquery/doc/classreference.rst:16
msgid "Core Classes"
msgstr "コアクラス"

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ":py:obj:`Sketch <cadquery.Sketch>`\\ \\(parent\\, locs\\, obj\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid "2D sketch."
msgstr "2Dスケッチ。"

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ":py:obj:`Workplane <cadquery.Workplane>`\\ \\(\\, obj\\=None\\)\\)"
msgstr ":py:obj:`Workplane <cadquery.Workplane>`\\ \\(\\, obj\\=None\\)\\)"

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:1
#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ""
"Defines a coordinate system in space, in which 2D coordinates can be used."
msgstr "2次元座標を使用できる空間上の座標系を定義します。"

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ""
":py:obj:`Assembly <cadquery.Assembly>`\\ \\(\\[obj\\, loc\\, name\\, "
"color\\, metadata\\]\\)"
msgstr ""
":py:obj:`Assembly <cadquery.Assembly>`\\ \\(\\[obj\\, loc\\, name\\, "
"color\\, metadata\\]\\)"

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly:1
#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ""
"Nested assembly of Workplane and Shape objects defining their relative "
"positions."
msgstr "WorkplaneとShapeオブジェクトの相対的な位置を定義するネストされたアセンブリ。"

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ":py:obj:`Constraint <cadquery.Constraint>`\\"
msgstr ":py:obj:`Constraint <cadquery.Constraint>`\\"

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid "alias of :py:class:`~cadquery.occ_impl.solver.ConstraintSpec`"
msgstr ":py:class:`~cadquery.occ_impl.solver.ConstraintSpec` のエイリアスです。"

#: ../../cadquery/doc/classreference.rst:26
msgid "Topological Classes"
msgstr "トポロジカルクラス"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":py:obj:`Shape <cadquery.Shape>`\\ \\(obj\\)"
msgstr ":py:obj:`Shape <cadquery.Shape>`\\ \\(obj\\)"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "Represents a shape in the system."
msgstr "システム内の形状を表します。"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":py:obj:`Vertex <cadquery.Vertex>`\\ \\(obj\\[\\, forConstruction\\]\\)"
msgstr ":py:obj:`Vertex <cadquery.Vertex>`\\ \\(obj\\[\\, forConstruction\\]\\)"

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Vertex:1
#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "A Single Point in Space"
msgstr "空間の中の一点"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":py:obj:`Edge <cadquery.Edge>`\\ \\(obj\\)"
msgstr ":py:obj:`Edge <cadquery.Edge>`\\ \\(obj\\)"

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge:1
#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "A trimmed curve that represents the border of a face"
msgstr "面の境界を表すトリミングされた曲線"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ""
":py:obj:`cadquery.occ_impl.shapes.Mixin1D "
"<cadquery.occ_impl.shapes.Mixin1D>`\\ \\(\\)"
msgstr ""
":py:obj:`cadquery.occ_impl.shapes.Mixin1D "
"<cadquery.occ_impl.shapes.Mixin1D>`\\ \\(\\)"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":py:obj:`Wire <cadquery.Wire>`\\ \\(obj\\)"
msgstr ":py:obj:`Wire <cadquery.Wire>`\\ \\(obj\\)"

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire:1
#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "A series of connected, ordered Edges, that typically bounds a Face"
msgstr "接続され、順序付けられた一連のEdgeで、通常、Faceを囲みます。"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":py:obj:`Face <cadquery.Face>`\\ \\(obj\\)"
msgstr ":py:obj:`Face <cadquery.Face>`\\ \\(obj\\)"

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face:1
#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "a bounded surface that represents part of the boundary of a solid"
msgstr "固体の境界の一部を表す有界面"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":py:obj:`Shell <cadquery.Shell>`\\ \\(obj\\)"
msgstr ":py:obj:`Shell <cadquery.Shell>`\\ \\(obj\\)"

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shell:1
#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "the outer boundary of a surface"
msgstr "サーフェスの外側の境界線"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ""
":py:obj:`cadquery.occ_impl.shapes.Mixin3D "
"<cadquery.occ_impl.shapes.Mixin3D>`\\ \\(\\)"
msgstr ""
":py:obj:`cadquery.occ_impl.shapes.Mixin3D "
"<cadquery.occ_impl.shapes.Mixin3D>`\\ \\(\\)"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":py:obj:`Solid <cadquery.Solid>`\\ \\(obj\\)"
msgstr ":py:obj:`Solid <cadquery.Solid>`\\ \\(obj\\)"

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid:1
#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "a single solid"
msgstr "単体"

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":py:obj:`Compound <cadquery.Compound>`\\ \\(obj\\)"
msgstr ":py:obj:`Compound <cadquery.Compound>`\\ \\(obj\\)"

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound:1
#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "a collection of disconnected solids"
msgstr "切断された固体の集合体"

#: ../../cadquery/doc/classreference.rst:42
msgid "Geometry Classes"
msgstr "ジオメトリークラス"

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid ":py:obj:`Vector <cadquery.Vector>`\\ \\(\\)"
msgstr ":py:obj:`Vector <cadquery.Vector>`\\ \\(\\)"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:1
#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid "Create a 3-dimensional vector"
msgstr "3次元ベクトルを作成する"

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid ":py:obj:`Matrix <cadquery.Matrix>`\\ \\(\\)"
msgstr ":py:obj:`Matrix <cadquery.Matrix>`\\ \\(\\)"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix:1
#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid "A 3d , 4x4 transformation matrix."
msgstr "3d , 4x4 の変換行列。"

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid ":py:obj:`Plane <cadquery.Plane>`\\ \\(origin\\[\\, xDir\\, normal\\]\\)"
msgstr ":py:obj:`Plane <cadquery.Plane>`\\ \\(origin\\[\\, xDir\\, normal\\]\\)"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane:1
#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid "A 2D coordinate system in space"
msgstr "空間における2次元座標系"

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid ":py:obj:`Location <cadquery.Location>`\\ \\(t\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid "Location in 3D space."
msgstr "3D空間での位置。"

#: ../../cadquery/doc/classreference.rst:52
msgid "Selector Classes"
msgstr "セレクタクラス"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":py:obj:`Selector <cadquery.selectors.Selector>`\\ \\(\\)"
msgstr ":py:obj:`Selector <cadquery.selectors.Selector>`\\ \\(\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.Selector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Filters a list of objects."
msgstr "オブジェクトのリストにフィルタをかける。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`NearestToPointSelector "
"<cadquery.selectors.NearestToPointSelector>`\\ \\(pnt\\)"
msgstr ""
":py:obj:`NearestToPointSelector "
"<cadquery.selectors.NearestToPointSelector>`\\ \\(pnt\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Selects object nearest the provided point."
msgstr "指定された点に最も近いオブジェクトを選択します。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`BoxSelector <cadquery.selectors.BoxSelector>`\\ \\(point0\\, "
"point1\\[\\, boundingbox\\]\\)"
msgstr ""
":py:obj:`BoxSelector <cadquery.selectors.BoxSelector>`\\ \\(point0\\, "
"point1\\[\\, boundingbox\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Selects objects inside the 3D box defined by 2 points."
msgstr "2点で定義された3Dボックス内のオブジェクトを選択します。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`BaseDirSelector <cadquery.selectors.BaseDirSelector>`\\ "
"\\(vector\\[\\, tolerance\\]\\)"
msgstr ""
":py:obj:`BaseDirSelector <cadquery.selectors.BaseDirSelector>`\\ "
"\\(vector\\[\\, tolerance\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BaseDirSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
"A selector that handles selection on the basis of a single direction vector."
msgstr "単一の方向ベクトルに基づく選択を処理するセレクタ。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`ParallelDirSelector <cadquery.selectors.ParallelDirSelector>`\\ "
"\\(vector\\[\\, tolerance\\]\\)"
msgstr ""
":py:obj:`ParallelDirSelector <cadquery.selectors.ParallelDirSelector>`\\ "
"\\(vector\\[\\, tolerance\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Selects objects parallel with the provided direction."
msgstr "指定した方向と平行なオブジェクトを選択します。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`DirectionSelector <cadquery.selectors.DirectionSelector>`\\ "
"\\(vector\\[\\, tolerance\\]\\)"
msgstr ""
":py:obj:`DirectionSelector <cadquery.selectors.DirectionSelector>`\\ "
"\\(vector\\[\\, tolerance\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Selects objects aligned with the provided direction."
msgstr "指定した方向に並んだオブジェクトを選択します。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`PerpendicularDirSelector "
"<cadquery.selectors.PerpendicularDirSelector>`\\ \\(vector\\[\\, "
"tolerance\\]\\)"
msgstr ""
":py:obj:`PerpendicularDirSelector "
"<cadquery.selectors.PerpendicularDirSelector>`\\ \\(vector\\[\\, "
"tolerance\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Selects objects perpendicular with the provided direction."
msgstr "指定した方向と直交するオブジェクトを選択します。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":py:obj:`TypeSelector <cadquery.selectors.TypeSelector>`\\ \\(typeString\\)"
msgstr ":py:obj:`TypeSelector <cadquery.selectors.TypeSelector>`\\ \\(typeString\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Selects objects having the prescribed geometry type."
msgstr "所定のジオメトリタイプを持つオブジェクトを選択します。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`RadiusNthSelector <cadquery.selectors.RadiusNthSelector>`\\ "
"\\(n\\[\\, directionMax\\, tolerance\\]\\)"
msgstr ""
":py:obj:`RadiusNthSelector <cadquery.selectors.RadiusNthSelector>`\\ "
"\\(n\\[\\, directionMax\\, tolerance\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.RadiusNthSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Select the object with the Nth radius."
msgstr "N 番目の半径を持つオブジェクトを選択します。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`CenterNthSelector <cadquery.selectors.CenterNthSelector>`\\ "
"\\(vector\\, n\\[\\, directionMax\\, ...\\]\\)"
msgstr ""
":py:obj:`CenterNthSelector <cadquery.selectors.CenterNthSelector>`\\ "
"\\(vector\\, n\\[\\, directionMax\\, ...\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.CenterNthSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
"Sorts objects into a list with order determined by the distance of their "
"center projected onto the specified direction."
msgstr "オブジェクトを、指定された方向に投影された中心からの距離によって決まる順序でリストにソートします。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`DirectionMinMaxSelector "
"<cadquery.selectors.DirectionMinMaxSelector>`\\ \\(vector\\[\\, ...\\]\\)"
msgstr ""
":py:obj:`DirectionMinMaxSelector "
"<cadquery.selectors.DirectionMinMaxSelector>`\\ \\(vector\\[\\, ...\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionMinMaxSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Selects objects closest or farthest in the specified direction."
msgstr "指定した方向に最も近い、または最も遠いオブジェクトを選択します。"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`DirectionNthSelector <cadquery.selectors.DirectionNthSelector>`\\ "
"\\(vector\\, n\\[\\, ...\\]\\)"
msgstr ""
":py:obj:`DirectionNthSelector <cadquery.selectors.DirectionNthSelector>`\\ "
"\\(vector\\, n\\[\\, ...\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionNthSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
"Filters for objects parallel (or normal) to the specified direction then "
"returns the Nth one."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`LengthNthSelector <cadquery.selectors.LengthNthSelector>`\\ "
"\\(n\\[\\, directionMax\\, tolerance\\]\\)"
msgstr ""
":py:obj:`LengthNthSelector <cadquery.selectors.LengthNthSelector>`\\ "
"\\(n\\[\\, directionMax\\, tolerance\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.LengthNthSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Select the object(s) with the Nth length"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`AreaNthSelector <cadquery.selectors.AreaNthSelector>`\\ \\(n\\[\\, "
"directionMax\\, tolerance\\]\\)"
msgstr ""
":py:obj:`AreaNthSelector <cadquery.selectors.AreaNthSelector>`\\ \\(n\\[\\, "
"directionMax\\, tolerance\\]\\)"

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:1
#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Selects the object(s) with Nth area"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`BinarySelector <cadquery.selectors.BinarySelector>`\\ \\(left\\, "
"right\\)"
msgstr ""
":py:obj:`BinarySelector <cadquery.selectors.BinarySelector>`\\ \\(left\\, "
"right\\)"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Base class for selectors that operates with two other selectors."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":py:obj:`AndSelector <cadquery.selectors.AndSelector>`\\ \\(left\\, right\\)"
msgstr ":py:obj:`AndSelector <cadquery.selectors.AndSelector>`\\ \\(left\\, right\\)"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Intersection selector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":py:obj:`SumSelector <cadquery.selectors.SumSelector>`\\ \\(left\\, right\\)"
msgstr ":py:obj:`SumSelector <cadquery.selectors.SumSelector>`\\ \\(left\\, right\\)"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Union selector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`SubtractSelector <cadquery.selectors.SubtractSelector>`\\ "
"\\(left\\, right\\)"
msgstr ""
":py:obj:`SubtractSelector <cadquery.selectors.SubtractSelector>`\\ "
"\\(left\\, right\\)"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Difference selector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`InverseSelector <cadquery.selectors.InverseSelector>`\\ "
"\\(selector\\)"
msgstr ""
":py:obj:`InverseSelector <cadquery.selectors.InverseSelector>`\\ "
"\\(selector\\)"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Inverts the selection of given selector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ""
":py:obj:`StringSyntaxSelector <cadquery.selectors.StringSyntaxSelector>`\\ "
"\\(selectorString\\)"
msgstr ""
":py:obj:`StringSyntaxSelector <cadquery.selectors.StringSyntaxSelector>`\\ "
"\\(selectorString\\)"

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Filter lists objects using a simple string syntax."
msgstr ""

#: ../../cadquery/doc/classreference.rst:80
msgid "Class Details"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly:1 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane:1
#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.Color:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.Selector:1 ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: ../../cadquery/cadquery/__init__.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__iter__:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.remove:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.solve:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.__add__:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.__and__:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.__init__:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.__iter__:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.__mul__:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.__or__:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.__sub__:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.__truediv__:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.add:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.all:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.bezier:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.box:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cboreHole:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.center:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.chamfer:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.clean:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.close:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.combineSolids:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.compounds:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.consolidateWires:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.cylinder:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.each:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.eachpoint:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.edges:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipse:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.end:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.faces:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.fillet:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.findSolid:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.hole:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.line:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.lineTo:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.mirrorX:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.mirrorY:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.move:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.moveTo:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.pushPoints:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.radiusArc:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.sagittaArc:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.split:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.tangentArcPoint:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wire:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.workplane:0
#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.toJSON:0
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportCAF:0
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportGLTF:0
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportVRML:0
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportVTKJS:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.add:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.enlarge:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.findOutsideBox2D:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.isInside:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.__getitem__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toLocalCoords:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__eq__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.multiply:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToLine:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToPlane:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.CompSolid:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.ancestors:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.fuse:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.makeCompound:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.makeText:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.remove:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.siblings:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.hasPCurve:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.trim:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.addHole:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.chamfer2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.fillet2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.isoline:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.isolines:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeFromWires:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.thicken:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.trim:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.bounds:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.endPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.project:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.startPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1DProtocol:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__add__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__mul__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__sub__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__truediv__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.ancestors:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.cast:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.clean:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.distance:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.distances:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.edges:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.export:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportBin:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportBrep:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.faces:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.fix:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.importBin:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.importBrep:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isEqual:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isSame:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.locate:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.located:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.matrixOfInertia:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.mesh:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.move:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.remove:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.replace:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.scale:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.shells:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.siblings:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.solids:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.split:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toNURBS:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toVtkPolyData:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.translate:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.vertices:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.wires:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.ShapeProtocol:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shell.makeShell:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.addCavity:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.isSolid:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeCone:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeCylinder:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeLoft:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeSolid:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeSphere:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeTorus:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeWedge:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Vertex.__init__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.chamfer2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.fillet2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeHelix:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makePolygon:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.offset2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.stitch:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.box:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cap:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.chamfer:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.check:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.circle:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.clean:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.closest:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.compound:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cone:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cut:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cylinder:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.downcast:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.edgeOn:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.edgesToWires:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.ellipse:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.extrude:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.face:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.faceOn:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fill:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fillet:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fix:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fuse:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.imprint:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.intersect:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.loft:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.offset:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.plane:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.polygon:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.polyline:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.project:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.rect:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.revolve:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.segment:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.setThreads:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.shell:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.solid:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sphere:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.spline:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.split:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sweep:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.text:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.torus:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.vertex:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wire:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wireOn:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wiresToFaces:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector.key:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BaseDirSelector.filter:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BaseDirSelector.test:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.CenterNthSelector.key:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionMinMaxSelector:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionNthSelector.filter:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector.test:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.LengthNthSelector.key:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector.test:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector.test:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.RadiusNthSelector.key:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector.filter:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__add__:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.__init__:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__mul__:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.__sub__:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__truediv__:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.add:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.arc:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.assemble:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.bezier:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.chamfer:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.circle:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.clean:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.close:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.constrain:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.copy:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.delete:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.distribute:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.each:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.edge:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.edges:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.ellipse:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.face:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.faces:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.fillet:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.hull:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.importDXF:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.located:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.offset:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.parray:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.polygon:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.push:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.rarray:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.rect:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.regularPolygon:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.replace:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.reset:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.segment:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.select:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.slot:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.solve:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.spline:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.subtract:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.tag:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.trapezoid:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.val:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.vals:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.vertices:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.wires:0 ../../cadquery/doc/classreference.rst:0
msgid "Parameters"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:1
msgid "construct an assembly"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:3
msgid "root object of the assembly (default: None)"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:4
msgid ""
"location of the root object (default: None, interpreted as identity "
"transformation)"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:5
msgid ""
"unique name of the root object (default: None, resulting in an UUID being "
"generated)"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:6
msgid "color of the added object (default: None)"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:7
msgid "a store for user-defined metadata (default: None)"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.remove:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.__init__:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.add:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.bezier:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.center:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.chamfer:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.close:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.combineSolids:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.compounds:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.cylinder:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.edges:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipse:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.faces:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.fillet:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.line:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.lineTo:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.mirrorX:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.mirrorY:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.pushPoints:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.radiusArc:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.sagittaArc:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.split:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.tangentArcPoint:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vals:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toLocalCoords:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.endPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.startPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:0
#: ../../cadquery/doc/classreference.rst:0
msgid "Returns"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:8
msgid "An Assembly object."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:11
msgid "To create an empty assembly use::"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__init__:15
msgid "To create one constraint a root object::"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__iter__:1
msgid "Assembly iterator yielding shapes, names, locations and colors."
msgstr ""

#: ../../cadquery/cadquery/__init__.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.__iter__:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.remove:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.solve:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.toCompound:0
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.traverse:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__add__:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__and__:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__iter__:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__mul__:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__or__:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__sub__:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.__truediv__:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.all:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.bezier:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.box:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cboreHole:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.center:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.chamfer:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.clean:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.close:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.combineSolids:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.compounds:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.consolidateWires:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.cylinder:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.each:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.eachpoint:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.edges:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipse:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.end:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.faces:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.fillet:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.findSolid:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.hole:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.line:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.lineTo:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.mirrorX:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.mirrorY:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.move:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.moveTo:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.pushPoints:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.radiusArc:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.sagittaArc:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.size:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.tangentArcPoint:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vals:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wire:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.workplane:0
#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.Color.__getstate__:0
#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.Color.toTuple:0
#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.toJSON:0
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportCAF:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.add:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.enlarge:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.findOutsideBox2D:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.isInside:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__getstate__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.toTuple:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.__getitem__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.__getstate__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.__repr__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.transposed_list:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__getstate__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.Center:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__eq__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__getstate__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__repr__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__str__:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.multiply:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.normalized:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToLine:0
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToPlane:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.__bool__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.ancestors:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.fuse:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.makeCompound:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.makeText:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.siblings:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.arcCenter:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.close:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.hasPCurve:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.trim:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.addHole:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.chamfer2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.fillet2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.isoline:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.isolines:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeFromWires:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.thicken:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.toPln:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.trim:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.uvBounds:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.bounds:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.endPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.project:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.startPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__add__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__eq__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__getstate__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__hash__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__iter__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__mul__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__sub__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__truediv__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.ancestors:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.cast:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.clean:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.distance:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.distances:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.edges:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportBin:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportBrep:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.faces:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.fix:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.hashCode:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.importBin:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.importBrep:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isEqual:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isNull:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isSame:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isValid:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.locate:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.located:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.location:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.matrixOfInertia:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.move:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.remove:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.replace:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.scale:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.shells:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.siblings:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.solids:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.split:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toNURBS:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toVtkPolyData:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.translate:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.vertices:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.wires:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shell.makeShell:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.addCavity:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.innerShells:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.isSolid:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeCone:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeCylinder:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeLoft:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeSolid:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeSphere:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeTorus:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeWedge:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.outerShell:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Vertex.Center:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.Vertices:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.__iter__:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.chamfer2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.close:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.fillet2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeHelix:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makePolygon:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.offset2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.stitch:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.box:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cap:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.chamfer:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.check:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.circle:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.clean:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.closest:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.compound:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cone:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cut:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cylinder:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.downcast:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.edgeOn:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.edgesToWires:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.ellipse:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.extrude:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.face:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.faceOn:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fill:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fillet:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fix:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fuse:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.imprint:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.intersect:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.loft:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.offset:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.plane:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.polygon:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.polyline:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.rect:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.segment:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.shell:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.solid:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sphere:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.spline:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.split:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sweep:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.text:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.torus:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.vertex:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wire:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wireOn:0
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wiresToFaces:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector.key:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BaseDirSelector.filter:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BaseDirSelector.test:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.CenterNthSelector.key:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionNthSelector.filter:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector.test:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.LengthNthSelector.key:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector.test:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector.test:0
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.RadiusNthSelector.key:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__add__:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.__iter__:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__mul__:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.__sub__:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__truediv__:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.add:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.arc:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.assemble:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.bezier:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.chamfer:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.circle:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.clean:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.close:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.constrain:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.copy:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.delete:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.distribute:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.each:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.edge:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.edges:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.ellipse:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.face:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.faces:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.fillet:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.finalize:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.hull:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.importDXF:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.located:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.offset:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.parray:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.polygon:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.push:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.rarray:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.rect:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.regularPolygon:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.replace:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.reset:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.segment:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.select:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.slot:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.solve:0 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.spline:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.subtract:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.tag:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.trapezoid:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.val:0
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.vals:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.vertices:0
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.wires:0 ../../cadquery/doc/classreference.rst:0
msgid "Return type"
msgstr ""

#: ../docstring of cadquery.Assembly.__weakref__:1 ../docstring of
#: cadquery.BoundBox.__weakref__:1 ../docstring of
#: cadquery.Color.__weakref__:1 ../docstring of
#: cadquery.Location.__weakref__:1 ../docstring of
#: cadquery.Matrix.__weakref__:1 ../docstring of cadquery.Plane.__weakref__:1
#: ../docstring of cadquery.Selector.__weakref__:1 ../docstring of
#: cadquery.Shape.__weakref__:1 ../docstring of cadquery.Sketch.__weakref__:1
#: ../docstring of cadquery.Vector.__weakref__:1 ../docstring of
#: cadquery.Workplane.__weakref__:1
msgid "list of weak references to the object (if defined)"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.add:1
msgid "Add a subassembly to the current assembly."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.addSubshape:1
msgid "Handles name, color and layer metadata for subshapes."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.addSubshape:3
msgid "The subshape to add metadata to."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.addSubshape:4
msgid "The name to assign to the subshape."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.addSubshape:5
msgid "The color to assign to the subshape."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.addSubshape:6
msgid "The layer to assign to the subshape."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.addSubshape:7
msgid "The modified assembly."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.constrain:1
msgid "Define a new constraint."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.export:1
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.save:1
msgid "Save assembly to a file."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.export:3
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.save:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStep:5
msgid "Path and filename for writing."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.export:4
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.save:4
msgid ""
"export format (default: None, results in format being inferred form the "
"path)"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.export:5
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.save:5
msgid ""
"STEP only - See "
":meth:`~cadquery.occ_impl.exporters.assembly.exportAssembly`."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.export:6
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.save:6
msgid ""
"the deflection tolerance, in model units. Only used for glTF, VRML. Default "
"0.1."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.export:7
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.save:7
msgid ""
"the angular tolerance, in radians. Only used for glTF, VRML. Default 0.1."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.export:8
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.save:8
msgid ""
"Additional keyword arguments.  Only used for STEP, glTF and STL. See "
":meth:`~cadquery.occ_impl.exporters.assembly.exportAssembly`."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.export:10
#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.save:10
msgid "STL only - Sets whether or not STL export should be text or binary"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.remove:1
msgid "Remove a part/subassembly from the current assembly."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.remove:3
msgid "Name of the part/subassembly to be removed"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.remove:4
msgid "The modified assembly"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.remove:6
msgid ""
"*NOTE* This method can cause problems with deeply nested assemblies and does"
" not remove constraints associated with the removed part/subassembly."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of cadquery.Assembly.shapes:1
msgid "List of Shape objects in the .obj field"
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.solve:1
msgid "Solve the constraints."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.toCompound:1
msgid ""
"Returns a Compound made from this Assembly (including all children) with the"
" current Locations applied. Usually this method would only be used after "
"solving."
msgstr ""

#: ../../cadquery/cadquery/assembly.pydocstring of
#: cadquery.assembly.Assembly.traverse:1
msgid "Yield (name, child) pairs in a bottom-up manner"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox:1
msgid "A BoundingBox for an object or set of objects. Wraps the OCP one"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.add:1
msgid "Returns a modified (expanded) bounding box"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.add:3
msgid "obj can be one of several things:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.add:4
msgid "a 3-tuple corresponding to x,y, and z amounts to add"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.add:5
msgid "a vector, containing the x,y,z values to add"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.add:6
msgid ""
"another bounding box, where a new box will be created that encloses both."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.add:9
msgid "This bounding box is not changed."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.enlarge:1
msgid ""
"Returns a modified (expanded) bounding box, expanded in all directions by "
"the tolerance value."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.enlarge:4
msgid ""
"This means that the minimum values of its X, Y and Z intervals of the "
"bounding box are reduced by the absolute value of tol, while the maximum "
"values are increased by the same amount."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.findOutsideBox2D:1
msgid "Compares bounding boxes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.findOutsideBox2D:3
msgid ""
"Compares bounding boxes. Returns none if neither is inside the other. "
"Returns the outer one if either is outside the other."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.findOutsideBox2D:6
msgid ""
"BoundBox.isInside works in 3d, but this is a 2d bounding box, so it doesn't "
"work correctly plus, there was all kinds of rounding error in the built-in "
"implementation i do not understand."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.BoundBox.isInside:1
msgid "Is the provided bounding box inside this one?"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.Color:1
msgid "Wrapper for the OCCT color object Quantity_ColorRGBA."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.Color.__eq__:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__eq__:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__eq__:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__eq__:1
msgid "Return self==value."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.Color.__getstate__:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__getstate__:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.__getstate__:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__getstate__:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__getstate__:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__getstate__:1
msgid "Helper for pickle."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.Color.__hash__:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__hash__:1
msgid "Return hash(self)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.Color.toTuple:1
msgid "Convert Color to RGB tuple."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.CompSolid:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid:1
msgid ""
"Bases: :py:class:`~cadquery.occ_impl.shapes.Shape`, "
":py:class:`~cadquery.occ_impl.shapes.Mixin3D`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.__bool__:1
msgid "Check if empty."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.ancestors:1
msgid ""
"Iterate over ancestors, i.e. shapes of same kind within shape that contain "
"elements of self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.cut:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.cut:1
msgid "Remove the positional arguments from this Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.cut:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.intersect:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.cut:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.fuse:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.intersect:3
msgid "Fuzzy mode tolerance"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.fuse:1
msgid "Fuse shapes together"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.intersect:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.intersect:1
msgid "Intersection of the positional arguments and this Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.makeCompound:1
msgid "Create a compound out of a list of shapes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.makeText:1
msgid "Create a 3D text"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.remove:1
msgid "Remove the specified shapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Compound.siblings:1
msgid ""
"Iterate over siblings, i.e. shapes within shape that share subshapes of kind"
" with the elements of self."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionMinMaxSelector:1
msgid "Bases: :py:class:`~cadquery.selectors.CenterNthSelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.CenterNthSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionMinMaxSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionNthSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.LengthNthSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.RadiusNthSelector:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector:3
msgid "Applicability:"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionMinMaxSelector:4
msgid ""
"All object types. for a vertex, its point is used. for all other kinds of "
"objects, the center of mass of the object is used."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionMinMaxSelector:7
msgid ""
"You can use the string shortcuts >(X|Y|Z) or <(X|Y|Z) if you want to select "
"based on a cardinal direction."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionMinMaxSelector:10
msgid "For example this::"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionMinMaxSelector:14
msgid ""
"Means to select the face having the center of mass farthest in the positive "
"z direction, and is the same as::"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector:1
msgid "Bases: :py:class:`~cadquery.selectors.BaseDirSelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionNthSelector:4
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector:4
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector:4
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector:4
msgid "Linear Edges Planar Faces"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector:7
msgid ""
"Use the string syntax shortcut +/-(X|Y|Z) if you want to select based on a "
"cardinal direction."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__and__:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__mul__:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__or__:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__sub__:5
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.__truediv__:5
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector:9
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector:9
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector:9
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector:9
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector:10
msgid "Example::"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector:13
msgid ""
"selects faces with the normal in the z direction, and is equivalent to::"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BaseDirSelector.test:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionSelector.test:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector.test:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector.test:1
msgid ""
"Test a specified vector. Subclasses override to provide other "
"implementations"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire:1
msgid ""
"Bases: :py:class:`~cadquery.occ_impl.shapes.Shape`, "
":py:class:`~cadquery.occ_impl.shapes.Mixin1D`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.arcCenter:1
msgid "Center of an underlying circle or ellipse geometry."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.close:1
msgid "Close an Edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.hasPCurve:1
msgid "Check if self has a pcurve defined on f."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeBezier:1
msgid "Create a cubic Bézier Curve from the points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeBezier:3
msgid ""
"a list of Vectors that represent the points. The edge will pass through the "
"first and the last point, and the inner points are Bézier control points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeBezier:6
msgid "An edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:1
msgid ""
"Makes an Ellipse centered at the provided point, having normal in the "
"provided direction."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:4
msgid ""
"x radius of the ellipse (along the x-axis of plane the ellipse should lie "
"in)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:6
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:5
msgid ""
"y radius of the ellipse (along the y-axis of plane the ellipse should lie "
"in)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:6
msgid "vector representing the center of the ellipse"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:7
msgid ""
"vector representing the direction of the plane the ellipse should lie in"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:7
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:8
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeEllipse:7
msgid "start angle of arc"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:8
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:9
msgid "end angle of arc (angle2 == angle1 return closed ellipse = default)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:10
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:10
msgid "clockwise (-1) or counter clockwise (1)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeEllipse:11
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSpline:17
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSplineApprox:8
msgid "an Edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeLine:1
msgid "Create a line between two points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeLine:3
msgid "Vector that represents the first point"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeLine:4
msgid "Vector that represents the second point"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeLine:5
msgid "A linear edge between the two provided points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSpline:1
msgid "Interpolate a spline through the provided points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSpline:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSplineApprox:3
msgid "a list of Vectors that represent the points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSpline:4
msgid "tuple of Vectors specifying start and finish tangent"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:17
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSpline:5
msgid "creation of periodic curves"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSpline:6
msgid ""
"the value of the parameter at each interpolation point. (The interpolated "
"curve is represented as a vector-valued function of a scalar parameter.) If "
"periodic == True, then len(parameters) must be len(intepolation points) + 1,"
" otherwise len(parameters) must be equal to len(interpolation points)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSpline:10
msgid ""
"whether to scale the specified tangent vectors before interpolating. Each "
"tangent is scaled, so it's length is equal to the derivative of the Lagrange"
" interpolated curve. I.e., set this to True, if you want to use only the "
"direction of the tangent vectors specified by ``tangents``, but not their "
"magnitude."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSpline:14
msgid ""
"tolerance of the algorithm (consult OCC documentation). Used to check that "
"the specified points are not too close to each other, and that tangent "
"vectors are not too short. (In either case interpolation may fail.)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSplineApprox:1
msgid "Approximate a spline through the provided points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSplineApprox:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeSplineApprox:4
msgid "tolerance of the algorithm (consult OCC documentation)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSplineApprox:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeSplineApprox:5
msgid ""
"optional tuple of 3 weights use for variational smoothing (default: None)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSplineApprox:6
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeSplineApprox:6
msgid ""
"minimum spline degree. Enforced only when smothing is None (default: 1)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:11
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:7
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeSplineApprox:7
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeSplineApprox:7
msgid "maximum spline degree (default: 6)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeTangentArc:1
msgid ""
"Makes a tangent arc from point v1, in the direction of v2 and ends at v3."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeTangentArc:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeThreePointArc:4
msgid "start vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeTangentArc:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.tangentAt:6
msgid "tangent vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeTangentArc:6
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeThreePointArc:6
msgid "end vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeTangentArc:7
msgid "an edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeThreePointArc:1
msgid "Makes a three point arc through the provided points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeThreePointArc:5
msgid "middle vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.makeThreePointArc:7
msgid "an edge object through the three points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.trim:1
msgid "Trim the edge in the parametric space to (u0, u1)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Edge.trim:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.trim:3
msgid "NB: this operation is done on the base geometry."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shell:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Vertex:1
msgid "Bases: :py:class:`~cadquery.occ_impl.shapes.Shape`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.Center:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Center:1
msgid "The point of the center of mass of this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.addHole:1
msgid "Add one or more holes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.chamfer2D:1
msgid "Apply 2D chamfer to a face"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.extend:1
msgid "Extend a face. Does not work well in periodic directions."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.extend:3
msgid "length of the extension."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.extend:4
msgid "extend along the umin isoline."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.extend:5
msgid "extend along the umax isoline."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.extend:6
msgid "extend along the vmin isoline."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.extend:7
msgid "extend along the vmax isoline."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.fillet2D:1
msgid "Apply 2D fillet to a face"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.isoline:1
msgid "Construct an isoline."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.isolines:1
msgid "Construct multiple isolines."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeFromWires:1
msgid "Makes a planar face from one or more wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:1
msgid ""
"Returns a surface enclosed by a closed polygon defined by 'edges' and "
"'constraints'."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:3
msgid "edges"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:5
msgid "constraints"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:7
msgid "OCC.Core.GeomAbs continuity condition"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:8
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:8
msgid ">=2"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:12
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:9
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:9
msgid "number of points on curve >= 15"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:13
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:10
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:10
msgid "number of iterations >= 2"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:11
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:11
msgid "bool Anisotropy"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:12
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:12
msgid "2D tolerance >0"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:13
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:13
msgid "3D tolerance >0"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:17
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:14
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:14
msgid "angular tolerance"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:15
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:15
msgid "tolerance for curvature >0"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:19
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:16
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:16
msgid "highest polynomial degree >= 2"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:20
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeNSidedSurface:17
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:17
msgid "greatest number of segments >= 2"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeRuledSurface:1
msgid ""
"makeRuledSurface(Edge|Wire,Edge|Wire) -- Make a ruled surface Create a ruled"
" surface out of two edges or wires. If wires are used then these must have "
"the same number of edges"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeSplineApprox:1
msgid "Approximate a spline surface through the provided points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.makeSplineApprox:3
msgid "a 2D list of Vectors that represent the points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normalAt:1
msgid "Computes the normal vector at the desired location on the face."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normalAt:3
msgid "a vector representing the direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normalAt:4
msgid ""
"the location to compute the normal at. If none, the center of the face is "
"used."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normalAt:10
msgid ""
"Computes the normal vector at the desired location in the u,v parameter "
"space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normalAt:12
msgid "a vector representing the normal direction and the position"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normalAt:13
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.positionAt:4
msgid "the u parametric location to compute the normal at."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normalAt:14
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.positionAt:5
msgid "the v parametric location to compute the normal at."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normals:1
msgid ""
"Computes the normal vectors at the desired locations in the u,v parameter "
"space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normals:3
msgid ""
"a tuple of list of vectors representing the normal directions and the "
"positions"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normals:4
msgid "the u parametric locations to compute the normal at."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.normals:5
msgid "the v parametric locations to compute the normal at."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.paramAt:1
msgid "Computes the (u,v) pair closest to a given vector."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.paramAt:3
msgid "(u, v) tuple"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.paramAt:4
msgid "the location to compute the normal at."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.params:1
msgid "Computes (u,v) pairs closest to given vectors."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.params:3
msgid "list of (u, v) tuples"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.params:4
msgid "the points to compute the normals at."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.positionAt:1
msgid ""
"Computes the position vector at the desired location in the u,v parameter "
"space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.positionAt:3
msgid "a vector representing the position"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.positions:1
msgid ""
"Computes position vectors at the desired locations in the u,v parameter "
"space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.positions:3
msgid "list of vectors corresponding to the requested u,v positions"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.positions:4
msgid "iterable of u,v pairs."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.thicken:1
msgid "Return a thickened face"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.toArcs:1
msgid "Approximate planar face with arcs and straight line segments."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.toArcs:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toSplines:5
msgid "Approximation tolerance."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.toPln:1
msgid "Convert this face to a gp_Pln."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.toPln:3
msgid ""
"Note the Location of the resulting plane may not equal the center of this "
"face, however the resulting plane will still contain the center of this "
"face."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.trim:1
msgid "Trim the face in the (u,v) space to (u0, u1)x(v1, v2)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.trim:8
msgid "Trim the face using a polyline defined in the (u,v) space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.trim:13
msgid "Trim using wires. The provided wires need to have a pcurve on self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Face.uvBounds:1
msgid "Parametric bounds (u_min, u_max, v_min, v_max)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location:1
msgid "Location in 3D space. Depending on usage can be absolute or relative."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location:3
msgid ""
"This class wraps the TopLoc_Location class from OCCT. It can be used to move"
" Shape objects in both relative and absolute manner. It is the preferred "
"type to locate objects in CQ."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:1
msgid "Location with translation t with respect to the original location."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:4
msgid "Location with translation (x,y,z) and 3 rotation angles."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:7
msgid "Location corresponding to the location of the Plane t."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:10
msgid ""
"Location corresponding to the angular location of the Plane t with "
"translation v."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:13
msgid "Location wrapping the low-level TopLoc_Location object t"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:16
msgid "Location wrapping the low-level gp_Trsf object t"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:19
msgid "Location with translation t and rotation around ax by angle"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:20
msgid "with respect to the original location."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.__init__:23
msgid "Location with translation t and 3 rotation angles."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Location.toTuple:1
msgid "Convert the location to a translation, rotation tuple."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix:3
msgid "Used to move geometry in space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix:5
msgid ""
"The provided \"matrix\" parameter may be None, a gp_GTrsf, or a nested list "
"of values."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix:8
msgid "If given a nested list, it is expected to be of the form:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix:10
msgid "[[m11, m12, m13, m14],"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix:11
msgid "[m21, m22, m23, m24], [m31, m32, m33, m34]]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix:14
msgid ""
"A fourth row may be given, but it is expected to be: [0.0, 0.0, 0.0, 1.0] "
"since this is a transform matrix."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.__getitem__:1
msgid ""
"Provide Matrix[r, c] syntax for accessing individual values. The row and "
"column parameters start at zero, which is consistent with most python "
"libraries, but is counter to gp_GTrsf(), which is 1-indexed."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.__repr__:1
msgid "Generate a valid python expression representing this Matrix"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Matrix.transposed_list:1
msgid "Needed by the cqparts gltf exporter"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BaseDirSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BinarySelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.InverseSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector:1
msgid "Bases: :py:class:`~cadquery.selectors.Selector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector:3
msgid ""
"If the object is a vertex or point, the distance is used. For other kinds of"
" shapes, the center of mass is used to to compute which is closest."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector:7
msgid "Applicability: All Types of Shapes"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector:13
msgid "returns the vertex of the unit cube closest to the point x=0,y=1,z=0"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BinarySelector.filter:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector.filter:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.InverseSelector.filter:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector.filter:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.Selector.filter:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector.filter:1
msgid "Filter the provided list."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BinarySelector.filter:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector.filter:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.InverseSelector.filter:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector.filter:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.Selector.filter:3
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector.filter:3
msgid "The default implementation returns the original list unfiltered."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BinarySelector.filter:5
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector.filter:5
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.InverseSelector.filter:5
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector.filter:5
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.Selector.filter:5
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector.filter:5
msgid "list to filter"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BinarySelector.filter:7
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector.filter:7
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.InverseSelector.filter:7
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.NearestToPointSelector.filter:7
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.Selector.filter:7
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector.filter:7
msgid "filtered list"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector:7
msgid ""
"Use the string syntax shortcut \\|(X|Y|Z) if you want to select based on a "
"cardinal direction."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.ParallelDirSelector:13
msgid ""
"selects faces with the normal parallel to the z direction, and is equivalent"
" to::"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector:7
msgid ""
"Use the string syntax shortcut #(X|Y|Z) if you want to select based on a "
"cardinal direction."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.PerpendicularDirSelector:14
msgid ""
"selects faces with the normal perpendicular to the z direction, and is "
"equivalent to::"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane:3
msgid ""
"A 2D coordinate system in space, with the x-y axes on the plane, and a "
"particular point as the origin."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane:6
msgid ""
"A plane allows the use of 2D coordinates, which are later converted to "
"global, 3d coordinates when the operations are complete."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane:9
msgid ""
"Frequently, it is not necessary to create work planes, as they can be "
"created automatically from faces."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__init__:1
msgid "Create a Plane with an arbitrary orientation"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__init__:3
msgid "the origin in global coordinates"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__init__:4
msgid "an optional vector representing the xDirection."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__init__:5
msgid "the normal direction for the plane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:0 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.fillet:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.findSolid:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.shell:0 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.split:0 ../../cadquery/doc/classreference.rst:0
msgid "Raises"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__init__:6
msgid "if the specified xDir is not orthogonal to the provided normal"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__ne__:1
msgid "Return self!=value."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.__repr__:1
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__repr__:1
msgid "Return repr(self)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:1
msgid "Create a predefined Plane based on the conventional names."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:3
msgid "one of (XY|YZ|ZX|XZ|YX|ZY|front|back|left|right|top|bottom)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:5
msgid "the desired origin, specified in global coordinates"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:8
msgid ""
"Available named planes are as follows. Direction references refer to the "
"global directions."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:12
msgid "Name"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:12
msgid "xDir"
msgstr "xDir"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:12
msgid "yDir"
msgstr "yDir"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:12
msgid "zDir"
msgstr "zDir"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:14
msgid "XY"
msgstr "XY"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:14
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:15
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:16
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:17
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:18
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:20
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:23
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:24
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:25
msgid "+x"
msgstr "+x"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:14
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:15
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:16
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:18
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:19
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:20
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:21
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:22
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:23
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:24
msgid "+y"
msgstr "+y"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:14
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:15
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:16
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:17
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:19
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:20
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:22
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:25
msgid "+z"
msgstr "+z"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:15
msgid "YZ"
msgstr "YZ"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:16
msgid "ZX"
msgstr "ZX"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:17
msgid "XZ"
msgstr "XZ"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:17
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:25
msgid "-y"
msgstr "-y"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:18
msgid "YX"
msgstr "YX"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:18
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:21
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:23
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:24
msgid "-z"
msgstr "-z"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:19
msgid "ZY"
msgstr "ZY"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:19
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:21
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:22
msgid "-x"
msgstr "-x"

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:20
msgid "front"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:21
msgid "back"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:22
msgid "left"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:23
msgid "right"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:24
msgid "top"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.named:25
msgid "bottom"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.rotated:1
msgid "Returns a copy of this plane, rotated about the specified axes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.rotated:3
msgid ""
"Since the z axis is always normal the plane, rotating around Z will always "
"produce a plane that is parallel to this one."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.rotated:6
msgid "The origin of the workplane is unaffected by the rotation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.rotated:8
msgid ""
"Rotations are done in order x, y, z. If you need a different order, manually"
" chain together multiple rotate() commands."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.rotated:11
msgid "Vector [xDegrees, yDegrees, zDegrees]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.rotated:12
msgid "a copy of this plane rotated as requested."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:1
msgid "Set a new origin in the plane itself"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:3
msgid ""
"Set a new origin in the plane itself. The plane's orientation and xDrection "
"are unaffected."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:6
msgid "offset in the x direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:7
msgid "offset in the y direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:8
msgid "void"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:10
msgid ""
"The new coordinates are specified in terms of the current 2D system. As an "
"example:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:13
msgid "p = Plane.XY() p.setOrigin2d(2, 2) p.setOrigin2d(2, 2)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.setOrigin2d:17
msgid ""
"results in a plane with its origin at (x, y) = (4, 4) in global coordinates."
" Both operations were relative to local coordinates of the plane."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toLocalCoords:1
msgid "Project the provided coordinates onto this plane"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toLocalCoords:3
msgid "an object or vector to convert"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toLocalCoords:5
msgid "an object of the same type, but converted to local coordinates"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toLocalCoords:8
msgid ""
"Most of the time, the z-coordinate returned will be zero, because most "
"operations based on a plane are all 2D. Occasionally, though, 3D points "
"outside of the current plane are transformed. One such example is "
":py:meth:`Workplane.box`, where 3D corners of a box are transformed to "
"orient the box in space correctly."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toWorldCoords:1
msgid "Convert a point in local coordinates to global coordinates"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toWorldCoords:3
msgid "point in local coordinates to convert."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Plane.toWorldCoords:5
msgid "a Vector in global coordinates"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.Selector:3
msgid "Filters must provide a single method that filters objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape:1
msgid "Represents a shape in the system. Wraps TopoDS_Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Area:1
msgid "The surface area of all faces in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.BoundingBox:1
msgid "Create a bounding box for this Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.BoundingBox:3
msgid "Tolerance value passed to :class:`BoundBox`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.BoundingBox:4
msgid "A :class:`BoundBox` object for this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.CenterOfBoundBox:1
msgid "Tolerance passed to the :py:meth:`BoundingBox` method"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.CenterOfBoundBox:2
msgid "Center of the bounding box of this shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Closed:1
msgid "The closedness flag"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.CombinedCenter:1
msgid "Calculates the center of mass of multiple objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.CombinedCenter:3
msgid "A list of objects with mass"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.CombinedCenterOfBoundBox:1
msgid "Calculates the center of a bounding box of multiple objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.CombinedCenterOfBoundBox:3
msgid "A list of objects"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.CompSolids:1
msgid "All the compsolids in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Compounds:1
msgid "All the compounds in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Edges:1
msgid "All the edges in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Faces:1
msgid "All the faces in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Shells:1
msgid "All the shells in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Solids:1
msgid "All the solids in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Vertices:1
msgid "All the vertices in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Volume:1
msgid "The volume of this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.Wires:1
msgid "All the wires in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__add__:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__add__:1
msgid "Fuse self and other."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__iter__:1
msgid "Iterate over subshapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__mul__:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__mul__:1
msgid "Intersect self and other."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__sub__:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__sub__:1
msgid "Subtract other from self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.__truediv__:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__truediv__:1
msgid "Split self with other."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.ancestors:1
msgid ""
"Iterate over ancestors, i.e. shapes of same kind within shape that contain "
"self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.cast:1
msgid "Returns the right type of wrapper, given a OCCT object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.centerOfMass:1
msgid "Calculates the center of 'mass' of an object."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.centerOfMass:3
msgid "Compute the center of mass of this object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.clean:1
msgid "Experimental clean using ShapeUpgrade"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.computeMass:1
msgid "Calculates the 'mass' of an object."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.computeMass:3
msgid "Compute the mass of this object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.computeMass:4
msgid "Numerical integration tolerance (optional)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.copy:1
msgid "Creates a new object that is a copy of this object."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.copy:4
msgid "should I copy the triangulation too (default: False)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.copy:5
msgid "a copy of the object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.distance:1
msgid "Minimal distance between two shapes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.distances:1
msgid "Minimal distances to between self and other shapes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.edges:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.edges:1
msgid "Select edges."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.export:1
msgid "Export Shape to file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportBin:1
msgid "Export this shape to a binary BREP file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportBrep:1
msgid "Export this shape to a BREP file"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStep:1
msgid "Export this shape to a STEP file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStep:3
msgid ""
"kwargs is used to provide optional keyword arguments to configure the "
"exporter."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStep:6
msgid ""
"Enable or disable writing parametric curves to the STEP file. Default True."
"  If False, writes STEP file without pcurves. This decreases the size of the"
" resulting STEP file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStep:6
msgid ""
"Enable or disable writing parametric curves to the STEP file. Default True."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStep:8
msgid ""
"If False, writes STEP file without pcurves. This decreases the size of the "
"resulting STEP file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:19
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportStepMeta:12
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStep:10
msgid ""
"Controls the uncertainty value for STEP entities. Specify -1, 0, or 1. "
"Default 0. See OCCT documentation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStl:1
msgid "Exports a shape to a specified STL file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStl:3
msgid "The path and file name to write the STL output to."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStl:4
msgid ""
"A linear deflection setting which limits the distance between a curve and "
"its tessellation. Setting this value too low will result in large meshes "
"that can consume computing resources. Setting the value too high can result "
"in meshes with a level of detail that is too low. Default is 1e-3, which is "
"a good starting point for a range of cases."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStl:8
msgid ""
"Angular deflection setting which limits the angle between subsequent "
"segments in a polyline. Default is 0.1."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStl:9
msgid ""
"Export the file as ASCII (True) or binary (False) STL format.  Default is "
"binary."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStl:10
msgid ""
"If True, tolerance will be scaled by the size of the edge being meshed. "
"Default is True. Setting this value to True may cause large features to "
"become faceted, or small features dense."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.exportStl:12
msgid ""
"If True, OCCT will use parallel processing to mesh the shape. Default is "
"True."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.faces:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.faces:1
msgid "Select faces."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.facesIntersectedByLine:1
msgid ""
"Computes the intersections between the provided line and the faces of this "
"Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.facesIntersectedByLine:3
msgid "Base point for defining a line"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.facesIntersectedByLine:4
msgid "Axis on which the line rests"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.facesIntersectedByLine:5
msgid "Intersection tolerance"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.facesIntersectedByLine:6
msgid ""
"Valid values: \"AlongAxis\", \"Opposite\"; If specified, will ignore all "
"faces that are not in the specified direction including the face where the "
"point lies if it is the case"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.facesIntersectedByLine:9
msgid "A list of intersected faces sorted by distance from point"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.fix:1
msgid "Try to fix shape if not valid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.fuse:1
msgid "Fuse the positional arguments with this Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.fuse:3
msgid ""
"Sets the glue option for the algorithm, which allows increasing performance "
"of the intersection of the input shapes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:1
msgid "Gets the underlying geometry type."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:3
msgid ""
"Implementations can return any values desired, but the values the user uses "
"in type filters should correspond to these."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:6
msgid "As an example, if a user does::"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:10
msgid "The expectation is that the geomType attribute will return 'mytype'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:12
msgid "The return values depend on the type of the shape:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:14
msgid "Vertex:  always 'Vertex'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:15
msgid "Edge:   LINE, CIRCLE, ELLIPSE, HYPERBOLA, PARABOLA, BEZIER,"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:16
msgid "BSPLINE, OFFSET, OTHER"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:17
msgid "Face:   PLANE, CYLINDER, CONE, SPHERE, TORUS, BEZIER, BSPLINE,"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:18
msgid "REVOLUTION, EXTRUSION, OFFSET, OTHER"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:19
msgid "Solid:  'Solid'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:20
msgid "Shell:  'Shell'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:21
msgid "Compound: 'Compound'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:22
msgid "Wire:   'Wire'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.geomType:24
msgid "A string according to the geometry type"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.hashCode:1
msgid ""
"Returns a hashed value denoting this shape. It is computed from the TShape "
"and the Location. The Orientation is not used."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.importBin:1
msgid "Import shape from a binary BREP file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.importBrep:1
msgid "Import shape from a BREP file"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isEqual:1
msgid ""
"Returns True if two shapes are equal, i.e. if they share the same TShape "
"with the same Locations and Orientations. Also see :py:meth:`isSame`."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isNull:1
msgid ""
"Returns true if this shape is null. In other words, it references no "
"underlying shape with the potential to be given a location and an "
"orientation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isSame:1
msgid ""
"Returns True if other and this shape are same, i.e. if they share the same "
"TShape with the same Locations. Orientations may differ. Also see "
":py:meth:`isEqual`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.isValid:1
msgid ""
"Returns True if no defect is detected on the shape S or any of its "
"subshapes. See the OCCT docs on BRepCheck_Analyzer::IsValid for a full "
"description of what is checked."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.locate:1
msgid "Apply a location in absolute sense to self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.located:1
msgid "Apply a location in absolute sense to a copy of self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.location:1
msgid "Return the current location"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.matrixOfInertia:1
msgid ""
"Calculates the matrix of inertia of an object. Since the part's density is "
"unknown, this result is inertia/density with units of [1/length]. :param "
"obj: Compute the matrix of inertia of this object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.mesh:1
msgid "Generate triangulation if none exists."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.mirror:1
msgid ""
"Applies a mirror transform to this Shape. Does not duplicate objects about "
"the plane."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.mirror:4
msgid "The direction of the plane to mirror about - one of 'XY', 'XZ' or 'YZ'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.mirror:6
msgid "The origin of the plane to mirror about"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.mirror:7
msgid "The mirrored shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.move:1
msgid ""
"Apply a location in relative sense (i.e. update current location) to self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.move:6
msgid ""
"Apply translation and rotation in relative sense (i.e. update current "
"location) to self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.move:11
msgid ""
"Apply a VectorLike in relative sense (i.e. update current location) to self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:1
msgid ""
"Apply a location in relative sense (i.e. update current location) to a copy "
"of self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:6
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:11
msgid "Apply multiple locations."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:16
msgid "Apply translation and rotation in relative sense to a copy of self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:21
msgid "Apply a VectorLike in relative sense to a copy of self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:26
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.moved:31
msgid "Apply multiple VectorLikes in relative sense to a copy of self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.remove:1
msgid "Remove subshapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.replace:1
msgid "Replace old subshape with new subshapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.rotate:1
msgid "Rotates a shape around an axis."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.rotate:4
msgid "start point of rotation axis"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.rotate:6
msgid "end point of rotation axis"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.rotate:8
msgid "angle to rotate, in degrees"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.rotate:9
msgid "a copy of the shape, rotated"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.scale:1
msgid "Scales this shape through a transformation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.shells:1
msgid "Select shells."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.siblings:1
msgid ""
"Iterate over siblings, i.e. shapes within shape that share subshapes of kind"
" with self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.solids:1
msgid "Select solids."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.split:1
msgid "Split this shape with the positional arguments."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toNURBS:1
msgid "Return a NURBS representation of a given shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toSplines:1
msgid "Approximate shape with b-splines of the specified degree."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toSplines:4
msgid "Maximum degree."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toSplines:6
msgid "Use rational splines."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.toVtkPolyData:1
msgid "Convert shape to vtkPolyData"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.transformGeometry:1
msgid "Transforms this shape by tMatrix."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.transformGeometry:3
msgid ""
"WARNING: transformGeometry will sometimes convert lines and circles to "
"splines, but it also has the ability to handle skew and stretching "
"transformations."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.transformGeometry:7
msgid ""
"If your transformation is only translation and rotation, it is safer to use "
":py:meth:`transformShape`, which doesn't change the underlying type of the "
"geometry, but cannot handle skew transformations."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.transformGeometry:11
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.transformShape:3
msgid "The transformation matrix"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.transformGeometry:12
msgid ""
"a copy of the object, but with geometry transformed instead of just rotated."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.transformShape:1
msgid ""
"Transforms this Shape by tMatrix. Also see :py:meth:`transformGeometry`."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.transformShape:4
msgid ""
"a copy of the object, transformed by the provided matrix, with all objects "
"keeping their type"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.translate:1
msgid "Translates this shape through a transformation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.vertices:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.vertices:1
msgid "Select vertices."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shape.wires:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.wires:1
msgid "Select wires."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Shell.makeShell:1
msgid "Makes a shell from faces."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch:1
msgid ""
"2D sketch. Supports faces, edges and edges with constraints based "
"construction."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__init__:1
msgid "Construct an empty sketch."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.__iter__:1
msgid ""
"Iterate over faces-locations combinations. If not faces are present iterate "
"over edges:"
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.add:1
msgid "Add selection to the underlying faces."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.apply:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.apply:1
msgid "Apply a callable to all items at once."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.apply:4
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.apply:4
msgid "Callable to be applied."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.apply:5 ../../cadquery/cadquery/sketch.pydocstring
#: of cadquery.sketch.Sketch.map:5
msgid "Sketch object with f applied to all items."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.arc:1
msgid "Construct an arc."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.assemble:1
msgid "Assemble edges into faces."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.bezier:1
msgid "Construct an bezier curve."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.bezier:3
msgid ""
"The edge will pass through the last points, and the inner points are bezier "
"control points."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.chamfer:1
msgid "Add a chamfer based on current selection."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.circle:1
msgid "Construct a circular face."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.clean:1
msgid "Remove internal wires."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.close:1
msgid "Connect last edge to the first one."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.constrain:1
msgid "Add a constraint."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.copy:1
msgid "Create a partial copy of the sketch."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.delete:1
msgid "Delete selected object."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.distribute:1
msgid "Distribute locations along selected edges or wires."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.each:1
msgid "Apply a callback on all applicable entities."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.edge:1
msgid "Add an edge to the sketch."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.ellipse:1
msgid "Construct an elliptical face."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.export:1
msgid "Export Sketch to file."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.export:4
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.export:4
msgid "Filename."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.export:5
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.export:5
msgid "the deflection tolerance, in model units. Default 0.1."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.export:6
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.export:6
msgid "the angular tolerance, in radians. Default 0.1."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.export:7
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.export:7
msgid "additional options passed to the specific exporter. Default None."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.export:8
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.export:8
msgid "Self."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.face:1
msgid "Construct a face from a wire or edges."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.fillet:1
msgid "Add a fillet based on current selection."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.filter:1
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.filter:1
msgid "Filter items using a boolean predicate."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.filter:4
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.filter:4
msgid "Callable to be used for filtering."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.filter:5
msgid "Sketch object with filtered items."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.finalize:1
msgid "Finish sketch construction and return the parent."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.hull:1
msgid "Generate a convex hull from current selection or all objects."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.importDXF:1
msgid "Import a DXF file and construct face(s)"
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.invoke:1
msgid ""
"Invoke a callable mapping Sketch to Sketch or None. Supports also callables "
"that take no arguments such as breakpoint. Returns self if callable returns "
"None."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.invoke:6
#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.invoke:6
msgid "Callable to be invoked."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.invoke:7
msgid "Sketch object."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.located:1
msgid "Create a partial copy of the sketch with a new location."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.map:1
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.map:1
msgid "Apply a callable to every item separately."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.map:4
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.map:4
msgid "Callable to be applied to every item separately."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.moved:1
msgid "Create a partial copy of the sketch with moved _faces."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.offset:1
msgid "Offset selected wires or edges."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.parray:1
msgid "Generate a polar array of locations."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.polygon:1
msgid "Construct a polygonal face."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.push:1
msgid "Set current selection to given locations or points."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.rarray:1
msgid "Generate a rectangular array of locations."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.rect:1
msgid "Construct a rectangular face."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.regularPolygon:1
msgid "Construct a regular polygonal face."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.replace:1
msgid "Replace the underlying faces with the selection."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.reset:1
msgid "Reset current selection."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.segment:1
msgid "Construct a segment."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.select:1
msgid "Select based on tags."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.slot:1
msgid "Construct a slot-shaped face."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.solve:1
msgid "Solve current constraints and update edge positions."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sort:1
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.sort:1
msgid "Sort items using a callable."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sort:4
#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.sort:4
msgid "Callable to be used for sorting."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.sort:5
msgid "Sketch object with items sorted."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.spline:1
msgid "Construct a spline edge."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.subtract:1
msgid "Subtract selection from the underlying faces."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.tag:1
msgid "Tag current selection."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of
#: cadquery.sketch.Sketch.trapezoid:1
msgid "Construct a trapezoidal face."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.val:1
msgid "Return the first selected item, underlying compound or first edge."
msgstr ""

#: ../../cadquery/cadquery/sketch.pydocstring of cadquery.sketch.Sketch.vals:1
msgid "Return all selected items, underlying compound or all edges."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.addCavity:1
msgid "Add one or more cavities."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:1
msgid ""
"Attempt to extrude the list of wires into a prismatic solid in the provided "
"direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:13
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:3
msgid "the outermost wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:14
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:4
msgid "a list of inner wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:17
msgid "a vector along which to extrude the wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:6
msgid "taper angle, default=0"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.dprism:9
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:7
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:19
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:9
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:12
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep_multi:6
msgid "a Solid object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:9
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:11
msgid "The wires must not intersect"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:11
msgid ""
"Extruding wires is very non-trivial.  Nested wires imply very different "
"geometry, and there are many geometries that are invalid. In general, the "
"following conditions must be met:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:14
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:13
msgid "all wires must be closed"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:15
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:14
msgid "there cannot be any intersecting or self-intersecting wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:16
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:15
msgid "wires must be listed from outside in"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:17
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:16
msgid "more than one levels of nesting is not supported reliably"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinear:19
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:19
msgid ""
"This method will attempt to sort the wires, but there is much work remaining"
" to make this method reliable."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:1
msgid ""
"Creates a 'twisted prism' by extruding, while simultaneously rotating around"
" the extrusion vector."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:3
msgid ""
"Though the signature may appear to be similar enough to extrudeLinear to "
"merit combining them, the construction methods used here are different "
"enough that they should be separate."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:6
msgid "At a high level, the steps followed are:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:8
msgid "accept a set of wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:9
msgid ""
"create another set of wires like this one, but which are transformed and "
"rotated"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:10
msgid "create a ruledSurface between the sets of wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:11
msgid "create a shell and compute the resulting object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:15
msgid ""
"the center point about which to rotate.  the axis of rotation is defined by "
"vecNormal, located at vecCenter."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.extrudeLinearWithRotation:18
msgid "the angle to rotate through while extruding"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.innerShells:1
msgid "Returns inner shells."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:1
msgid ""
"Returns a plate surface that is 'thickness' thick, enclosed by "
"'surf_edge_pts' points, and going through 'surf_pts' points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:3
msgid ""
"list of [x,y,z] float ordered coordinates or list of ordered or unordered "
"wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:6
msgid "list of [x,y,z] float coordinates (uses only edges if [])"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.interpPlate:7
msgid ""
"thickness may be negative or positive depending on direction, (returns 2D "
"surface if 0)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.isSolid:1
msgid "Returns true if the object is a solid, false otherwise"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeBox:1
msgid "By default pnt=Vector(0,0,0) and dir=Vector(0,0,1)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeCone:1
msgid ""
"Make a cone with given radii and height By default pnt=Vector(0,0,0), "
"dir=Vector(0,0,1) and angle=360"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeCylinder:1
msgid ""
"makeCylinder(radius,height,[pnt,dir,angle]) -- Make a cylinder with a given "
"radius and height By default pnt=Vector(0,0,0),dir=Vector(0,0,1) and "
"angle=360"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeLoft:1
msgid ""
"makes a loft from a list of wires The wires will be converted into faces "
"when possible-- it is presumed that nobody ever actually wants to make an "
"infinitely thin shell for a real FreeCADPart."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeSolid:1
msgid "Makes a solid from a single shell."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeSphere:1
msgid ""
"Make a sphere with a given radius By default pnt=Vector(0,0,0), "
"dir=Vector(0,0,1), angle1=0, angle2=90 and angle3=360"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeTorus:1
msgid ""
"makeTorus(radius1,radius2,[pnt,dir,angle1,angle2,angle]) -- Make a torus "
"with a given radii and angles By default "
"pnt=Vector(0,0,0),dir=Vector(0,0,1),angle1=0 ,angle1=360 and angle=360"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.makeWedge:1
msgid ""
"Make a wedge located in pnt By default pnt=Vector(0,0,0) and "
"dir=Vector(0,0,1)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.outerShell:1
msgid "Returns outer shell."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:1
msgid ""
"Attempt to revolve the list of wires into a solid in the provided direction"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:5
msgid "the angle to revolve through."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:6
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:7
msgid "the start point of the axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:7
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:8
msgid "the end point of the axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.revolve:17
msgid "the wire(s) that you're revolving cannot be centered"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:1
msgid ""
"Attempt to sweep the list of wires into a prismatic solid along the provided"
" path"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep_multi:4
msgid "The wire to sweep the face resulting from the wires over"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:6
msgid "return Solid or Shell (default True)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:7
msgid "Frenet mode (default False)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:8
msgid "additional sweep mode parameters"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sweep:11
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep:9
msgid ""
"handling of profile orientation at C1 path discontinuities. Possible values "
"are {'transformed','round', 'right'} (default: 'right')."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep_multi:1
msgid "Multi section sweep. Only single outer profile per section is allowed."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.dprism:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep_multi:3
msgid "list of profiles"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Solid.sweep_multi:5
msgid "additional sweep mode parameters."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:1
msgid ""
"Filter lists objects using a simple string syntax. All of the filters "
"available in the string syntax are also available ( usually with more "
"functionality ) through the creation of full-fledged selector objects. see "
":py:class:`Selector` and its subclasses"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:5
msgid ""
"Filtering works differently depending on the type of object list being "
"filtered."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:7
msgid "A two-part selector string, [selector][axis]"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:9
msgid "objects that match the specified selector"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:11
msgid "***Modifiers*** are ``('|','+','-','<','>','%')``"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "\\|"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:14
msgid ""
"parallel to ( same as :py:class:`ParallelDirSelector` ). Can return multiple"
" objects."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "#"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:16
msgid "perpendicular to (same as :py:class:`PerpendicularDirSelector` )"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "+"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:18
msgid "positive direction (same as :py:class:`DirectionSelector` )"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "-"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:20
msgid "negative direction (same as :py:class:`DirectionSelector`  )"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid ">"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:22
msgid ""
"maximize (same as :py:class:`DirectionMinMaxSelector` with "
"directionMax=True)"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "<"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:24
msgid ""
"minimize (same as :py:class:`DirectionMinMaxSelector` with "
"directionMax=False )"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "%"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:26
msgid "curve/surface type (same as :py:class:`TypeSelector`)"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:28
msgid ""
"***axisStrings*** are: ``X,Y,Z,XY,YZ,XZ`` or ``(x,y,z)`` which defines an "
"arbitrary direction"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:30
msgid ""
"It is possible to combine simple selectors together using logical "
"operations. The following operations are supported"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "and"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:34
msgid "Logical AND, e.g. >X and >Y"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "or"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:36
msgid "Logical OR, e.g. \\|X or \\|Y"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "not"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:38
msgid "Logical NOT, e.g. not #XY"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:0
msgid "exc(ept)"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:40
msgid "Set difference (equivalent to AND NOT): \\|X exc >Z"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:42
msgid ""
"Finally, it is also possible to use even more complex expressions with "
"nesting and arbitrary number of terms, e.g."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:45
msgid "(not >X[0] and #XY) or >XY[0]"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector:47
msgid ""
"Selectors are a complex topic: see :ref:`selector_reference` for more "
"information"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector.__init__:1
msgid ""
"Feed the input string through the parser and construct an relevant complex "
"selector object"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.StringSyntaxSelector.filter:1
msgid ""
"Filter give object list through th already constructed complex selector "
"object"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector:4
msgid ""
"Faces: PLANE, CYLINDER, CONE, SPHERE, TORUS, BEZIER, BSPLINE, REVOLUTION, "
"EXTRUSION, OFFSET, OTHER Edges: LINE, CIRCLE, ELLIPSE, HYPERBOLA, PARABOLA, "
"BEZIER, BSPLINE, OFFSET, OTHER"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector:7
msgid "You can use the string selector syntax. For example this::"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.TypeSelector:11
msgid "will select 6 faces, and is equivalent to::"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:3
msgid "a 3D vector, with x-y-z parts."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:5
msgid "you can either provide:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:6
msgid "nothing (in which case the null vector is return)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:7
msgid "a gp_Vec"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:8
msgid "a vector ( in which case it is copied )"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:9
msgid "a 3-tuple"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:10
msgid "a 2-tuple (z assumed to be 0)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:11
msgid "three float values: x, y, and z"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector:12
msgid "two float values: x,y"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.Center:1
msgid "Return the vector itself"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.Center:3
msgid ""
"The center of myself is myself. Provided so that vectors, vertices, and "
"other shapes all support a common interface, when Center() is requested for "
"all objects on the stack."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.__str__:1
msgid "Return str(self)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.multiply:1
msgid "Return a copy multiplied by the provided scalar"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.normalized:1
msgid "Return a normalized version of this vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToLine:1
msgid ""
"Returns a new vector equal to the projection of this Vector onto the line "
"represented by Vector <line>"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToLine:4
msgid "Vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToLine:6
#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToPlane:5
msgid "Returns the projected vector."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToPlane:1
msgid "Vector is projected onto the plane provided as input."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.pydocstring of
#: cadquery.occ_impl.geom.Vector.projectToPlane:3
msgid "Plane object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Vertex.Center:1
msgid "The center of a vertex is itself!"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Vertex.__init__:1
msgid "Create a vertex"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.Vertices:1
msgid "Ordered list of vertices of the wire."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.__iter__:1
msgid "Iterate over edges in an ordered way."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.assembleEdges:1
msgid ""
"Attempts to build a wire that consists of the edges in the provided list"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.assembleEdges:4
msgid "a list of Edge objects. The edges are not to be consecutive."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.assembleEdges:5
msgid "a wire with the edges assembled"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.assembleEdges:7
msgid "BRepBuilderAPI_MakeWire::Error() values:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.assembleEdges:9
msgid "BRepBuilderAPI_WireDone = 0"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.assembleEdges:10
msgid "BRepBuilderAPI_EmptyWire = 1"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.assembleEdges:11
msgid "BRepBuilderAPI_DisconnectedWire = 2"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.assembleEdges:12
msgid "BRepBuilderAPI_NonManifoldWire = 3"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.chamfer2D:1
msgid "Apply 2D chamfer to a wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.close:1
msgid "Close a Wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.combine:1
msgid "Attempt to combine a list of wires and edges into a new wire."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.combine:5
msgid "default 1e-9"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.combine:6
msgid "List[Wire]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.fillet:1
msgid "Apply 2D or 3D fillet to a wire"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.fillet:7
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.fillet:3
msgid "the radius of the fillet, must be > zero"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.fillet:4
msgid ""
"the vertices to delete (where the fillet will be applied).  By default all "
"vertices are deleted except ends of open wires."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.fillet:6
msgid "A wire with filleted corners"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.fillet2D:1
msgid "Apply 2D fillet to a wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeCircle:1
msgid ""
"Makes a Circle centered at the provided point, having normal in the provided"
" direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeCircle:3
msgid "floating point radius of the circle, must be > 0"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeCircle:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeEllipse:5
msgid "vector representing the center of the circle"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeCircle:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeEllipse:6
msgid ""
"vector representing the direction of the plane the circle should lie in"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeEllipse:1
msgid ""
"Makes an Ellipse centered at the provided point, having normal in the "
"provided direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeEllipse:3
msgid "floating point major radius of the ellipse (x-axis), must be > 0"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeEllipse:4
msgid "floating point minor radius of the ellipse (y-axis), must be > 0"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeEllipse:8
msgid "end angle of arc"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:9
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeEllipse:9
msgid "angle to rotate the created ellipse / arc"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makeHelix:1
msgid ""
"Make a helix with a given pitch, height and radius By default a cylindrical "
"surface is used to create the helix. If the fourth parameter is set (the "
"apex given in degree) a conical surface is used instead'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.makePolygon:1
msgid "Construct a polygonal wire from points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.offset2D:1
msgid "Offsets a planar wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Wire.stitch:1
msgid "Attempt to stitch wires"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:3
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:3
msgid "the plane in which the workplane will be done"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:5
msgid "the desired origin of the new workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:7
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:7
msgid "an object to use initially for the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.combine:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.end:0
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.union:0
msgid "raises"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:10
msgid ""
"ValueError if the provided plane is not a plane, a valid named workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:11
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:11
msgid ""
"A Workplane object, with coordinate system matching the supplied plane."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:13
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:13
msgid "The most common use is::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:17
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:17
msgid ""
"After creation, the stack contains a single point, the origin of the "
"underlying plane, and the *current point* is on the origin."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane:21
msgid ""
"You can also create workplanes on the surface of existing faces using "
":meth:`workplane`"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__add__:1
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__or__:1
msgid "Syntactic sugar for union."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__add__:3
msgid ""
"Notice that :code:`r = a + b` is equivalent to :code:`r = a.union(b)` and "
":code:`r = a | b`."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__and__:1
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__mul__:1
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.__truediv__:1
msgid "Syntactic sugar for intersect."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__and__:3
msgid ""
"Notice that :code:`r = a & b` is equivalent to :code:`r = a.intersect(b)`."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:1
msgid "make a workplane from a particular plane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__init__:10
msgid "ValueError if the provided plane is not a plane, or one of XY|YZ|XZ"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__iter__:1
msgid "Special method for iterating over Shapes in objects"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__mul__:3
msgid ""
"Notice that :code:`r = a * b` is equivalent to :code:`r = a.intersect(b)`."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__or__:3
msgid ""
"Notice that :code:`r = a | b` is equivalent to :code:`r = a.union(b)` and "
":code:`r = a + b`."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__sub__:1
msgid "Syntactic sugar for cut."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.__sub__:3
msgid "Notice that :code:`r = a - b` is equivalent to :code:`r = a.cut(b)`."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.__truediv__:3
msgid "Notice that :code:`r = a / b` is equivalent to :code:`r = a.split(b)`."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.add:1
msgid "Adds an object or a list of objects to the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.add:3
msgid "an object to add"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.add:5
msgid "a Workplane with the requested operation performed"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.add:7
msgid ""
"If a Workplane object, the values of that object's stack are added. If a "
"list of cad primitives, they are all added. If a single CAD primitive then "
"it is added."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.add:11
msgid ""
"Used in rare cases when you need to combine the results of several CQ "
"results into a single Workplane object."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.all:1
msgid "Return a list of all CQ objects on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.all:3
msgid "useful when you need to operate on the elements individually."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.all:6
msgid ""
"Contrast with vals, which returns the underlying objects for all of the "
"items on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ancestors:1
msgid "Select topological ancestors."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ancestors:4
msgid "kind of ancestor, e.g. \"Face\" or \"Edge\""
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ancestors:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.compounds:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.siblings:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:8
msgid "if set, search the tagged object instead of self"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ancestors:6
msgid "a Workplane object whose stack contains selected ancestors."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.apply:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.map:5
msgid "Workplane object with f applied to all items."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.bezier:1
msgid "Make a cubic Bézier curve by the provided points (2D or 3D)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.bezier:4
msgid ""
"Bezier control points and end point. All points except the last point are "
"Bezier control points, and the last point is the end point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.bezier:7
msgid "Use the current point as a starting point of the curve"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.bezier:8
msgid "convert the resulting bezier edge to a wire"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.bezier:9
msgid "a Workplane object with the current point at the end of the bezier"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.bezier:11
msgid ""
"The Bézier Will begin at either current point or the first point of "
"listOfXYTuple, and end with the last point of listOfXYTuple"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:1
msgid ""
"Return a 3d box with specified dimensions for each object on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:4
msgid "box size in X direction"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:5
msgid "box size in Y direction"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:6
msgid "box size in Z direction"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:7
msgid ""
"If True, the box will be centered around the reference point. If False, the "
"corner of the box will be on the reference point and it will extend in the "
"positive x, y and z directions. Can also use a 3-tuple to specify centering "
"along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:11
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:9
msgid ""
"should the results be combined with other solids on the stack (and each "
"other)?"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:13
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cboreHole:10 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.combine:6 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.cskHole:11 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.cut:5 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutBlind:14 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutEach:7 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:8 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.cylinder:17 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.each:12 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.eachpoint:9 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.extrude:12 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.hole:7 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:10 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.intersect:5 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.loft:8 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.revolve:11 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.sphere:20 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.sweep:10 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.text:12 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:18
msgid "call :meth:`clean` afterwards to have a clean shape"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:15
msgid ""
"One box is created for each item on the current stack. If no items are on "
"the stack, one box using the current workplane center is created."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:18
msgid ""
"If combine is true, the result will be a single object on the stack. If a "
"solid was found in the chain, the result is that solid with all boxes "
"produced fused onto it otherwise, the result is the combination of all the "
"produced boxes."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:22
msgid "If combine is false, the result will be a list of the boxes produced."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:24
msgid "Most often boxes form the basis for a part::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.box:29
msgid "But sometimes it is useful to create an array of them::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cboreHole:1
msgid "Makes a counterbored hole for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cboreHole:4
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:4
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hole:4
msgid "the diameter of the hole"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cboreHole:5
msgid "the diameter of the cbore, must be greater than hole diameter"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cboreHole:6
msgid "depth of the counterbore"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cboreHole:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:9
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hole:5
msgid "the depth of the hole"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cboreHole:12
msgid "The surface of the hole is at the current workplane plane."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cboreHole:14 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.cskHole:15 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.hole:11
msgid ""
"One hole is created for each item on the stack.  A very common use case is "
"to use a construction rectangle to define the centers of a set of holes, "
"like so::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cboreHole:27 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.cskHole:28 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.hole:24
msgid "This sample creates a plate with a set of holes at the corners."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cboreHole:29
msgid ""
"**Plugin Note**: this is one example of the power of plugins. Counterbored "
"holes are quite time consuming to create, but are quite easily defined by "
"users."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cboreHole:32
msgid "see :meth:`cskHole` to make countersinks instead of counterbores"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.center:1
msgid "Shift local coordinates to the specified location."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.center:3
msgid "The location is specified in terms of local coordinates."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.center:6
msgid "the new x location"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.center:7
msgid "the new y location"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.center:8
msgid "the Workplane object, with the center adjusted."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.center:10
msgid ""
"The current point is set to the new center. This method is useful to adjust "
"the center point after it has been created automatically on a face, but not "
"where you'd like it to be."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.center:14
msgid ""
"In this example, we adjust the workplane center to be at the corner of a "
"cube, instead of the center of a face, which is the default::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.center:24
msgid "The result is a cube with a round boss on the corner"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:1
msgid "Chamfers a solid on the selected edges."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:3
msgid ""
"The edges on the stack are chamfered. The solid to which the edges belong "
"must be in the parent chain of the selected edges."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:7
msgid ""
"Optional parameter `length2` can be supplied with a different value than "
"`length` for a chamfer that is shorter on one side longer on the other side."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:12
msgid "the length of the chamfer, must be greater than zero"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:13
msgid "optional parameter for asymmetrical chamfer"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:14
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.fillet:8
msgid "if at least one edge is not selected"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:15
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.fillet:9
msgid "if the solid containing the edge is not in the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:16
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.fillet:10
msgid "CQ object with the resulting solid selected."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:18
msgid "This example will create a unit cube, with the top edges chamfered::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.chamfer:22
msgid "This example will create chamfers longer on the sides::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:1
msgid "Make a circle for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:4
msgid "radius of the circle"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ellipse:7
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:10
msgid "should the new wires be reference geometry only?"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ellipse:10
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:13
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:7
msgid "a new CQ object with the created wires on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:10
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:15
msgid ""
"A common use case is to use a for-construction rectangle to define the "
"centers of a hole pattern::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:15
msgid ""
"Creates 4 circles at the corners of a square centered on the origin. Another"
" common case is to use successive circle() calls to create concentric "
"circles.  This works because the center of a circle is its reference point::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:21
msgid "Creates two concentric circles, which when extruded will form a ring."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:23
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:25
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:15
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.threePointArc:10
msgid "Future Enhancements:"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.circle:24
msgid ""
"better way to handle forConstruction project points not in the workplane "
"plane onto the workplane plane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.clean:1
msgid "Cleans the current solid by removing unwanted edges from the faces."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.clean:4
msgid ""
"Normally you don't have to call this function. It is automatically called "
"after each related operation. You can disable this behavior with "
"`clean=False` parameter if method has any. In some cases this can improve "
"performance drastically but is generally dis-advised since it may break some"
" operations such as fillet."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.clean:11
msgid ""
"Note that in some cases where lots of solid operations are chained, "
"`clean()` may actually improve performance since the shape is 'simplified' "
"at each step and thus next operation is easier."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.clean:16
msgid ""
"Also note that, due to limitation of the underlying engine, `clean` may fail"
" to produce a clean output in some cases such as spherical faces."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.close:1
msgid "End construction, and attempt to build a closed wire."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.close:3
msgid "a CQ object with a completed wire on the stack, if possible."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.close:5
msgid ""
"After 2D (or 3D) drafting with methods such as lineTo, threePointArc, "
"tangentArcPoint and polyline, it is necessary to convert the edges produced "
"by these into one or more wires."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.close:9
msgid ""
"When a set of edges is closed, CadQuery assumes it is safe to build the "
"group of edges into a wire. This example builds a simple triangular prism::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.combine:1
msgid "Attempts to combine all of the items on the stack into a single item."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.combine:3
msgid "WARNING: all of the items must be of the same type!"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.combine:7
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.union:7
msgid "use a faster gluing mode for non-overlapping shapes (default False)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.combine:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cut:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.intersect:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.union:8
msgid "tolerance value for fuzzy bool operation mode (default None)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.combine:9
msgid ""
"ValueError if there are no items on the stack, or if they cannot be combined"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.combine:10
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:18
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:11
msgid "a CQ object with the resulting object selected"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.combineSolids:1
msgid ""
"!!!DEPRECATED!!! use union() Combines all solids on the current stack, and "
"any context object, together into a single object."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.combineSolids:5
msgid "After the operation, the returned solid is also the context solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.combineSolids:7
msgid "another CadQuery to combine."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.combineSolids:8
msgid "a CQ object with the resulting combined solid on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.combineSolids:10
msgid ""
"Most of the time, both objects will contain a single solid, which is "
"combined and returned on the stack of the new object."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.compounds:1
msgid ""
"Select compounds on the stack, optionally filtering the selection. If there "
"are multiple objects on the stack, they are collected and a list of all the "
"distinct compounds is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.compounds:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:6
msgid ""
"optional Selector object, or string selector expression (see "
":class:`StringSyntaxSelector`)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.compounds:9
msgid ""
"a CQ object whose stack contains all of the *distinct* compounds of *all* "
"objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.compounds:12
msgid ""
"A compound contains multiple CAD primitives that resulted from a single "
"operation, such as a union, cut, split, or fillet.  Compounds can contain "
"multiple edges, wires, or solids."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.consolidateWires:1
msgid ""
"Attempt to consolidate wires on the stack into a single. If possible, a new "
"object with the results are returned. if not possible, the wires remain "
"separated"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.copyWorkplane:1
msgid "Copies the workplane from obj."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.copyWorkplane:3
msgid "an object to copy the workplane from"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.copyWorkplane:5
msgid "a CQ object with obj's workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:1
msgid "Makes a countersunk hole for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:6
msgid "the diameter of the countersink, must be greater than hole diameter"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:7
msgid "angle of the countersink, in degrees ( 82 is common )"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:13
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hole:9
msgid "The surface of the hole is at the current workplane."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:30
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hole:26
msgid ""
"**Plugin Note**: this is one example of the power of plugins. CounterSunk "
"holes are quite time consuming to create, but are quite easily defined by "
"users."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cskHole:33
msgid "see :meth:`cboreHole` to make counterbores instead of countersinks"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cut:1
msgid ""
"Cuts the provided solid from the current solid, IE, perform a solid "
"subtraction."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cut:4
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.intersect:4
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.union:5
msgid "a solid object, or a Workplane object having a solid"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cut:7
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:17
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:9
msgid "if there is no solid to subtract from in the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cut:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.intersect:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.union:10
msgid "a Workplane object with the resulting object selected"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:1
msgid ""
"Use all un-extruded wires in the parent chain to create a prismatic cut from"
" existing solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:3
msgid ""
"Specify either a distance value, or one of \"next\", \"last\" to indicate a "
"face to cut to."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:5
msgid ""
"Similar to extrude, except that a solid in the parent chain is required to "
"remove material from. cutBlind always removes material from a part."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:9
msgid ""
"The distance to cut to, normal to the workplane plane. When a negative float"
" is passed the cut extends this far in the opposite direction to the normal "
"of the plane (i.e in the solid). The string \"next\" cuts until the next "
"face orthogonal to the wire normal.  \"last\" cuts to the last face. If an "
"object of type Face is passed, then the cut will extend until this face."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:15
msgid "cut in both directions symmetrically"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:16
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:14
msgid "angle for optional tapered extrusion"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutBlind:20
msgid "see :meth:`cutThruAll` to cut material from the entire part"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutEach:1
msgid ""
"Evaluates the provided function at each point on the stack (ie, eachpoint) "
"and then cuts the result from the context solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutEach:5
msgid ""
"a function suitable for use in the eachpoint method: ie, that accepts a "
"vector"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutEach:6
msgid "same as for :meth:`eachpoint`"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutEach:8
msgid "if no solids or compounds are found in the stack or parent chain"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cutEach:9
msgid "a CQ object that contains the resulting solid"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:1
msgid ""
"Use all un-extruded wires in the parent chain to create a prismatic cut from"
" existing solid. Cuts through all material in both normal directions of "
"workplane."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:4
msgid ""
"Similar to extrude, except that a solid in the parent chain is required to "
"remove material from. cutThruAll always removes material from a part."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:10
msgid "if there are no pending wires to cut with"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.cutThruAll:13
msgid "see :meth:`cutBlind` to cut material to a limited depth"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:1
msgid ""
"Returns a cylinder with the specified radius and height for each point on "
"the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:4
msgid "The height of the cylinder"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:5
msgid "The radius of the cylinder"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:6
msgid "The direction axis for the creation of the cylinder"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:8
msgid "The angle to sweep the cylinder arc through"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:10
msgid ""
"If True, the cylinder will be centered around the reference point. If False,"
" the corner of a bounding box around the cylinder will be on the reference "
"point and it will extend in the positive x, y and z directions. Can also use"
" a 3-tuple to specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:14
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:17
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:17
msgid ""
"Whether the results should be combined with other solids on the stack (and "
"each other)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:18
msgid "A cylinder object for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:20
msgid ""
"One cylinder is created for each item on the current stack. If no items are "
"on the stack, one cylinder is created using the current workplane center."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:23
msgid ""
"If combine is true, the result will be a single object on the stack. If a "
"solid was found in the chain, the result is that solid with all cylinders "
"produced fused onto it otherwise, the result is the combination of all the "
"produced cylinders."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.cylinder:27
msgid ""
"If combine is false, the result will be a list of the cylinders produced."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:1
msgid ""
"Runs the provided function on each value in the stack, and collects the "
"return values into a new CQ object."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:4
msgid ""
"Special note: a newly created workplane always has its center point as its "
"only stack item"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:7
msgid "the function to call for each item on the current stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:8
msgid "should  values be converted from local coordinates first?"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:9
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.eachpoint:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:9
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.loft:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sweep:7
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:9
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:15
msgid ""
"True or \"a\" to combine the resulting solid with parent solids if found, "
"\"cut\" or \"s\" to remove the resulting solid from the parent solids if "
"found. False to keep the resulting solid separated from the parent solids."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:15
msgid ""
"The callback function must accept one argument, which is the item on the "
"stack, and return one object, which is collected. If the function returns "
"None, nothing is added to the stack. The object passed into the "
"callBackFunction is potentially transformed to local coordinates, if "
"useLocalCoordinates is true"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:20
msgid "useLocalCoordinates is very useful for plugin developers."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:22
msgid ""
"If false, the callback function is assumed to be working in global "
"coordinates.  Objects created are added as-is, and objects passed into the "
"function are sent in using global coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:26
msgid ""
"If true, the calling function is assumed to be  working in local "
"coordinates.  Objects are transformed to local coordinates before they are "
"passed into the callback method, and result objects are transformed to "
"global coordinates after they are returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:30
msgid ""
"This allows plugin developers to create objects in local coordinates, "
"without worrying about the fact that the working plane is different than the"
" global coordinate system."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.each:34
msgid ""
"TODO: wrapper object for Wire will clean up forConstruction flag everywhere"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.eachpoint:1
msgid ""
"Same as each(), except arg is translated by the positions on the stack. If "
"arg is a callback function, then the function is called for each point on "
"the stack, and the resulting shape is used. :return: CadQuery object which "
"contains a list of  vectors (points ) on its stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.eachpoint:5
msgid "should points be in local or global coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.eachpoint:12
msgid ""
"The resulting object has a point on the stack for each object on the "
"original stack. Vertices and points remain a point.  Faces, Wires, Solids, "
"Edges, and Shells are converted to a point by using their center of mass."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.eachpoint:16
msgid ""
"If the stack has zero length, a single point is returned, which is the "
"center of the current workplane/coordinate system"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:1
msgid ""
"Select the edges of objects on the stack, optionally filtering the "
"selection. If there are multiple objects on the stack, the edges of all "
"objects are collected and a list of all the distinct edges is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:9
msgid ""
"a CQ object whose stack contains all of the *distinct* edges of *all* "
"objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:12
msgid ""
"If there are no edges for any objects on the current stack, an empty CQ "
"object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:14
msgid ""
"The typical use is to select the edges of a single object on the stack. For "
"example::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:18
msgid ""
"returns 4, because the topmost face of a cube will contain four edges. "
"Similarly::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:22
msgid "returns 12, because a cube has a total of 12 edges, And::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.edges:26
msgid "returns 4, because a cube has 4 edges parallel to the z direction"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ellipse:1
msgid "Make an ellipse for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ellipse:4
msgid "x radius of the ellipse (x-axis of plane the ellipse should lie in)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ellipse:5
msgid "y radius of the ellipse (y-axis of plane the ellipse should lie in)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ellipse:6
msgid "angle to rotate the ellipse"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.ellipse:12
msgid ""
"*NOTE* Due to a bug in opencascade "
"(https://tracker.dev.opencascade.org/view.php?id=31290) the center of mass "
"(equals center for next shape) is shifted. To create concentric ellipses "
"use::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:1
msgid ""
"Draw an elliptical arc with x and y radiuses either with start point at "
"current point or or current point being the center of the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:11
msgid ""
"True: start point of arc is moved to current point; False: center of arc is "
"on current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.ellipseArc:13
msgid "convert the resulting arc edge to a wire"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.end:1
msgid "Return the nth parent of this CQ element"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.end:3
msgid "number of ancestor to return (default: 1)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.end:5
msgid "ValueError if there are no more parents in the chain."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.end:7
msgid "For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.end:11
msgid "will return the same as::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.export:1
msgid "Export Workplane to file."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.exportSvg:1
msgid "Exports the first item on the stack as an SVG file"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.exportSvg:3
msgid "For testing purposes mainly."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.exportSvg:5
msgid "the filename to export, absolute path to the file"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:1
msgid ""
"Use all un-extruded wires in the parent chain to create a prismatic solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:4
msgid ""
"The distance to extrude, normal to the workplane plane. When a float is "
"passed, the extrusion extends this far and a negative value is in the "
"opposite direction to the normal of the plane. The string \"next\" extrudes "
"until the next face orthogonal to the wire normal. \"last\" extrudes to the "
"last face. If a object of type Face is passed then the extrusion will extend"
" until this face. **Note that the Workplane must contain a Solid for "
"extruding to a given face.**"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:13
msgid "extrude in both directions symmetrically"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:15
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:12
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sweep:14
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:19
msgid "a CQ object with the resulting solid selected."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:17
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:14
msgid ""
"The returned object is always a CQ object, and depends on whether combine is"
" True, and whether a context solid is already defined:"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:20
msgid ""
"if combine is False, the new value is pushed onto the stack. Note that when "
"extruding"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:21
msgid "until a specified face, combine can not be False"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:22
msgid ""
"if combine is true, the value is combined with the context solid if it "
"exists,"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.extrude:23
msgid "and the resulting solid becomes the new context solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:1
msgid ""
"Select the faces of objects on the stack, optionally filtering the "
"selection. If there are multiple objects on the stack, the faces of all "
"objects are collected and a list of all the distinct faces is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:9
msgid ""
"a CQ object whose stack contains all of the *distinct* faces of *all* "
"objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:12
msgid ""
"If there are no faces for any objects on the current stack, an empty CQ "
"object is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:15
msgid ""
"The typical use is to select the faces of a single object on the stack. For "
"example::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:19
msgid ""
"returns 1, because a cube has one face with a normal in the +Z direction. "
"Similarly::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:23
msgid "returns 6, because a cube has a total of 6 faces, And::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.faces:27
msgid ""
"returns 2, because a cube has 2 faces having normals parallel to the z "
"direction"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.fillet:1
msgid "Fillets a solid on the selected edges."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.fillet:3
msgid ""
"The edges on the stack are filleted. The solid to which the edges belong "
"must be in the parent chain of the selected edges."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.fillet:12
msgid "This example will create a unit cube, with the top edges filleted::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.filter:5
msgid "Workplane object with filtered items."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findFace:1
msgid ""
"Finds the first face object in the chain, searching from the current node "
"backwards through parents until one is found."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findFace:4
msgid "should objects on the stack be searched first."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findFace:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findSolid:5
msgid "should parents be searched?"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findFace:6
msgid "A face or None if no face is found."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findSolid:1
msgid ""
"Finds the first solid object in the chain, searching from the current node "
"backwards through parents until one is found."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findSolid:4
msgid "should objects on the stack be searched first?"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findSolid:6
msgid "if no solid is found"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.findSolid:8
msgid ""
"This function is very important for chains that are modifying a single "
"parent object, most often a solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.findSolid:11
msgid ""
"Most of the time, a chain defines or selects a solid, and then modifies it "
"using workplanes or other operations."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.findSolid:14
msgid ""
"Plugin Developers should make use of this method to find the solid that "
"should be modified, if the plugin implements a unary operation, or if the "
"operation will automatically merge its results with an object already on the"
" stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.first:1
msgid "Return the first item on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.first:3
msgid "the first item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hLine:1
msgid "Make a horizontal line from the current point the provided distance"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hLine:4
msgid "(x) distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hLine:4
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vLine:4
msgid "distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hLine:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hLineTo:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.lineTo:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polarLine:6
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarLineTo:9 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.vLine:5 ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.vLineTo:8
msgid "the Workplane object with the current point at the end of the new line"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hLineTo:1
msgid ""
"Make a horizontal line from the current point to the provided x coordinate."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hLineTo:3
msgid ""
"Useful if it is more convenient to specify the end location rather than "
"distance, as in :meth:`hLine`"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hLineTo:7
msgid "x coordinate for the end of the line"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hole:1
msgid "Makes a hole for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.hole:29
msgid ""
"see :meth:`cboreHole` and :meth:`cskHole` to make counterbores or "
"countersinks"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:1
msgid ""
"Returns a plate surface that is 'thickness' thick, enclosed by "
"'surf_edge_pts' points, and going through 'surf_pts' points.  Using "
"pushPoints directly with interpPlate and combine=True, can be very resource "
"intensive depending on the complexity of the shape. In this case set "
"combine=False."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:6
msgid ""
"list of [x,y,z] ordered coordinates or list of ordered or unordered edges, "
"wires"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:7
msgid "list of points (uses only edges if [])"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:8
msgid ""
"value may be negative or positive depending on thickening direction (2D "
"surface if 0)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:11
msgid ">= 2"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:14
msgid "= bool Anisotropy"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:15
msgid "2D tolerance"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:16
msgid "3D tolerance"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.interpPlate:18
msgid "tolerance for curvature"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.intersect:1
msgid "Intersects the provided solid from the current solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.intersect:7
msgid "if there is no solid to intersect with in the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.invoke:1
msgid ""
"Invoke a callable mapping Workplane to Workplane or None. Supports also "
"callables that take no arguments such as breakpoint. Returns self if "
"callable returns None."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.invoke:7
msgid "Workplane object."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.item:1
msgid "Return the ith item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.largestDimension:1
msgid "Finds the largest dimension in the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.largestDimension:3
msgid ""
"Used internally to create thru features, this is how you can compute how "
"long or wide a feature must be to make sure to cut through all of the "
"material"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.largestDimension:6
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.section:5
msgid "if no solids or compounds are found"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.largestDimension:7
msgid ""
"A value representing the largest dimension of the first solid on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.last:1
msgid "Return the last item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.line:1
msgid ""
"Make a line from the current point to the provided point, using dimensions "
"relative to the current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.line:5
msgid "x distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.line:6
msgid "y distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.line:7
msgid "the workplane object with the current point at the end of the new line"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.line:9
msgid ""
"see :meth:`lineTo` if you want to use absolute coordinates to make a line "
"instead."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.lineTo:1
msgid "Make a line from the current point to the provided point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.lineTo:4
msgid "the x point, in workplane plane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.lineTo:5
msgid "the y point, in workplane plane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.lineTo:8
msgid ""
"See :meth:`line` if you want to use relative dimensions to make a line "
"instead."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.loft:1
msgid "Make a lofted solid, through the set of wires."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.loft:4
msgid ""
"When set to `True` connects each section linearly and without continuity"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.loft:10
msgid "a Workplane object containing the created loft"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirror:1
msgid "Mirror a single CQ object."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirror:4
msgid "the plane to mirror about"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirror:7
msgid ""
"the base point to mirror about (this is overwritten if a Face is passed)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirror:8
msgid "If true will perform a union operation on the mirrored object"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorX:1
msgid "Mirror entities around the x axis of the workplane plane."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorX:3
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorY:3
msgid ""
"a new object with any free edges consolidated into as few wires as possible."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorX:5
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorY:5
msgid ""
"All free edges are collected into a wire, and then the wire is mirrored, and"
" finally joined into a new wire"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorX:8
msgid "Typically used to make creating wires with symmetry easier."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorY:1
msgid "Mirror entities around the y axis of the workplane plane."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorY:8
msgid ""
"Typically used to make creating wires with symmetry easier. This line of "
"code::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.mirrorY:12
msgid "Produces a flat, heart shaped object"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.move:1
msgid "Move the specified distance from the current point, without drawing."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.move:4
msgid "desired x distance, in local coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.move:6
msgid "desired y distance, in local coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.move:9
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.moveTo:9
msgid ""
"Not to be confused with :meth:`center`, which moves the center of the entire"
" workplane, this method only moves the current point ( and therefore does "
"not affect objects already drawn )."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.move:13
msgid "See :meth:`moveTo` to do the same thing but using absolute coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.moveTo:1
msgid "Move to the specified point, without drawing."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.moveTo:4
msgid "desired x location, in local coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.moveTo:6
msgid "desired y location, in local coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.moveTo:13
msgid "See :meth:`move` to do the same thing but using relative dimensions"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.newObject:1
msgid "Create a new workplane object from this one."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.newObject:3
msgid ""
"Overrides CQ.newObject, and should be used by extensions, plugins, and "
"subclasses to create new objects."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.newObject:7
msgid "new objects to put on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.newObject:9
msgid "a new Workplane object with the current workplane as a parent."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.offset2D:1
msgid "Creates a 2D offset wire."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.offset2D:4
msgid "thickness. Negative thickness denotes offset to inside."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.offset2D:5
msgid ""
"offset kind. Use \"arc\" for rounded and \"intersection\" for sharp edges "
"(default: \"arc\")"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.offset2D:6
msgid "Should the result be added to pending wires?"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.offset2D:8
msgid "CQ object with resulting wire(s)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:1
msgid "Create a spline curve approximating the provided function."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:4
msgid "function f(t) that will generate (x,y,z) pairs"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:6
msgid "number of points for discretization"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:7
msgid "starting value of the parameter t"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:8
msgid "final value of the parameter t"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:9
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:5
msgid "tolerance of the algorithm (default: 1e-6)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:10
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:10
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:6
msgid "minimum spline degree (default: 1)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:12
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:12
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:8
msgid ""
"optional parameters for the variational smoothing algorithm (default: "
"(1,1,1))"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:13
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:41
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:10
msgid "convert the resulting spline edge to a wire"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricCurve:14
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:13
msgid "a Workplane object with the current point unchanged"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:1
msgid "Create a spline surface approximating the provided function."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:4
msgid "function f(u,v) that will generate (x,y,z) pairs"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:6
msgid "number of points for discretization in one direction"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:7
msgid "starting value of the parameters u,v"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:8
msgid "final value of the parameters u,v"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:9
msgid "tolerance used by the approximation algorithm (default: 1e-3)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:11
msgid "maximum spline degree (default: 3)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.parametricSurface:15
msgid ""
"This method might be unstable and may require tuning of the tol parameter."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.placeSketch:1
msgid "Place the provided sketch(es) based on the current items on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.placeSketch:3
msgid "Workplane object with the sketch added."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarArray:1
msgid ""
"Creates a polar array of points and pushes them onto the stack. The zero "
"degree reference angle is located along the local X-axis."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarArray:5
msgid "Radius of the array."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarArray:6
msgid ""
"Starting angle (degrees) of array. Zero degrees is situated along the local "
"X-axis."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarArray:8
msgid ""
"The angle (degrees) to fill with elements. A positive value will fill in the"
" counter-clockwise direction. If fill is False, angle is the angle between "
"elements."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarArray:11
msgid "Number of elements in array. (count >= 1)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarArray:12
msgid "Interpret the angle as total if True (default: True)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarArray:13
msgid "Rotate every item (default: True)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polarLine:1
msgid ""
"Make a line of the given length, at the given angle from the current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polarLine:4
msgid "distance of the end of the line from the current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polarLine:5
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarLineTo:8
msgid "angle of the vector to the end of the line with the x-axis"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarLineTo:1
msgid "Make a line from the current point to the given polar coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarLineTo:3
msgid ""
"Useful if it is more convenient to specify the end location rather than the "
"distance and angle from the current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.polarLineTo:7
msgid "distance of the end of the line from the origin"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polygon:1
msgid "Make a polygon for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polygon:3
msgid ""
"By default, each polygon is created by inscribing it in a circle of the "
"specified diameter, such that the first vertex is oriented in the x "
"direction. Alternatively, each polygon can be created by circumscribing it "
"around a circle of the specified diameter, such that the midpoint of the "
"first edge is oriented in the x direction. Circumscribed polygons are thus "
"rotated by pi/nSides radians relative to the inscribed polygon. This ensures"
" the extent of the polygon along the positive x-axis is always known. This "
"has the advantage of not requiring additional formulae for purposes such as "
"tiling on the x-axis (at least for even sided polygons)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polygon:14
msgid "number of sides, must be >= 3"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polygon:15
msgid "the diameter of the circle for constructing the polygon"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polygon:16
msgid "circumscribe the polygon about a circle"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polygon:19
msgid "a polygon wire"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:1
msgid "Create a polyline from a list of points"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:4
msgid "a list of points in Workplane coordinates (2D or 3D)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:5
msgid "whether or not the edges are used for reference"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:8
msgid "use current point as a starting point of the polyline"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:9
msgid "a new CQ object with a list of edges on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.polyline:11
msgid "*NOTE* most commonly, the resulting wire should be closed."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.pushPoints:1
msgid ""
"Pushes a list of points onto the stack as vertices. The points are in the 2D"
" coordinate space of the workplane face"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.pushPoints:5
msgid "a list of points to push onto the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.pushPoints:7
msgid "a new workplane with the desired points on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.pushPoints:9
msgid ""
"A common use is to provide a list of points for a subsequent operation, such"
" as creating circles or holes. This example creates a cube, and then drills "
"three holes through it, based on three points::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.pushPoints:22
msgid ""
"Here the circle function operates on all three points, and is then extruded "
"to create three holes. See :meth:`circle` for how it works."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.radiusArc:1
msgid ""
"Draw an arc from the current point to endPoint with an arc defined by the "
"radius."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.radiusArc:4
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.sagittaArc:4 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.threePointArc:6
msgid "end point for the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.radiusArc:6
msgid "the radius of the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.radiusArc:8
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.sagittaArc:8 ../../cadquery/cadquery/cq.pydocstring
#: of cadquery.cq.Workplane.threePointArc:8
msgid "a workplane with the current point at the end of the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.radiusArc:10
msgid ""
"Given that a closed contour is drawn clockwise; A positive radius means "
"convex arc and negative radius means concave arc."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rarray:1
msgid ""
"Creates an array of points and pushes them onto the stack. If you want to "
"position the array at another point, create another workplane that is "
"shifted to the position you would like to use as a reference"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rarray:6
msgid "spacing between points in the x direction ( must be >= 0)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rarray:7
msgid "spacing between points in the y direction ( must be >= 0)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rarray:8
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rarray:9
msgid "number of points ( > 0 )"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rarray:10
msgid ""
"If True, the array will be centered around the workplane center. If False, "
"the lower corner will be on the reference point and the array will extend in"
" the positive x and y directions. Can also use a 2-tuple to specify "
"centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:1
msgid "Make a rectangle for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:4
msgid "length in the x direction (in workplane coordinates)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:5
msgid "length in the y direction (in workplane coordinates)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:6
msgid ""
"If True, the rectangle will be centered around the reference point. If "
"False, the corner of the rectangle will be on the reference point and it "
"will extend in the positive x and y directions. Can also use a 2-tuple to "
"specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:20
msgid "Creates 4 circles at the corners of a square centered on the origin."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:22
msgid ""
"Negative values for xLen and yLen are permitted, although they only have an "
"effect when centered is False."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rect:26
msgid "project points not in the workplane plane onto the workplane plane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:1
msgid "Use all un-revolved wires in the parent chain to create a solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:17
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:23
msgid "if combine is False, the new value is pushed onto the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:18
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:24
msgid ""
"if combine is true, the value is combined with the context solid if it "
"exists, and the resulting solid becomes the new context solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.revolve:22
msgid ""
"Keep in mind that `axisStart` and `axisEnd` are defined relative to the "
"current Workplane center position. So if for example you want to revolve a "
"circle centered at (10,0,0) around the Y axis, be sure to either "
":meth:`move` (or :meth:`moveTo`) the current Workplane position or specify "
"`axisStart` and `axisEnd` with the correct vector position. In this example "
"(0,0,0), (0,1,0) as axis coords would fail."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rotate:1
msgid ""
"Returns a copy of all of the items on the stack rotated through and angle "
"around the axis of rotation."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rotate:5
msgid "The first point of the axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rotate:7
msgid "The second point of the axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rotate:9
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:9
msgid "the rotation angle, in degrees"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.rotate:10
#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.translate:6
msgid "a CQ object"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:1
msgid ""
"Rotates all items on the stack by the specified angle, about the specified "
"axis"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:3
msgid ""
"The center of rotation is a vector starting at the center of the object on "
"the stack, and ended at the specified point."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:7
msgid "the second point of axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:10
msgid "a CQ object, with all items rotated."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:12
msgid ""
"WARNING: This version returns the same CQ object instead of a new one-- the "
"old object is not accessible."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:16
msgid ""
"A version of this method that returns a transformed copy, rather than "
"modifying the originals"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.rotateAboutCenter:18
msgid ""
"This method doesn't expose a very good interface, because the axis of "
"rotation could be inconsistent between multiple objects.  This is because "
"the beginning of the axis is variable, while the end is fixed. This is fine "
"when operating on one object, but is not cool for multiple."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.sagittaArc:1
msgid ""
"Draw an arc from the current point to endPoint with an arc defined by the "
"sag (sagitta)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.sagittaArc:6
msgid "the sagitta of the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.sagittaArc:10
msgid ""
"The sagitta is the distance from the center of the arc to the arc base. "
"Given that a closed contour is drawn clockwise; A positive sagitta means "
"convex arc and negative sagitta means concave arc. See "
"`<https://en.wikipedia.org/wiki/Sagitta_(geometry)>`_ for more information."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.section:1
msgid "Slices current solid at the given height."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.section:4
msgid "height to slice at (default: 0)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.section:6
msgid "a CQ object with the resulting face(s)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:1
msgid ""
"Remove the selected faces to create a shell of the specified thickness."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:3
msgid ""
"To shell, first create a solid, and *in the same chain* select the faces you"
" wish to remove."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:6
msgid ""
"thickness of the desired shell. Negative values shell inwards, positive "
"values shell outwards."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:8
msgid "kind of join, arc or intersection (default: arc)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:9
msgid ""
"if the current stack contains objects that are not faces of a solid further "
"up in the chain."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:11
msgid "a CQ object with the resulting shelled solid selected."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:13
msgid ""
"This example will create a hollowed out unit cube, where the top most face "
"is open, and all other walls are 0.2 units thick::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:18
msgid ""
"You can also select multiple faces at once. Here is an example that creates "
"a three-walled corner, by removing three faces of a cube::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shell:23
msgid ""
"**Note**:  When sharp edges are shelled inwards, they remain sharp corners, "
"but **outward** shells are automatically filleted (unless "
"kind=\"intersection\"), because an outward offset from a corner generates a "
"radius."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:1
msgid ""
"Select the shells of objects on the stack, optionally filtering the "
"selection. If there are multiple objects on the stack, the shells of all "
"objects are collected and a list of all the distinct shells is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:9
msgid ""
"a CQ object whose stack contains all of the *distinct* shells of *all* "
"objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:12
msgid ""
"If there are no shells for any objects on the current stack, an empty CQ "
"object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.shells:14
msgid ""
"Most solids will have a single shell, which represents the outer surface. A "
"shell will typically be composed of multiple faces."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.siblings:1
msgid "Select topological siblings."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.siblings:4
msgid "kind of linking element, e.g. \"Vertex\" or \"Edge\""
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.siblings:5
msgid "level of relation - how many elements of kind are in the link"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.siblings:7
msgid "a Workplane object whose stack contains selected siblings."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.size:1
msgid "Return the number of objects currently on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sketch:1
msgid "Initialize and return a sketch"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sketch:3
msgid "Sketch object with the current workplane as a parent."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:1
msgid "Creates a rounded slot for each point on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:4
msgid "desired diameter, or width, of slot"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:5
msgid "desired end to end length of slot"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:6
msgid "angle of slot in degrees, with 0 being along x-axis"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.slot2D:9
msgid ""
"Can be used to create arrays of slots, such as in cooling applications::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:1
msgid ""
"Select the solids of objects on the stack, optionally filtering the "
"selection. If there are multiple objects on the stack, the solids of all "
"objects are collected and a list of all the distinct solids is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:9
msgid ""
"a CQ object whose stack contains all of the *distinct* solids of *all* "
"objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:12
msgid ""
"If there are no solids for any objects on the current stack, an empty CQ "
"object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:14
msgid ""
"The typical use is to select a single object on the stack. For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:18
msgid "returns 1, because a cube consists of one solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.solids:20
msgid ""
"It is possible for a single CQ object ( or even a single CAD primitive ) to "
"contain multiple solids."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sort:5
msgid "Workplane object with items sorted."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:1
msgid ""
"Returns a 3D sphere with the specified radius for each point on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:4
msgid "The radius of the sphere"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:5
msgid "The direction axis for the creation of the sphere"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:7
msgid "The first angle to sweep the sphere arc through"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:9
msgid "The second angle to sweep the sphere arc through"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:11
msgid "The third angle to sweep the sphere arc through"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:13
msgid ""
"If True, the sphere will be centered around the reference point. If False, "
"the corner of a bounding box around the sphere will be on the reference "
"point and it will extend in the positive x, y and z directions. Can also use"
" a 3-tuple to specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:21
msgid "A sphere object for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:23
msgid ""
"One sphere is created for each item on the current stack. If no items are on"
" the stack, one box using the current workplane center is created."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:26
msgid ""
"If combine is true, the result will be a single object on the stack. If a "
"solid was found in the chain, the result is that solid with all spheres "
"produced fused onto it otherwise, the result is the combination of all the "
"produced spheres."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sphere:30
msgid ""
"If combine is false, the result will be a list of the spheres produced."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:1
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:1
msgid "Create a spline interpolated through the provided points (2D or 3D)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:4
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:4
msgid "points to interpolate through"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:5
msgid ""
"vectors specifying the direction of the tangent to the curve at each of the "
"specified interpolation points.  If only 2 tangents are given, they will be "
"used as the initial and final tangent.  If some tangents are not specified "
"(i.e., are None), no tangent constraint will be applied to the corresponding"
" interpolation point.  The spline will be C2 continuous at the interpolation"
" points where no tangent constraint is specified, and C1 continuous at the "
"points where a tangent constraint is specified."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:5
msgid ""
"vectors specifying the direction of the tangent to the curve at each of the "
"specified interpolation points."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:8
msgid ""
"If only 2 tangents are given, they will be used as the initial and final "
"tangent."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:11
msgid ""
"If some tangents are not specified (i.e., are None), no tangent constraint "
"will be applied to the corresponding interpolation point."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:14
msgid ""
"The spline will be C2 continuous at the interpolation points where no "
"tangent constraint is specified, and C1 continuous at the points where a "
"tangent constraint is specified."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:18
msgid ""
"the value of the parameter at each interpolation point. (The interpolated "
"curve is represented as a vector-valued function of a scalar parameter.)  If"
" periodic == True, then len(parameters) must be len(interpolation points) + "
"1, otherwise len(parameters) must be equal to len(interpolation points)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:18
msgid ""
"the value of the parameter at each interpolation point. (The interpolated "
"curve is represented as a vector-valued function of a scalar parameter.)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:22
msgid ""
"If periodic == True, then len(parameters) must be len(interpolation points) "
"+ 1, otherwise len(parameters) must be equal to len(interpolation points)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:25
msgid ""
"whether to scale the specified tangent vectors before interpolating.  Each "
"tangent is scaled, so it's length is equal to the derivative of the Lagrange"
" interpolated curve.  I.e., set this to True, if you want to use only the "
"direction of the tangent vectors specified by ``tangents``, but not their "
"magnitude."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:25
msgid "whether to scale the specified tangent vectors before interpolating."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:28
msgid ""
"Each tangent is scaled, so it's length is equal to the derivative of the "
"Lagrange interpolated curve."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:31
msgid ""
"I.e., set this to True, if you want to use only the direction of the tangent"
" vectors specified by ``tangents``, but not their magnitude."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:33
msgid ""
"tolerance of the algorithm (consult OCC documentation)  Used to check that "
"the specified points are not too close to each other, and that tangent "
"vectors are not too short. (In either case interpolation may fail.)  Set to "
"None to use the default tolerance."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:33
msgid "tolerance of the algorithm (consult OCC documentation)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:35
msgid ""
"Used to check that the specified points are not too close to each other, and"
" that tangent vectors are not too short. (In either case interpolation may "
"fail.)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:39
msgid "Set to None to use the default tolerance."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:40
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:9
msgid "use current point as a starting point of the curve"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:42
#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:11
msgid "a Workplane object with the current point at the end of the spline"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:44
msgid ""
"The spline will begin at the current point, and end with the last point in "
"the XY tuple list."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:47
msgid "This example creates a block with a spline for one side::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.spline:62
msgid ""
"*WARNING*  It is fairly easy to create a list of points that cannot be "
"correctly interpreted as a spline."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.splineApprox:13
msgid "*WARNING*  for advanced users."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.split:1
msgid ""
"Splits a solid on the stack into two parts, optionally keeping the separate "
"parts."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.split:4
msgid "True to keep the top, False or None to discard it"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.split:5
msgid "True to keep the bottom, False or None to discard it"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.split:6
msgid "if keepTop and keepBottom are both false."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.split:7
msgid "if there is no solid in the current stack or parent chain"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.split:8
msgid "CQ object with the desired objects on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.split:10
msgid ""
"The most common operation splits a solid and keeps one half. This sample "
"creates a split bushing::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sweep:1
msgid "Use all un-extruded wires in the parent chain to create a swept solid."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sweep:4
msgid "A wire along which the pending wires will be swept"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sweep:5
msgid ""
"False to create multiple swept from wires on the chain along path. True to "
"create only one solid swept along path with shape following the list of "
"wires on the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sweep:12
msgid "optional fixed normal for extrusion"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.sweep:13
msgid "a wire defining the binormal along the extrusion path"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.tag:1
msgid "Tags the current CQ object for later reference."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.tag:4
msgid "the name to tag this object with"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.tag:5
msgid "self, a CQ object with tag applied"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.tangentArcPoint:1
msgid "Draw an arc as a tangent from the end of the current edge to endpoint."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.tangentArcPoint:4
msgid "point for the arc to end at"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.tangentArcPoint:6
msgid ""
"True if endpoint is specified relative to the current point, False if "
"endpoint is in workplane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.tangentArcPoint:7
msgid "a Workplane object with an arc on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.tangentArcPoint:9
msgid ""
"Requires the the current first object on the stack is an Edge, as would be "
"the case after a lineTo operation or similar."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:1
msgid "Returns a 3D text."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:4
msgid "text to be rendered"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:5
msgid "size of the font in model units"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:6
msgid "the distance to extrude or cut, normal to the workplane plane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:8
msgid "True to cut the resulting solid from the parent solids if found"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:13
msgid "font name"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:14
msgid "path to font file"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:15
msgid "font type"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:16
msgid "horizontal alignment"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:17
msgid "vertical alignment"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:18
msgid "a CQ object with the resulting solid selected"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:20
msgid ""
"The returned object is always a Workplane object, and depends on whether "
"combine is True, and whether a context solid is already defined:"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:27
msgid "Examples::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:31
msgid "Specify the font (name), and kind to use an installed system font::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:35
msgid "Specify fontPath to use a font from a given file::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.text:39
msgid "Cutting text into a solid::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.threePointArc:1
msgid ""
"Draw an arc from the current point, through point1, and ending at point2"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.threePointArc:4
msgid "point to draw through"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.threePointArc:11
msgid ""
"provide a version that allows an arc using relative measures provide a "
"centerpoint arc provide tangent arcs"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.toOCC:1
msgid "Directly returns the wrapped OCCT object."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.toOCC:3
msgid "The wrapped OCCT object"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.toPending:1
msgid "Adds wires/edges to pendingWires/pendingEdges."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.toPending:3
msgid "same CQ object with updated context."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.toSvg:1
msgid "Returns svg text that represents the first item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.toSvg:3
msgid "for testing purposes."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.toSvg:5
msgid "svg formatting options"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.toSvg:7
msgid "a string that contains SVG that represents this item."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.transformed:1
msgid ""
"Create a new workplane based on the current one. The origin of the new plane"
" is located at the existing origin+offset vector, where offset is given in "
"coordinates local to the current plane The new plane is rotated through the "
"angles specified by the components of the rotation vector."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.transformed:8
msgid ""
"3-tuple of angles to rotate, in degrees relative to work plane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.transformed:9
msgid "3-tuple to offset the new plane, in local work plane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.transformed:10
msgid "a new work plane, transformed as requested"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.translate:1
msgid ""
"Returns a copy of all of the items on the stack moved by the specified "
"translation vector."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.translate:4
msgid "distance to move, in global coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:1
msgid ""
"Extrudes a wire in the direction normal to the plane, but also twists by the"
" specified angle over the length of the extrusion."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:4
msgid "The center point of the rotation will be the center of the workplane."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:6
msgid ""
"See extrude for more details, since this method is the same except for the "
"the addition of the angle. In fact, if angle=0, the result is the same as a "
"linear extrude."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:9
msgid ""
"**NOTE**  This method can create complex calculations, so be careful using "
"it with complex geometries"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:13
msgid "the distance to extrude normal to the workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.twistExtrude:14
msgid "angle (in degrees) to rotate through the extrusion"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.union:1
msgid ""
"Unions all of the items on the stack of toUnion with the current solid. If "
"there is no current solid, the items in toUnion are unioned together."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.union:6
msgid "call :meth:`clean` afterwards to have a clean shape (default True)"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.union:9
msgid "ValueError if there is no solid to add to in the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vLine:1
msgid "Make a vertical line from the current point the provided distance"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vLine:4
msgid "(y) distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vLineTo:1
msgid ""
"Make a vertical line from the current point to the provided y coordinate."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vLineTo:3
msgid ""
"Useful if it is more convenient to specify the end location rather than "
"distance, as in :meth:`vLine`"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vLineTo:7
msgid "y coordinate for the end of the line"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.val:1
msgid ""
"Return the first value on the stack. If no value is present, current plane "
"origin is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.val:3
msgid "the first value on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vals:1
msgid "get the values in the current list"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vals:4
msgid "the values of the objects on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vals:6
msgid ""
"Contrast with :meth:`all`, which returns CQ objects for all of the items on "
"the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:1
msgid ""
"Select the vertices of objects on the stack, optionally filtering the "
"selection. If there are multiple objects on the stack, the vertices of all "
"objects are collected and a list of all the distinct vertices is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:9
msgid ""
"a CQ object whose stack contains  the *distinct* vertices of *all* objects "
"on the current stack, after being filtered by the selector, if provided"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:12
msgid ""
"If there are no vertices for any objects on the current stack, an empty CQ "
"object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:15
msgid ""
"The typical use is to select the vertices of a single object on the stack. "
"For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:19
msgid ""
"returns 4, because the topmost face of a cube will contain four vertices. "
"While this::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:23
msgid "returns 8, because a cube has a total of 8 vertices"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.vertices:25
msgid ""
"**Note** Circles are peculiar, they have a single vertex at the center!"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:1
msgid ""
"Returns a 3D wedge with the specified dimensions for each point on the "
"stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:4
msgid "Distance along the X axis"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:5
msgid "Distance along the Y axis"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:6
msgid "Distance along the Z axis"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:7
msgid "The minimum X location"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:8
msgid "The minimum Z location"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:9
msgid "The maximum X location"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:10
msgid "The maximum Z location"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:11
msgid "A vector (or tuple) for the origin of the direction for the wedge"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:12
msgid "The direction vector (or tuple) for the major axis of the wedge"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:13
msgid ""
"If True, the wedge will be centered around the reference point. If False, "
"the corner of the wedge will be on the reference point and it will extend in"
" the positive x, y and z directions. Can also use a 3-tuple to specify "
"centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:19
msgid ""
"True to attempt to have the kernel clean up the geometry, False otherwise"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:20
msgid "A wedge object for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:22
msgid ""
"One wedge is created for each item on the current stack. If no items are on "
"the stack, one wedge using the current workplane center is created."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:25
msgid ""
"If combine is True, the result will be a single object on the stack. If a "
"solid was found in the chain, the result is that solid with all wedges "
"produced fused onto it otherwise, the result is the combination of all the "
"produced wedges."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wedge:29
msgid "If combine is False, the result will be a list of the wedges produced."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wire:1
msgid "Returns a CQ object with all pending edges connected into a wire."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wire:3
msgid ""
"All edges on the stack that can be combined will be combined into a single "
"wire object, and other objects will remain on the stack unmodified. If there"
" are no pending edges, this method will just return self."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wire:8
msgid ""
"whether the wire should be used to make a solid, or if it is just for "
"reference"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wire:11
msgid ""
"This method is primarily of use to plugin developers making utilities for 2D"
" construction. This method should be called when a user operation implies "
"that 2D construction is finished, and we are ready to begin working in 3d."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wire:15
msgid ""
"SEE '2D construction concepts' for a more detailed explanation of how "
"CadQuery handles edges, wires, etc."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wire:18
msgid "Any non edges will still remain."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:1
msgid ""
"Select the wires of objects on the stack, optionally filtering the "
"selection. If there are multiple objects on the stack, the wires of all "
"objects are collected and a list of all the distinct wires is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:9
msgid ""
"a CQ object whose stack contains all of the *distinct* wires of *all* "
"objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:12
msgid ""
"If there are no wires for any objects on the current stack, an empty CQ "
"object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:14
msgid ""
"The typical use is to select the wires of a single object on the stack. For "
"example::"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.wires:18
msgid "returns 1, because a face typically only has one outer wire"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.workplane:1
msgid ""
"Creates a new 2D workplane, located relative to the first face on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.workplane:4
msgid "offset for the workplane in its normal direction . Default"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.workplane:5
msgid "invert the normal direction from that of the face."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.workplane:6
msgid "how local origin of workplane is determined."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of cadquery.cq.Workplane.workplane:7
msgid "origin for plane center, requires 'ProjectedOrigin' centerOption."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplane:11
msgid ""
"The first element on the stack must be a face, a set of co-planar faces or a"
" vertex.  If a vertex, then the parent item on the chain immediately before "
"the vertex must be a face."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplane:16
msgid ""
"The result will be a 2D working plane with a new coordinate system set up as"
" follows:"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplane:19
msgid ""
"The centerOption parameter sets how the center is defined. Options are "
"'CenterOfMass', 'CenterOfBoundBox', or 'ProjectedOrigin'. 'CenterOfMass' and"
" 'CenterOfBoundBox' are in relation to the selected face(s) or vertex "
"(vertices). 'ProjectedOrigin' uses by default the current origin or the "
"optional origin parameter (if specified) and projects it onto the plane "
"defined by the selected face(s)."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplane:25
msgid ""
"The Z direction will be the normal of the face, computed at the center "
"point."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplane:27
msgid ""
"The X direction will be parallel to the x-y plane. If the workplane is  "
"parallel to the global x-y plane, the x direction of the workplane will co-"
"incide with the global x direction."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplane:31
msgid ""
"Most commonly, the selected face will be planar, and the workplane lies in "
"the same plane of the face ( IE, offset=0). Occasionally, it is useful to "
"define a face offset from an existing surface, and even more rarely to "
"define a workplane based on a face that is not planar."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplaneFromTagged:1
msgid "Copies the workplane from a tagged parent."
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplaneFromTagged:3
msgid "tag to search for"
msgstr ""

#: ../../cadquery/cadquery/cq.pydocstring of
#: cadquery.cq.Workplane.workplaneFromTagged:4
msgid "a CQ object with name's workplane"
msgstr ""

#: ../../cadquery/cadquery/__init__.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:1
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:1
msgid "Tries to determine how wires should be combined into faces."
msgstr ""

#: ../../cadquery/cadquery/__init__.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:3
msgid "Assume:"
msgstr ""

#: ../../cadquery/cadquery/__init__.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:4
msgid ""
"The wires make up one or more faces, which could have 'holes' Outer wires "
"are listed ahead of inner wires there are no wires inside wires inside wires"
" ( IE, islands -- we can deal with that later on ) none of the wires are "
"construction wires"
msgstr ""

#: ../../cadquery/cadquery/__init__.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:10
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:10
msgid "Compute:"
msgstr ""

#: ../../cadquery/cadquery/__init__.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:11
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:11
msgid ""
"one or more sets of wires, with the outer wire listed first, and inner ones"
msgstr ""

#: ../../cadquery/cadquery/__init__.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:14
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sortWiresByBuildOrder:14
msgid "Returns, list of lists."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.CompSolid:1
msgid "a single compsolid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1DProtocol:1
msgid ""
"Bases: :py:class:`~cadquery.occ_impl.shapes.ShapeProtocol`, "
":py:class:`~typing.Protocol`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.ShapeProtocol:1
msgid "Bases: :py:class:`~typing.Protocol`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.box:1
msgid "Construct a solid box."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cap:1
msgid ""
"Fill edges/wire possibly obeying constraints and try to connect smoothly to "
"the context shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.chamfer:1
msgid "Chamfer selected edges in a given shell or solid."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.check:1
msgid "Check if a shape is valid."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.circle:1
msgid "Construct a circle."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.clean:1
msgid "Clean superfluous edges and faces."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.closest:1
msgid "Closest points between two shapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.compound:1
msgid "Build compound from shapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.compound:4
msgid ""
"compound(s: Sequence[cadquery.occ_impl.shapes.Shape]) -> "
"cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.compound:6
msgid "Build compound from a sequence of shapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cone:1
msgid "Construct a partial solid cone."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cone:4
msgid ""
"cone(d: Union[float, int], h: Union[float, int]) -> "
"cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cone:6
msgid "Construct a full solid cone."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cut:1
msgid "Subtract two shapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.cylinder:1
msgid "Construct a solid cylinder."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.downcast:1
msgid "Downcasts a TopoDS object to suitable specialized type"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.edgeOn:1
msgid "Build an edge on a face from points in (u,v) space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.edgeOn:4
msgid ""
"_(fbase: cadquery.occ_impl.shapes.Shape, edg: "
"cadquery.occ_impl.shapes.Shape, *edgs: cadquery.occ_impl.shapes.Shape, tol: "
"float = 1e-06, N: int = 20)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.edgeOn:6
msgid "Map one or more edges onto a base face in the u,v space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.edgesToWires:1
msgid "Convert edges to a list of wires."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.ellipse:1
msgid "Construct an ellipse."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.extrude:1
msgid "Extrude a shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.face:1
msgid "Build face from edges or wires."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.face:4
msgid ""
"face(s: Sequence[cadquery.occ_impl.shapes.Shape]) -> "
"cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.face:6
msgid "Build face from a sequence of edges or wires."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.faceOn:1
msgid ""
"Build face(s) on base by mapping planar face(s) onto the (u,v) space of "
"base."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fill:1
msgid "Fill edges/wire possibly obeying constraints."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fillet:1
msgid "Fillet selected edges in a given shell or solid."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fix:1
msgid "Fix a TopoDS object to suitable specialized type"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.fuse:1
msgid "Fuse at least two shapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.imprint:1
msgid "Imprint arbitrary number of shapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.intersect:1
msgid "Intersect two shapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.loft:1
msgid ""
"Loft edges, wires or faces. For faces cap has no effect. Do not mix faces "
"with other types."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.loft:4
msgid ""
"loft(*s: cadquery.occ_impl.shapes.Shape, cap: bool = False, ruled: bool = "
"False, continuity: Literal['C1', 'C2', 'C3'] = 'C2', parametrization: "
"Literal['uniform', 'chordal', 'centripetal'] = 'uniform', degree: int = 3, "
"compat: bool = True, smoothing: bool = False, weights: Tuple[float, float, "
"float] = (1, 1, 1)) -> cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.loft:6
msgid "Variadic loft overload."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.offset:1
msgid "Offset or thicken faces or shells."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.plane:1
msgid "Construct a finite planar face."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.plane:4
msgid "plane() -> cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.plane:6
msgid "Construct an infinite planar face."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.plane:8
msgid ""
"This is a crude approximation. Truly infinite faces in OCCT do not work as "
"expected in all contexts."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.polygon:1
msgid "Construct a polygon (closed polyline) from points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.polyline:1
msgid "Construct a polyline from points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.project:1
msgid "Project s onto base using normal projection."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.rect:1
msgid "Construct a rectangle."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.revolve:1
msgid "Revolve a shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.segment:1
msgid "Construct a segment from two points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.setThreads:1
msgid "Set number of threads to be used by boolean operations."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.shell:1
msgid ""
"Build shell from faces. If ctx is specified, local sewing is performed."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.shell:4
msgid ""
"shell(s: Sequence[cadquery.occ_impl.shapes.Shape], tol: float = 1e-06, "
"manifold: bool = True, ctx: Union[Sequence[cadquery.occ_impl.shapes.Shape], "
"cadquery.occ_impl.shapes.Shape, NoneType] = None, history: "
"Optional[Dict[Union[cadquery.occ_impl.shapes.Shape, str], "
"cadquery.occ_impl.shapes.Shape]] = None) -> cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.shell:6
msgid ""
"Build shell from a sequence of faces. If ctx is specified, local sewing is "
"performed."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.solid:1
msgid "Build solid from faces or shells."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.solid:4
msgid ""
"solid(s: Sequence[cadquery.occ_impl.shapes.Shape], inner: "
"Optional[Sequence[cadquery.occ_impl.shapes.Shape]] = None, tol: float = "
"1e-06, history: Optional[Dict[Union[cadquery.occ_impl.shapes.Shape, str], "
"cadquery.occ_impl.shapes.Shape]] = None) -> cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.solid:6
msgid "Build solid from a sequence of faces."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sphere:1
msgid "Construct a solid sphere."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.spline:1
msgid "Construct a spline from points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.spline:4
msgid ""
"spline(pts: Sequence[Union[ForwardRef('Vector'), Tuple[Union[int, float], "
"Union[int, float]], Tuple[Union[int, float], Union[int, float], Union[int, "
"float]]]], tgts: Optional[Sequence[Union[ForwardRef('Vector'), "
"Tuple[Union[int, float], Union[int, float]], Tuple[Union[int, float], "
"Union[int, float], Union[int, float]]]]] = None, params: "
"Optional[Sequence[float]] = None, tol: float = 1e-06, periodic: bool = "
"False, scale: bool = True) -> cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.spline:6
msgid "Construct a spline from a sequence points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.split:1
msgid "Split one shape with another."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sweep:1
msgid ""
"Sweep edge, wire or face along a path. For faces cap has no effect. Do not "
"mix faces with other types."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sweep:5
msgid ""
"sweep(s: Sequence[cadquery.occ_impl.shapes.Shape], path: "
"cadquery.occ_impl.shapes.Shape, aux: "
"Optional[cadquery.occ_impl.shapes.Shape] = None, cap: bool = False) -> "
"cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.sweep:7
msgid ""
"Sweep edges, wires or faces along a path, multiple sections are supported. "
"For faces cap has no effect. Do not mix faces with other types."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.text:1
msgid "Create a flat text."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.text:4
msgid ""
"text(txt: str, size: Union[float, int], spine: "
"cadquery.occ_impl.shapes.Shape, planar: bool = False, font: str = 'Arial', "
"path: Optional[str] = None, kind: Literal['regular', 'bold', 'italic'] = "
"'regular', halign: Literal['center', 'left', 'right'] = 'center', valign: "
"Literal['center', 'top', 'bottom'] = 'center') -> "
"cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.text:6
msgid "Create a text on a spine."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.text:9
msgid ""
"text(txt: str, size: Union[float, int], spine: "
"cadquery.occ_impl.shapes.Shape, base: cadquery.occ_impl.shapes.Shape, font: "
"str = 'Arial', path: Optional[str] = None, kind: Literal['regular', 'bold', "
"'italic'] = 'regular', halign: Literal['center', 'left', 'right'] = "
"'center', valign: Literal['center', 'top', 'bottom'] = 'center') -> "
"cadquery.occ_impl.shapes.Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.text:11
msgid "Create a text on a spine and a base surface."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.torus:1
msgid "Construct a solid torus."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.vertex:1
msgid "Construct a vertex from coordinates."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.vertex:4
msgid ""
"vertex(p: Union[ForwardRef('Vector'), Tuple[Union[int, float], Union[int, "
"float]], Tuple[Union[int, float], Union[int, float], Union[int, float]]])"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.vertex:6
msgid "Construct a vertex from VectorLike."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wire:1
msgid "Build wire from edges."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wireOn:1
msgid "Map a wire onto a base face in the u,v space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.wiresToFaces:1
msgid "Convert wires to a list of faces."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.bounds:1
msgid "Parametric bounds of the curve."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatureAt:1
msgid "Calculate mean curvature along the underlying curve."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatureAt:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locationAt:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.positionAt:4
msgid "distance or parameter value"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatureAt:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatures:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locationAt:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locations:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.positionAt:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.positions:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.tangentAt:5
msgid "position calculation mode (default: length)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatureAt:6
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatures:6
msgid "resolution of the calculation (default: 1e-6)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatureAt:7
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatures:7
msgid "mean curvature value at the specified d value."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatures:1
msgid "Calculate mean curvatures along the underlying curve."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.curvatures:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locations:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.positions:4
msgid "distance or parameter values"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.endPoint:1
msgid "a vector representing the end point of this edge."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.endPoint:3
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.startPoint:3
msgid "Note, circles may have the start and end points the same"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locationAt:1
msgid "Generate a location along the underlying curve."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locationAt:6
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locations:6
msgid "moving frame calculation method (default: frenet)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locationAt:7
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locations:7
msgid "planar mode"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locationAt:8
msgid ""
"A Location object representing local coordinate system at the specified "
"distance."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locations:1
msgid "Generate locations along the curve."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.locations:8
msgid ""
"A list of Location objects representing local coordinate systems at the "
"specified distances."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.normal:1
msgid "Calculate the normal Vector. Only possible for planar curves."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.normal:3
msgid "normal vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.paramAt:1
msgid ""
"Compute parameter value at the specified normalized distance or a point."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.paramAt:4
msgid "normalized distance [0, 1] or a point"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.paramAt:5
msgid "parameter value"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.params:1
msgid "Computes u values closest to given vectors."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.params:4
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.paramsLength:6
msgid "the points to compute the parameters at."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.params:5
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.paramsLength:5
msgid "list of u values."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.paramsLength:1
msgid "Computes u values at given relative lengths."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.paramsLength:4
msgid "list of distances."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.positionAt:1
msgid "Generate a position along the underlying curve."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.positionAt:6
msgid "A Vector on the underlying curve located at the specified d value."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.positions:1
msgid "Generate positions along the underlying curve."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.positions:6
msgid "A list of Vector objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.project:1
msgid "Project onto a face along the specified direction."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.radius:1
msgid "Calculate the radius."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.radius:3
msgid ""
"Note that when applied to a Wire, the radius is simply the radius of the "
"first edge."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.radius:5
msgid "radius"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.radius:6
msgid "if kernel can not reduce the shape to a circular edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.sample:1
msgid "Sample a curve based on a number of points or deflection."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.sample:4
msgid "Number of positions or deflection"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.sample:5
msgid "A list of Vectors and a list of parameters."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.startPoint:1
msgid "a vector representing the start point of this edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.tangentAt:1
msgid "Compute tangent vector at the specified location."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.tangentAt:4
msgid "distance or parameter value (default: 0.5)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.tangents:1
msgid "Compute tangent vectors at the specified locations."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.tangents:4
msgid "list of distances or parameters."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.tangents:5
msgid "position calculation mode (default: length)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin1D.tangents:6
msgid "list of tangent vectors"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.chamfer:1
msgid "Chamfers the specified edges of this solid."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.chamfer:4
msgid "length > 0, the length (length) of the chamfer"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.chamfer:5
msgid ""
"length2 > 0, optional parameter for asymmetrical chamfer. Should be `None` "
"if not required."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.chamfer:6
#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.fillet:5
msgid "a list of Edge objects, which must belong to this solid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.chamfer:7
msgid "Chamfered solid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.dprism:1
msgid "Make a prismatic feature (additive or subtractive)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.dprism:4
msgid "face to perform the operation on"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.dprism:6
msgid "depth of the cut or extrusion"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.dprism:7
msgid "a face to extrude until"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.dprism:8
msgid "cut thruAll"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.fillet:1
msgid "Fillets the specified edges of this solid."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.fillet:4
msgid "float > 0, the radius of the fillet"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.fillet:6
msgid "Filleted solid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.isInside:1
msgid ""
"Returns whether or not the point is inside a solid or compound object within"
" the specified tolerance."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.isInside:5
msgid "tuple or Vector representing 3D point to be tested"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.isInside:6
msgid "tolerance for inside determination, default=1.0e-6"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.isInside:7
msgid "bool indicating whether or not point is within solid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.shell:1
msgid "Make a shelled solid of self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.shell:4
msgid ""
"List of faces to be removed, which must be part of the solid. Can be an "
"empty list."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.shell:6
msgid ""
"Floating point thickness. Positive shells outwards, negative shells inwards."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.shell:8
msgid "Modelling tolerance of the method, default=0.0001."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.pydocstring of
#: cadquery.occ_impl.shapes.Mixin3D.shell:9
msgid "A shelled solid."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AndSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.SubtractSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.SumSelector:1
msgid "Bases: :py:class:`~cadquery.selectors.BinarySelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AndSelector:1
msgid ""
"Intersection selector. Returns objects that is selected by both selectors."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.CenterNthSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.LengthNthSelector:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.RadiusNthSelector:1
msgid "Bases: :py:class:`~cadquery.selectors._NthSelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:4
msgid "Faces, Shells, Solids - Shape.Area() is used to compute area"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:5
msgid "closed planar Wires - a temporary face is created to compute area"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:7
msgid "Will ignore non-planar or non-closed wires."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:9
msgid ""
"Among other things can be used to select one of the nested coplanar wires or"
" faces."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:12
msgid "For example to create a fillet on a shank::"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector:25
msgid "Or to create a lip on a case seam::"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.AreaNthSelector.key:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.CenterNthSelector.key:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.LengthNthSelector.key:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.RadiusNthSelector.key:1
msgid ""
"Return the key for ordering. Can raise a ValueError if obj can not be used "
"to create a key, which will result in obj being dropped by the clustering "
"method."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BaseDirSelector.filter:1
#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionNthSelector.filter:1
msgid ""
"There are lots of kinds of filters, but for planes they are always based on "
"the normal of the plane, and for edges on the tangent vector along the edge"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BinarySelector:1
msgid ""
"Base class for selectors that operates with two other selectors. Subclass "
"must implement the :filterResults(): method."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector:3
msgid ""
"If `boundingbox` is True only the objects that have their bounding box "
"inside the given box is selected. Otherwise only center point of the object "
"is tested."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.BoxSelector:7
msgid "Applicability: all types of shapes"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.CenterNthSelector:4
msgid "All Shapes."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.DirectionNthSelector:1
msgid ""
"Bases: :py:class:`~cadquery.selectors.ParallelDirSelector`, "
":py:class:`~cadquery.selectors.CenterNthSelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.InverseSelector:1
msgid ""
"Inverts the selection of given selector. In other words, selects all objects"
" that is not selected by given selector."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.LengthNthSelector:4
msgid "All Edge and Wire objects"
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.RadiusNthSelector:4
msgid "All Edge and Wires."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.RadiusNthSelector:6
msgid ""
"Will ignore any shape that can not be represented as a circle or an arc of a"
" circle."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.SubtractSelector:1
msgid ""
"Difference selector. Subtract results of a selector from another selectors "
"results."
msgstr ""

#: ../../cadquery/cadquery/selectors.pydocstring of
#: cadquery.selectors.SumSelector:1
msgid "Union selector. Returns the sum of two selectors results."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:1
msgid "Export an assembly to a STEP file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:5
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportStepMeta:8
msgid "assembly"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:6
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportStepMeta:9
msgid "Path and filename for writing"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:7
msgid ""
"STEP export mode. The options are \"default\", and \"fused\" (a single fused"
" compound). It is possible that fused mode may exhibit low performance."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:9
msgid ""
"OCCT fuse operation tolerance setting used only for fused assembly export."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:11
msgid ""
"Enable gluing mode for improved performance during fused assembly export. "
"This option should only be used for non-intersecting shapes or those that "
"are only touching or partially overlapping. Note that when glue is enabled, "
"the resulting fused shape may be invalid if shapes are intersecting in an "
"incompatible way. Defaults to False."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportAssembly:16
#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportStepMeta:10
msgid ""
"Enable or disable writing parametric curves to the STEP file. Default True. "
"If False, writes STEP file without pcurves. This decreases the size of the "
"resulting STEP file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportCAF:1
msgid "Export an assembly to a OCAF xml file (internal OCCT format)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportGLTF:1
msgid "Export an assembly to a gltf file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportStepMeta:1
msgid ""
"Export an assembly to a STEP file with faces tagged with names and colors. "
"This is done as a separate method from the main STEP export because this is "
"not compatible with the fused mode and also flattens the hierarchy of the "
"STEP."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportStepMeta:5
msgid ""
"Layers are used because some software does not understand the ADVANCED_FACE "
"entity and needs names attached to layers instead."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportVRML:1
msgid "Export an assembly to a vrml file using vtk."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/assembly.pydocstring of
#: cadquery.occ_impl.exporters.assembly.exportVTKJS:1
msgid ""
"Export an assembly to a zipped vtkjs. NB: .zip extensions is added to path."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.pydocstring of
#: cadquery.occ_impl.assembly.toJSON:1
msgid ""
"Export an object to a structure suitable for converting to VTK.js JSON."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument:1
msgid "Create DXF document from CadQuery objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument:3
msgid ""
"A wrapper for `ezdxf <https://ezdxf.readthedocs.io/>`_ providing methods for"
" converting :class:`cadquery.Workplane` objects to DXF entities."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument:6
msgid ""
"The ezdxf document is available as the property ``document``, allowing most "
"features of ezdxf to be utilised directly."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument:10
msgid "Example usage"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument:11
msgid "Single layer DXF document"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument:20
msgid "Multilayer DXF document"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:1
msgid "Initialize DXF document."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:3
msgid ""
":attr:`DXF version specifier <ezdxf-"
"stable:ezdxf.document.Drawing.dxfversion>` as string, default is \"AC1027\" "
"respectively \"R2013\""
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:5
msgid ""
"setup default styles, ``False`` for no setup, ``True`` to set up everything "
"or a list of topics as strings, e.g. ``[\"linetypes\", \"styles\"]`` refer "
"to :func:`ezdxf-stable:ezdxf.new`."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:8
msgid "ezdxf document/modelspace :doc:`units <ezdxf-stable:concepts/units>`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:9
msgid ""
"document :ref:`metadata <ezdxf-stable:ezdxf_metadata>` a dictionary of name "
"value pairs"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:10
msgid ""
"Approximation strategy for converting :class:`cadquery.Workplane` objects to"
" DXF entities:  ``None``     no approximation applied ``\"spline\"``     all"
" splines approximated as cubic splines ``\"arc\"``     all curves "
"approximated as arcs and straight segments"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:10
msgid ""
"Approximation strategy for converting :class:`cadquery.Workplane` objects to"
" DXF entities:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:12
msgid "``None``"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:13
msgid "no approximation applied"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:14
msgid "``\"spline\"``"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:15
msgid "all splines approximated as cubic splines"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:16
msgid "``\"arc\"``"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:17
msgid "all curves approximated as arcs and straight segments"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.__init__:19
msgid ""
"Approximation tolerance for converting :class:`cadquery.Workplane` objects "
"to DXF entities."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.add_layer:1
msgid "Create a layer definition"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.add_layer:3
msgid ""
"Refer to :ref:`ezdxf layers <ezdxf-stable:layer_concept>` and :doc:`ezdxf "
"layer tutorial <ezdxf-stable:tutorials/layers>`."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.add_layer:6
#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.add_shape:4
msgid "layer definition name"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.add_layer:7
msgid ""
"color index. Standard colors include: 1 red, 2 yellow, 3 green, 4 cyan, 5 "
"blue, 6 magenta, 7 white/black"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.add_layer:9
msgid "ezdxf :doc:`line type <ezdxf-stable:concepts/linetypes>`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.add_shape:1
msgid "Add CadQuery shape to a DXF layer."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/exporters/dxf.pydocstring of
#: cadquery.occ_impl.exporters.dxf.DxfDocument.add_shape:3
msgid "CadQuery Workplane or Shape"
msgstr ""
