# SOME DESCRIPTIVE TITLE.
# Copyright (C) Parametric Products Intellectual Holdings LLC, All Rights Reserved
# This file is distributed under the same license as the CadQuery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CadQuery 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 11:06+0000\n"
"PO-Revision-Date: 2021-05-27 10:38+0000\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/121077/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../cadquery/doc/examples.rst:5
msgid "CadQuery Examples"
msgstr ""

#: ../../cadquery/doc/examples.rst:9
msgid ""
"The examples on this page can help you learn how to build objects with "
"CadQuery."
msgstr ""

#: ../../cadquery/doc/examples.rst:11
msgid ""
"They are organized from simple to complex, so working through them in order "
"is the best way to absorb them."
msgstr ""

#: ../../cadquery/doc/examples.rst:13
msgid ""
"Each example lists the API elements used in the example for easy reference. "
"Items introduced in the example are marked with a **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:18
msgid ""
"You may want to work through these examples by pasting the text into a code "
"editor in a CadQuery . If you do, make sure to take these steps so that they"
" work:"
msgstr ""

#: ../../cadquery/doc/examples.rst:21
msgid "paste the content into the build() method, properly indented, and"
msgstr ""

#: ../../cadquery/doc/examples.rst:22
msgid ""
"add the line 'return result' at the end. The samples below are "
"autogenerated, but they use a different syntax than the models on the "
"website need to be."
msgstr ""

#: ../../cadquery/doc/examples.rst:27
msgid ""
"We strongly recommend installing `CQ-editor <https://github.com/CadQuery/CQ-"
"editor>`_, so that you can work along with these examples interactively. See"
" :ref:`installation` for more info."
msgstr ""

#: ../../cadquery/doc/examples.rst:32
msgid "You have to have an svg capable browser to view these!"
msgstr ""

#: ../../cadquery/doc/examples.rst:36
msgid "List of Examples"
msgstr ""

#: ../../cadquery/doc/examples.rst:39
msgid "Simple Rectangular Plate"
msgstr ""

#: ../../cadquery/doc/examples.rst:41
msgid "Just about the simplest possible example, a rectangular box"
msgstr ""

#: ../../cadquery/doc/examples.rst:53
msgid ":py:meth:`Workplane` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:54
msgid ":py:meth:`Workplane.box` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:57
msgid "Plate with Hole"
msgstr ""

#: ../../cadquery/doc/examples.rst:59
msgid "A rectangular box, but with a hole added."
msgstr ""

#: ../../cadquery/doc/examples.rst:61
msgid ""
"\"\\>Z\" selects the top most face of the resulting box.  The hole is "
"located in the center because the default origin of a working plane is at "
"the center of the face.  The default hole depth is through the entire part."
msgstr ""

#: ../../cadquery/doc/examples.rst:82
msgid ":py:meth:`Workplane.hole` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:83 ../../cadquery/doc/examples.rst:84
#: ../../cadquery/doc/examples.rst:211 ../../cadquery/doc/examples.rst:423
#: ../../cadquery/doc/examples.rst:451 ../../cadquery/doc/examples.rst:476
#: ../../cadquery/doc/examples.rst:521 ../../cadquery/doc/examples.rst:546
#: ../../cadquery/doc/examples.rst:593 ../../cadquery/doc/examples.rst:615
#: ../../cadquery/doc/examples.rst:647 ../../cadquery/doc/examples.rst:706
#: ../../cadquery/doc/examples.rst:732 ../../cadquery/doc/examples.rst:817
#: ../../cadquery/doc/examples.rst:955
msgid ":py:meth:`Workplane.box`"
msgstr ""

#: ../../cadquery/doc/examples.rst:87
msgid "An extruded prismatic solid"
msgstr ""

#: ../../cadquery/doc/examples.rst:89
msgid ""
"Build a prismatic solid using extrusion. After a drawing operation, the "
"center of the previous object is placed on the stack, and is the reference "
"for the next operation. So in this case, the rect() is drawn centered on the"
" previously draw circle."
msgstr ""

#: ../../cadquery/doc/examples.rst:93
msgid ""
"By default, rectangles and circles are centered around the previous working "
"point."
msgstr ""

#: ../../cadquery/doc/examples.rst:104
msgid ":py:meth:`Workplane.circle` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:105
msgid ":py:meth:`Workplane.rect` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:106
msgid ":py:meth:`Workplane.extrude` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:107 ../../cadquery/doc/examples.rst:133
#: ../../cadquery/doc/examples.rst:162 ../../cadquery/doc/examples.rst:189
#: ../../cadquery/doc/examples.rst:241 ../../cadquery/doc/examples.rst:274
#: ../../cadquery/doc/examples.rst:302 ../../cadquery/doc/examples.rst:424
#: ../../cadquery/doc/examples.rst:452 ../../cadquery/doc/examples.rst:477
#: ../../cadquery/doc/examples.rst:548 ../../cadquery/doc/examples.rst:595
#: ../../cadquery/doc/examples.rst:652 ../../cadquery/doc/examples.rst:712
#: ../../cadquery/doc/examples.rst:734 ../../cadquery/doc/examples.rst:781
#: ../../cadquery/doc/examples.rst:821 ../../cadquery/doc/examples.rst:863
msgid ":py:meth:`Workplane`"
msgstr ""

#: ../../cadquery/doc/examples.rst:110
msgid "Building Profiles using lines and arcs"
msgstr ""

#: ../../cadquery/doc/examples.rst:112
msgid ""
"Sometimes you need to build complex profiles using lines and arcs.  This "
"example builds a prismatic solid from 2-d operations."
msgstr ""

#: ../../cadquery/doc/examples.rst:115
msgid ""
"2-d operations maintain a current point, which is initially at the origin. "
"Use close() to finish a closed curve."
msgstr ""

#: ../../cadquery/doc/examples.rst:130
msgid ":py:meth:`Workplane.threePointArc` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:131
msgid ":py:meth:`Workplane.lineTo` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:132 ../../cadquery/doc/examples.rst:165
#: ../../cadquery/doc/examples.rst:191 ../../cadquery/doc/examples.rst:243
#: ../../cadquery/doc/examples.rst:277 ../../cadquery/doc/examples.rst:303
#: ../../cadquery/doc/examples.rst:358 ../../cadquery/doc/examples.rst:388
#: ../../cadquery/doc/examples.rst:474 ../../cadquery/doc/examples.rst:777
#: ../../cadquery/doc/examples.rst:856 ../../cadquery/doc/examples.rst:954
msgid ":py:meth:`Workplane.extrude`"
msgstr ""

#: ../../cadquery/doc/examples.rst:136
msgid "Moving The Current working point"
msgstr ""

#: ../../cadquery/doc/examples.rst:138
msgid ""
"In this example, a closed profile is required, with some interior features "
"as well."
msgstr ""

#: ../../cadquery/doc/examples.rst:140
msgid ""
"This example also demonstrates using multiple lines of code instead of "
"longer chained commands, though of course in this case it was possible to do"
" it in one long line as well."
msgstr ""

#: ../../cadquery/doc/examples.rst:143
msgid "A new work plane center can be established at any point."
msgstr ""

#: ../../cadquery/doc/examples.rst:161
msgid ":py:meth:`Workplane.center` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:163 ../../cadquery/doc/examples.rst:190
#: ../../cadquery/doc/examples.rst:617 ../../cadquery/doc/examples.rst:779
#: ../../cadquery/doc/examples.rst:818 ../../cadquery/doc/examples.rst:952
msgid ":py:meth:`Workplane.circle`"
msgstr ""

#: ../../cadquery/doc/examples.rst:164 ../../cadquery/doc/examples.rst:522
#: ../../cadquery/doc/examples.rst:618 ../../cadquery/doc/examples.rst:648
#: ../../cadquery/doc/examples.rst:953
msgid ":py:meth:`Workplane.rect`"
msgstr ""

#: ../../cadquery/doc/examples.rst:168
msgid "Using Point Lists"
msgstr ""

#: ../../cadquery/doc/examples.rst:170
msgid ""
"Sometimes you need to create a number of features at various locations, and "
"using :py:meth:`Workplane.center` is too cumbersome."
msgstr ""

#: ../../cadquery/doc/examples.rst:173
msgid ""
"You can use a list of points to construct multiple objects at once. Most "
"construction methods, like :py:meth:`Workplane.circle` and "
":py:meth:`Workplane.rect`, will operate on multiple points if they are on "
"the stack"
msgstr ""

#: ../../cadquery/doc/examples.rst:188
msgid ":py:meth:`Workplane.points` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:194
msgid "Polygons"
msgstr ""

#: ../../cadquery/doc/examples.rst:196
msgid ""
"You can create polygons for each stack point if you would like. Useful in 3d"
" printers whos firmware does not correct for small hole sizes."
msgstr ""

#: ../../cadquery/doc/examples.rst:209
msgid ":py:meth:`Workplane.polygon` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:210
msgid ":py:meth:`Workplane.pushPoints`"
msgstr ""

#: ../../cadquery/doc/examples.rst:214
msgid "Polylines"
msgstr ""

#: ../../cadquery/doc/examples.rst:216
msgid ""
":py:meth:`Workplane.polyline` allows creating a shape from a large number of"
" chained points connected by lines."
msgstr ""

#: ../../cadquery/doc/examples.rst:218
msgid ""
"This example uses a polyline to create one half of an i-beam shape, which is"
" mirrored to create the final profile."
msgstr ""

#: ../../cadquery/doc/examples.rst:240
msgid ":py:meth:`Workplane.polyline` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:242
msgid ":py:meth:`Workplane.mirrorY`"
msgstr ""

#: ../../cadquery/doc/examples.rst:248
msgid "Defining an Edge with a Spline"
msgstr ""

#: ../../cadquery/doc/examples.rst:250
msgid ""
"This example defines a side using a spline curve through a collection of "
"points. Useful when you have an edge that needs a complex profile"
msgstr ""

#: ../../cadquery/doc/examples.rst:273
msgid ":py:meth:`Workplane.spline` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:275 ../../cadquery/doc/examples.rst:387
msgid ":py:meth:`Workplane.close`"
msgstr ""

#: ../../cadquery/doc/examples.rst:276 ../../cadquery/doc/examples.rst:356
msgid ":py:meth:`Workplane.lineTo`"
msgstr ""

#: ../../cadquery/doc/examples.rst:280
msgid "Mirroring Symmetric Geometry"
msgstr ""

#: ../../cadquery/doc/examples.rst:282
msgid ""
"You can mirror 2-d geometry when your shape is symmetric.  In this example "
"we also introduce horizontal and vertical lines, which make for slightly "
"easier coding."
msgstr ""

#: ../../cadquery/doc/examples.rst:297
msgid ":py:meth:`Workplane.hLine` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:298
msgid ":py:meth:`Workplane.vLine` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:299
msgid ":py:meth:`Workplane.hLineTo` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:300
msgid ":py:meth:`Workplane.mirrorY` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:301
msgid ":py:meth:`Workplane.mirrorX` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:306
msgid "Mirroring 3D Objects"
msgstr ""

#: ../../cadquery/doc/examples.rst:355
msgid ":py:meth:`Workplane.moveTo`"
msgstr ""

#: ../../cadquery/doc/examples.rst:357 ../../cadquery/doc/examples.rst:858
msgid ":py:meth:`Workplane.threePointArc`"
msgstr ""

#: ../../cadquery/doc/examples.rst:359 ../../cadquery/doc/examples.rst:390
msgid ":py:meth:`Workplane.mirror`"
msgstr ""

#: ../../cadquery/doc/examples.rst:360 ../../cadquery/doc/examples.rst:391
#: ../../cadquery/doc/examples.rst:963
msgid ":py:meth:`Workplane.union`"
msgstr ""

#: ../../cadquery/doc/examples.rst:361
msgid ":py:meth:`Workplane.rotate`"
msgstr ""

#: ../../cadquery/doc/examples.rst:365
msgid "Mirroring From Faces"
msgstr ""

#: ../../cadquery/doc/examples.rst:367
msgid ""
"This example shows how you can mirror about a selected face.  It also shows "
"how the resulting mirrored object can be unioned immediately with the "
"referenced mirror geometry."
msgstr ""

#: ../../cadquery/doc/examples.rst:386
msgid ":py:meth:`Workplane.line`"
msgstr ""

#: ../../cadquery/doc/examples.rst:389 ../../cadquery/doc/examples.rst:523
#: ../../cadquery/doc/examples.rst:594 ../../cadquery/doc/examples.rst:616
#: ../../cadquery/doc/examples.rst:651 ../../cadquery/doc/examples.rst:711
#: ../../cadquery/doc/examples.rst:780 ../../cadquery/doc/examples.rst:862
#: ../../cadquery/doc/examples.rst:957
msgid ":py:meth:`Workplane.faces`"
msgstr ""

#: ../../cadquery/doc/examples.rst:394
msgid "Creating Workplanes on Faces"
msgstr ""

#: ../../cadquery/doc/examples.rst:396
msgid ""
"This example shows how to locate a new workplane on the face of a previously"
" created feature."
msgstr ""

#: ../../cadquery/doc/examples.rst:399
msgid ""
"Using workplanes in this way are a key feature of CadQuery.  Unlike typical "
"3d scripting language, using work planes frees you from tracking the "
"position of various features in variables, and allows the model to adjust "
"itself with removing redundant dimensions"
msgstr ""

#: ../../cadquery/doc/examples.rst:403
msgid ""
"The :py:meth:`Workplane.faces()` method allows you to select the faces of a "
"resulting solid. It accepts a selector string or object, that allows you to "
"target a single face, and make a workplane oriented on that face."
msgstr ""

#: ../../cadquery/doc/examples.rst:407
msgid ""
"Keep in mind that the origin of new workplanes are located at the center of "
"a face by default."
msgstr ""

#: ../../cadquery/doc/examples.rst:419
msgid ":py:meth:`Workplane.faces` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:420 ../../cadquery/doc/examples.rst:453
msgid ":py:meth:`StringSyntaxSelector` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:421 ../../cadquery/doc/examples.rst:449
#: ../../cadquery/doc/examples.rst:475
msgid ":ref:`selector_reference` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:422 ../../cadquery/doc/examples.rst:545
#: ../../cadquery/doc/examples.rst:649 ../../cadquery/doc/examples.rst:708
#: ../../cadquery/doc/examples.rst:820 ../../cadquery/doc/examples.rst:859
#: ../../cadquery/doc/examples.rst:960
msgid ":py:meth:`Workplane.workplane`"
msgstr ""

#: ../../cadquery/doc/examples.rst:427
msgid "Locating a Workplane on a vertex"
msgstr ""

#: ../../cadquery/doc/examples.rst:429
msgid ""
"Normally, the :py:meth:`Workplane.workplane` method requires a face to be "
"selected. But if a vertex is selected **immediately after a face**, "
":py:meth:`Workplane.workplane` will locate the workplane on the face, with "
"the origin at the vertex instead of at the center of the face"
msgstr ""

#: ../../cadquery/doc/examples.rst:433
msgid ""
"The example also introduces :py:meth:`Workplane.cutThruAll`, which makes a "
"cut through the entire part, no matter how deep the part is"
msgstr ""

#: ../../cadquery/doc/examples.rst:447
msgid ":py:meth:`Workplane.cutThruAll` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:450
msgid ":py:meth:`Workplane.vertices` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:456
msgid "Offset Workplanes"
msgstr ""

#: ../../cadquery/doc/examples.rst:458
msgid ""
"Workplanes do not have to lie exactly on a face. When you make a workplane, "
"you can define it at an offset from an existing face."
msgstr ""

#: ../../cadquery/doc/examples.rst:461
msgid ""
"This example uses an offset workplane to make a compound object, which is "
"perfectly valid!"
msgstr ""

#: ../../cadquery/doc/examples.rst:480
msgid "Copying Workplanes"
msgstr ""

#: ../../cadquery/doc/examples.rst:482
msgid "An existing CQ object can copy a workplane from another CQ object."
msgstr ""

#: ../../cadquery/doc/examples.rst:505
msgid "Rotated Workplanes"
msgstr ""

#: ../../cadquery/doc/examples.rst:507
msgid ""
"You can create a rotated work plane by specifying angles of rotation "
"relative to another workplane"
msgstr ""

#: ../../cadquery/doc/examples.rst:520
msgid ":py:meth:`Workplane.transformed` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:526
msgid "Using construction Geometry"
msgstr ""

#: ../../cadquery/doc/examples.rst:528
msgid ""
"You can draw shapes to use the vertices as points to locate other features."
"  Features that are used to locate other features, rather than to create "
"them, are called ``Construction Geometry``"
msgstr ""

#: ../../cadquery/doc/examples.rst:531
msgid ""
"In the example below, a rectangle is drawn, and its vertices are used to "
"locate a set of holes."
msgstr ""

#: ../../cadquery/doc/examples.rst:543
msgid ":py:meth:`Workplane.rect` (forConstruction=True)"
msgstr ""

#: ../../cadquery/doc/examples.rst:544 ../../cadquery/doc/examples.rst:592
msgid ":ref:`selector_reference`"
msgstr ""

#: ../../cadquery/doc/examples.rst:547 ../../cadquery/doc/examples.rst:967
msgid ":py:meth:`Workplane.hole`"
msgstr ""

#: ../../cadquery/doc/examples.rst:551
msgid "Shelling To Create Thin features"
msgstr ""

#: ../../cadquery/doc/examples.rst:553
msgid "Shelling converts a solid object into a shell of uniform thickness."
msgstr ""

#: ../../cadquery/doc/examples.rst:555
msgid ""
"To shell an object and 'hollow out' the inside pass a negative thickness "
"parameter to the :py:meth:`Workplane.shell()` method of a shape."
msgstr ""

#: ../../cadquery/doc/examples.rst:562
msgid ""
"A positive thickness parameter wraps an object with filleted outside edges "
"and the original object will be the 'hollowed out' portion."
msgstr ""

#: ../../cadquery/doc/examples.rst:569
msgid ""
"Use face selectors to select a face to be removed from the resulting hollow "
"shape."
msgstr ""

#: ../../cadquery/doc/examples.rst:575
msgid "Multiple faces can be removed using more complex selectors."
msgstr ""

#: ../../cadquery/doc/examples.rst:591
msgid ":py:meth:`Workplane.shell` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:598
msgid "Making Lofts"
msgstr ""

#: ../../cadquery/doc/examples.rst:600
msgid ""
"A loft is a solid swept through a set of wires. This example creates lofted "
"section between a rectangle and a circular section."
msgstr ""

#: ../../cadquery/doc/examples.rst:614
msgid ":py:meth:`Workplane.loft` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:621
msgid "Making Counter-bored and Counter-sunk Holes"
msgstr ""

#: ../../cadquery/doc/examples.rst:623
msgid ""
"Counterbored and countersunk holes are so common that CadQuery creates "
"macros to create them in a single step."
msgstr ""

#: ../../cadquery/doc/examples.rst:625
msgid ""
"Similar to :py:meth:`Workplane.hole`, these functions operate on a list of "
"points as well as a single point."
msgstr ""

#: ../../cadquery/doc/examples.rst:645
msgid ":py:meth:`Workplane.cboreHole` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:646
msgid ":py:meth:`Workplane.cskHole` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:650 ../../cadquery/doc/examples.rst:709
#: ../../cadquery/doc/examples.rst:860 ../../cadquery/doc/examples.rst:958
msgid ":py:meth:`Workplane.vertices`"
msgstr ""

#: ../../cadquery/doc/examples.rst:655
msgid "Offsetting wires in 2D"
msgstr ""

#: ../../cadquery/doc/examples.rst:657
msgid ""
"Two dimensional wires can be transformed with :py:meth:`Workplane.offset2D`."
" They can be offset inwards or outwards, and with different techniques for "
"extending the corners."
msgstr ""

#: ../../cadquery/doc/examples.rst:674
msgid ""
"Using the forConstruction argument you can do the common task of offsetting "
"a series of bolt holes from the outline of an object. Here is the "
"counterbore example from above but with the bolt holes offset from the "
"edges."
msgstr ""

#: ../../cadquery/doc/examples.rst:692
msgid ""
"Note that :py:meth:`Workplane.edges` is for selecting objects. It does not "
"add the selected edges to pending edges in the modelling context, because "
"this would result in your next extrusion including everything you had only "
"selected in addition to the lines you had drawn. To specify you want these "
"edges to be used in :py:meth:`Workplane.offset2D`, you call "
":py:meth:`Workplane.toPending` to explicitly put them in the list of pending"
" edges."
msgstr ""

#: ../../cadquery/doc/examples.rst:703
msgid ":py:meth:`Workplane.offset2D` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:704 ../../cadquery/doc/examples.rst:965
msgid ":py:meth:`Workplane.cboreHole`"
msgstr ""

#: ../../cadquery/doc/examples.rst:705 ../../cadquery/doc/examples.rst:966
msgid ":py:meth:`Workplane.cskHole`"
msgstr ""

#: ../../cadquery/doc/examples.rst:707
msgid ":py:meth:`Workplane.polygon`"
msgstr ""

#: ../../cadquery/doc/examples.rst:710 ../../cadquery/doc/examples.rst:733
#: ../../cadquery/doc/examples.rst:959
msgid ":py:meth:`Workplane.edges`"
msgstr ""

#: ../../cadquery/doc/examples.rst:716
msgid "Rounding Corners with Fillet"
msgstr ""

#: ../../cadquery/doc/examples.rst:718
msgid ""
"Filleting is done by selecting the edges of a solid, and using the fillet "
"function."
msgstr ""

#: ../../cadquery/doc/examples.rst:720
msgid "Here we fillet all of the edges of a simple plate."
msgstr ""

#: ../../cadquery/doc/examples.rst:731
msgid ":py:meth:`Workplane.fillet` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:737
msgid "Tagging objects"
msgstr ""

#: ../../cadquery/doc/examples.rst:739
msgid ""
"The :py:meth:`Workplane.tag` method can be used to tag a particular object "
"in the chain with a string, so that it can be refered to later in the chain."
msgstr ""

#: ../../cadquery/doc/examples.rst:741
msgid ""
"The :py:meth:`Workplane.workplaneFromTagged` method applies "
":py:meth:`Workplane.copyWorkplane` to a tagged object. For example, when "
"extruding two different solids from a surface, after the first solid is "
"extruded it can become difficult to reselect the original surface with "
"CadQuery's other selectors."
msgstr ""

#: ../../cadquery/doc/examples.rst:756
msgid ""
"Tags can also be used with most selectors, including "
":py:meth:`Workplane.vertices`, :py:meth:`Workplane.faces`, "
":py:meth:`Workplane.edges`, :py:meth:`Workplane.wires`, "
":py:meth:`Workplane.shells`, :py:meth:`Workplane.solids` and "
":py:meth:`Workplane.compounds`."
msgstr ""

#: ../../cadquery/doc/examples.rst:774
msgid ":py:meth:`Workplane.tag` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:775
msgid ":py:meth:`Workplane.getTagged` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:776
msgid ":py:meth:`Workplane.workplaneFromTagged` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:778 ../../cadquery/doc/examples.rst:819
msgid ":py:meth:`Workplane.cutThruAll`"
msgstr ""

#: ../../cadquery/doc/examples.rst:784
msgid "A Parametric Bearing Pillow Block"
msgstr ""

#: ../../cadquery/doc/examples.rst:786
msgid ""
"Combining a few basic functions, its possible to make a very good parametric"
" bearing pillow block, with just a few lines of code."
msgstr ""

#: ../../cadquery/doc/examples.rst:800
msgid "Splitting an Object"
msgstr ""

#: ../../cadquery/doc/examples.rst:802
msgid ""
"You can split an object using a workplane, and retain either or both halves"
msgstr ""

#: ../../cadquery/doc/examples.rst:816
msgid ":py:meth:`Workplane.split` **!**"
msgstr ""

#: ../../cadquery/doc/examples.rst:824
msgid "The Classic OCC Bottle"
msgstr ""

#: ../../cadquery/doc/examples.rst:826
msgid ""
"CadQuery is based on the OpenCascade.org (OCC) modeling Kernel.  Those who "
"are familiar with OCC know about the famous 'bottle' example. `The bottle "
"example in the OCCT online documentation "
"<https://old.opencascade.com/doc/occt-7.5.0/overview/html/occt__tutorial.html>`_."
msgstr ""

#: ../../cadquery/doc/examples.rst:829
msgid ""
"A pythonOCC version is listed `here <https://github.com/tpaviot/pythonocc-"
"demos/blob/f3ea9b4f65a9dff482be04b153d4ce5ec2430e13/examples/core_classic_occ_bottle.py>`_."
msgstr ""

#: ../../cadquery/doc/examples.rst:831
msgid ""
"Of course one difference between this sample and the OCC version is the "
"length. This sample is one of the longer ones at 13 lines, but that's very "
"short compared to the pythonOCC version, which is 10x longer!"
msgstr ""

#: ../../cadquery/doc/examples.rst:857
msgid ":py:meth:`Workplane.mirrorX`"
msgstr ""

#: ../../cadquery/doc/examples.rst:861
msgid ":py:meth:`Workplane.vLine`"
msgstr ""

#: ../../cadquery/doc/examples.rst:866
msgid "A Parametric Enclosure"
msgstr ""

#: ../../cadquery/doc/examples.rst:956
msgid ":py:meth:`Workplane.all`"
msgstr ""

#: ../../cadquery/doc/examples.rst:961
msgid ":py:meth:`Workplane.fillet`"
msgstr ""

#: ../../cadquery/doc/examples.rst:962
msgid ":py:meth:`Workplane.cut`"
msgstr ""

#: ../../cadquery/doc/examples.rst:964
msgid ":py:meth:`Workplane.rotateAboutCenter`"
msgstr ""

#: ../../cadquery/doc/examples.rst:970
msgid "Lego Brick"
msgstr ""

#: ../../cadquery/doc/examples.rst:972
msgid ""
"This script will produce any size regular rectangular Lego(TM) brick. Its "
"only tricky because of the logic regarding the underside of the brick."
msgstr ""

#: ../../cadquery/doc/examples.rst:1032
msgid "Braille Example"
msgstr ""

#: ../../cadquery/doc/examples.rst:1214
msgid "Panel With Various Connector Holes"
msgstr ""

#: ../../cadquery/doc/examples.rst:1262
msgid "Cycloidal gear"
msgstr ""

#: ../../cadquery/doc/examples.rst:1264
msgid ""
"You can define complex geometries using the parametricCurve functionality. "
"This specific examples generates a helical cycloidal gear."
msgstr ""
