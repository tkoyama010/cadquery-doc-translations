# SOME DESCRIPTIVE TITLE.
# Copyright (C) CadQuery Development Team
# This file is distributed under the same license as the CadQuery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CadQuery 2.7.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-08 00:07+0000\n"
"PO-Revision-Date: 2021-05-27 10:39+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2022\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/121077/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../cadquery/doc/primer.rst:6
msgid "Concepts"
msgstr ""

#: ../../cadquery/doc/primer.rst:10
msgid "3D BREP Topology Concepts"
msgstr "3D BREPトポロジーコンセプト"

#: ../../cadquery/doc/primer.rst:11
msgid ""
"Before talking about CadQuery, it makes sense to talk a little about 3D CAD "
"topology. CadQuery is based upon the OpenCascade kernel, which uses Boundary"
" Representations (BREP) for objects.  This just means that objects are "
"defined by their enclosing surfaces."
msgstr ""
"CadQueryについて話す前に、3次元CADのトポロジーについて少し話しておくことは意味があることです。CadQueryはOpenCascadeカーネルをベースにしており、オブジェクトにはBoundary"
" Representations（BREP）を使用します。 これは、オブジェクトがその周囲を取り囲むサーフェスによって定義されることを意味します。"

#: ../../cadquery/doc/primer.rst:15
msgid ""
"When working in a BREP system, these fundamental constructs exist to define "
"a shape (working up the food chain):"
msgstr "BREPシステムで作業する場合、これらの基本構成は形状を定義するために存在します（食物連鎖の上への作業）。"

#: ../../cadquery/doc/primer.rst:0
msgid "vertex"
msgstr "vertex"

#: ../../cadquery/doc/primer.rst:17
msgid "a single point in space"
msgstr "空間上の一点"

#: ../../cadquery/doc/primer.rst:0
msgid "edge"
msgstr "edge"

#: ../../cadquery/doc/primer.rst:18
msgid ""
"a connection between two or more vertices along a particular path (called a "
"curve)"
msgstr "特定の経路に沿った2つ以上の頂点の間の接続（曲線と呼ばれます）。"

#: ../../cadquery/doc/primer.rst:0
msgid "wire"
msgstr "wire"

#: ../../cadquery/doc/primer.rst:19
msgid "a collection of edges that are connected together."
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "face"
msgstr ""

#: ../../cadquery/doc/primer.rst:20
msgid "a set of edges or wires that enclose a surface"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "shell"
msgstr ""

#: ../../cadquery/doc/primer.rst:21
msgid ""
"a collection of faces that are connected together along some of their edges"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "solid"
msgstr ""

#: ../../cadquery/doc/primer.rst:22
msgid "a shell that has a closed interior"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "compound"
msgstr ""

#: ../../cadquery/doc/primer.rst:23
msgid "a collection of solids"
msgstr ""

#: ../../cadquery/doc/primer.rst:25
msgid ""
"When using CadQuery, all of these objects are created, hopefully with the "
"least possible work. In the actual CAD kernel, there is another set of "
"Geometrical constructs involved as well. For example, an arc-shaped edge "
"will hold a reference to an underlying curve that is a full circle, and each"
" linear edge holds underneath it the equation for a line.  CadQuery shields "
"you from these constructs."
msgstr ""

#: ../../cadquery/doc/primer.rst:31
msgid "CadQuery API layers"
msgstr ""

#: ../../cadquery/doc/primer.rst:33
msgid ""
"Once you start to dive a bit more into CadQuery, you may find yourself a bit"
" confused juggling between different types of objects the CadQuery APIs can "
"return. This chapter aims to give an explanation on this topic and to "
"provide background on the underlying implementation and kernel layers so you"
" can leverage more of CadQuery functionality."
msgstr ""

#: ../../cadquery/doc/primer.rst:36
msgid ""
"CadQuery is composed of 4 different API, which are implemented on top of "
"each other."
msgstr ""

#: ../../cadquery/doc/primer.rst:38 ../../cadquery/doc/primer.rst:51
msgid "The Fluent API"
msgstr ""

#: ../../cadquery/doc/primer.rst:39
msgid ":class:`~cadquery.Workplane`"
msgstr ""

#: ../../cadquery/doc/primer.rst:40
msgid ":class:`~cadquery.Sketch`"
msgstr ""

#: ../../cadquery/doc/primer.rst:41
msgid ":class:`~cadquery.Assembly`"
msgstr ""

#: ../../cadquery/doc/primer.rst:42 ../../cadquery/doc/primer.rst:81
msgid "The Direct API"
msgstr ""

#: ../../cadquery/doc/primer.rst:43 ../../cadquery/doc/primer.rst:89
msgid ":class:`~cadquery.Shape`"
msgstr ""

#: ../../cadquery/doc/primer.rst:44
msgid "The Geometry API"
msgstr ""

#: ../../cadquery/doc/primer.rst:45
msgid ":class:`~cadquery.Vector`"
msgstr ""

#: ../../cadquery/doc/primer.rst:46
msgid ":class:`~cadquery.Plane`"
msgstr ""

#: ../../cadquery/doc/primer.rst:47
msgid ":class:`~cadquery.Location`"
msgstr ""

#: ../../cadquery/doc/primer.rst:48 ../../cadquery/doc/primer.rst:116
msgid "The OCCT API"
msgstr ""

#: ../../cadquery/doc/primer.rst:53
msgid ""
"What we call the fluent API is what you work with when you first start using"
" CadQuery, the :class:`~cadquery.Workplane` class and all its methods "
"defines the Fluent API. This is the API you will use and see most of the "
"time, it's fairly easy to use and it simplifies a lot of things for you. A "
"classic example could be : ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:58
msgid ""
"Here we create a :class:`~cadquery.Workplane` object on which we "
"subsequently call several methods to create our part. A general way of "
"thinking about the Fluent API is to consider the "
":class:`~cadquery.Workplane` as your part object and all it's methods as "
"operations that will affect your part. Often you will start with an empty "
":class:`~cadquery.Workplane`, then add more features by calling "
":class:`~cadquery.Workplane` methods."
msgstr ""

#: ../../cadquery/doc/primer.rst:62
msgid ""
"This hierarchical structure of operations modifying a part is well seen with"
" the traditional code style used in CadQuery code. Code written with the "
"CadQuery fluent API will often look like this : ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:67
msgid "Or like this : ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:77
msgid ""
"While the first code style is what people default to, it's important to note"
" that when you write your code like this it's equivalent as writting it on a"
" single line. It's then more difficult to debug as you cannot visualize each"
" operation step by step, which is a functionality that is provided by the "
"CQ-Editor debugger for example."
msgstr ""

#: ../../cadquery/doc/primer.rst:83
msgid ""
"While the fluent API exposes much functionality, you may find scenarios that"
" require extra flexibility or require working with lower level objects."
msgstr ""

#: ../../cadquery/doc/primer.rst:85
msgid ""
"The direct API is the API that is called by the fluent API under the hood. "
"The 9 topological classes and their methods compose the direct API. These "
"classes actually wrap the equivalent Open CASCADE Technology (OCCT) classes."
" The 9 topological classes are :"
msgstr ""

#: ../../cadquery/doc/primer.rst:90
msgid ":class:`~cadquery.Compound`"
msgstr ""

#: ../../cadquery/doc/primer.rst:91
msgid ":class:`~cadquery.CompSolid`"
msgstr ""

#: ../../cadquery/doc/primer.rst:92
msgid ":class:`~cadquery.Solid`"
msgstr ""

#: ../../cadquery/doc/primer.rst:93
msgid ":class:`~cadquery.Shell`"
msgstr ""

#: ../../cadquery/doc/primer.rst:94
msgid ":class:`~cadquery.Face`"
msgstr ""

#: ../../cadquery/doc/primer.rst:95
msgid ":class:`~cadquery.Wire`"
msgstr ""

#: ../../cadquery/doc/primer.rst:96
msgid ":class:`~cadquery.Edge`"
msgstr ""

#: ../../cadquery/doc/primer.rst:97
msgid ":class:`~cadquery.Vertex`"
msgstr ""

#: ../../cadquery/doc/primer.rst:99
msgid ""
"Each class has its own methods to create and/or edit shapes of their "
"respective type. One can also use the :ref:`freefuncapi` to create and "
"modify shapes. As already explained in :ref:`cadquery_concepts` there is "
"also some kind of hierarchy in the topological classes. A Wire is made of "
"several edges which are themselves made of several vertices. This means you "
"can create geometry from the bottom up and have a lot of control over it."
msgstr ""

#: ../../cadquery/doc/primer.rst:102
msgid "For example we can create a circular face like so ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:108
msgid ""
"In CadQuery (and OCCT) all the topological classes are shapes, the "
":class:`~cadquery.Shape` class is the most abstract topological class. The "
"topological class inherits :class:`~cadquery.Mixin3D` or "
":class:`~cadquery.Mixin1D` which provide aditional methods that are shared "
"between the classes that inherits them."
msgstr ""

#: ../../cadquery/doc/primer.rst:111
msgid ""
"The direct API as its name suggests doesn't provide a parent/children data "
"structure, instead each method call directly returns an object of the "
"specified topological type. It is more verbose than the fluent API and more "
"tedious to work with, but as it offers more flexibility (you can work with "
"faces, which is something you can't do in the fluent API) it is sometimes "
"more convenient than the fluent API."
msgstr ""

#: ../../cadquery/doc/primer.rst:118
msgid ""
"Finally we are discussing about the OCCT API. The OCCT API is the lowest "
"level of CadQuery. The direct API is built upon the OCCT API, where the OCCT"
" API in CadQuery is available through OCP. OCP are the Python bindings of "
"the OCCT C++ libraries CadQuery uses. This means you have access to (almost)"
" all the OCCT C++ libraries in Python and in CadQuery. Working with the OCCT"
" API will give you the maximum flexibility and control over you designs, it "
"is however very verbose and difficult to use. You will need to have a strong"
" knowledge of the different C++ libraries to be able to achieve what you "
"want. To obtain this knowledge the most obvious ways are :"
msgstr ""

#: ../../cadquery/doc/primer.rst:123
msgid ""
"Read the direct API source code, since it is build upon the OCCT API it is "
"full of example usage."
msgstr ""

#: ../../cadquery/doc/primer.rst:124
msgid ""
"Go through the `C++ documentation "
"<https://dev.opencascade.org/doc/overview/html/>`_"
msgstr ""

#: ../../cadquery/doc/primer.rst:127
msgid "The general way of importing a specific class of the OCCT API is ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:131
msgid ""
"For example if you want to use the class `BRepPrimAPI_MakeBox "
"<https://dev.opencascade.org/doc/refman/html/class_b_rep_prim_a_p_i___make_box.html>`_."
" You will go by the following ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:136
msgid ""
"The package name of any class is written at the top of the documentation "
"page. Often it's written in the class name itself as a prefix."
msgstr ""

#: ../../cadquery/doc/primer.rst:139
msgid "Going back and forth between the APIs"
msgstr ""

#: ../../cadquery/doc/primer.rst:141
msgid ""
"While the 3 APIs provide 3 different layer of complexity and functionality "
"you can mix the 3 layers as you wish. Below is presented the different ways "
"you can interact with the different API layers."
msgstr ""

#: ../../cadquery/doc/primer.rst:146
msgid "Fluent API <=> Direct API"
msgstr ""

#: ../../cadquery/doc/primer.rst:150
msgid ""
"Here are all the possibilities you have to get an object from the Direct API"
" (i.e a topological object)."
msgstr ""

#: ../../cadquery/doc/primer.rst:152
msgid ""
"You can end the Fluent API call chain and get the last object on the stack "
"with :py:meth:`Workplane.val` alternatively you can get all the objects with"
" :py:meth:`Workplane.vals`"
msgstr ""

#: ../../cadquery/doc/primer.rst:165
msgid ""
"If you are only interested in getting the context solid of your Workplane, "
"you can use :py:meth:`Workplane.findSolid`:"
msgstr ""

#: ../../cadquery/doc/primer.rst:178
msgid ""
"If you want to go the other way around i.e using objects from the "
"topological API in the Fluent API here are your options :"
msgstr ""

#: ../../cadquery/doc/primer.rst:180
msgid ""
"You can pass a topological object as a base object to the "
":class:`~cadquery.Workplane` object. ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:188
msgid ""
"You can add a topological object as a new operation/step in the Fluent API "
"call chain with :py:meth:`Workplane.newObject` ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:199
msgid "Direct API <=> OCCT API"
msgstr ""

#: ../../cadquery/doc/primer.rst:201
msgid ""
"Every object of the Direct API stores its OCCT equivalent object in its "
":attr:`wrapped` attribute.:"
msgstr ""

#: ../../cadquery/doc/primer.rst:214
msgid ""
"If you want to cast an OCCT object into a Direct API one you can just pass "
"it as a parameter of the intended class:"
msgstr ""

#: ../../cadquery/doc/primer.rst:227
msgid ""
"You can cast into the direct API the types found `here "
"<https://dev.opencascade.org/doc/refman/html/class_topo_d_s___shape.html>`_"
msgstr ""

#: ../../cadquery/doc/primer.rst:230
msgid "Multimethods"
msgstr ""

#: ../../cadquery/doc/primer.rst:232
msgid ""
"CadQuery uses `Multimethod <https://coady.github.io/multimethod/>`_ to allow"
" a call to a method to be dispatched depending on the types of the "
"arguments. An example is :meth:`~cadquery.Sketch.arc`, where "
"``a_sketch.arc((1, 2), (2, 3))`` would be dispatched to one method but "
"``a_sketch.arc((1, 2), (2, 3), (3, 4))`` would be dispatched to a different "
"method. For multimethods to work, you should not use keyword arguments to "
"specify positional parameters. For example, you **should not** write "
"``a_sketch.arc(p1=(1, 2), p2=(2, 3), p3=(3, 4))``, instead you should use "
"the previous example. Note CadQuery makes an attempt to fall back on the "
"first registered multimethod in the event of a dispatch error, but it is "
"still best practice to not use keyword arguments to specify positional "
"arguments in CadQuery."
msgstr ""

#: ../../cadquery/doc/primer.rst:243
msgid "Selectors"
msgstr ""

#: ../../cadquery/doc/primer.rst:245
msgid ""
"Selectors allow you to select one or more features, in order to define new "
"features.  As an example, you might extrude a box, and then select the top "
"face as the location for a new feature.  Or, you might extrude a box, and "
"then select all of the vertical edges so that you can apply a fillet to "
"them."
msgstr ""

#: ../../cadquery/doc/primer.rst:249
msgid ""
"You can select Vertices, Edges, Faces, Solids, and Wires using selectors."
msgstr ""

#: ../../cadquery/doc/primer.rst:251
msgid ""
"Think of selectors as the equivalent of your hand and mouse, if you were to "
"build an object using a conventional CAD system."
msgstr ""

#: ../../cadquery/doc/primer.rst:253
msgid "See :ref:`selectors` to learn more."
msgstr ""

#: ../../cadquery/doc/primer.rst:257
msgid "Workplane class"
msgstr ""

#: ../../cadquery/doc/primer.rst:259
msgid ""
"The Workplane class contains the currently selected objects (a list of "
"Shapes, Vectors or Locations in the :attr:`~cadquery.Workplane.objects` "
"attribute), the modelling context (in the :attr:`~cadquery.Workplane.ctx` "
"attribute), and CadQuery's fluent api methods. It is the main class that "
"users will instantiate."
msgstr ""

#: ../../cadquery/doc/primer.rst:264
msgid "See :ref:`apireference` to learn more."
msgstr ""

#: ../../cadquery/doc/primer.rst:268
msgid "Assemblies"
msgstr "アセンブリ"

#: ../../cadquery/doc/primer.rst:270
msgid ""
"Simple models can be combined into complex, possibly nested, assemblies."
msgstr ""

#: ../../cadquery/doc/primer.rst:274
msgid "A simple example could look as follows::"
msgstr ""

#: ../../cadquery/doc/primer.rst:294
msgid "Resulting in:"
msgstr ""

#: ../../cadquery/doc/primer.rst:298
msgid ""
"Note that the locations of the children parts are defined with respect to "
"their parents - in the above example ``part3`` will be located at (-5,-5,20)"
" in the global coordinate system. Assemblies with different colors can be "
"created this way and exported to STEP or the native OCCT xml format."
msgstr ""

#: ../../cadquery/doc/primer.rst:300
msgid "You can browse assembly related methods here: :ref:`assembly`."
msgstr ""

#: ../../cadquery/doc/primer.rst:303
msgid "Assemblies with constraints"
msgstr ""

#: ../../cadquery/doc/primer.rst:305
msgid ""
"Sometimes it is not desirable to define the component positions explicitly "
"but rather use constraints to obtain a fully parametric assembly. This can "
"be achieved in the following way::"
msgstr ""

#: ../../cadquery/doc/primer.rst:331
msgid ""
"This code results in identical object as one from the previous section. The "
"added benefit is that with changing parameters ``w``, ``d``, ``h`` the final"
" locations will be calculated automatically. It is admittedly dense and can "
"be made clearer using tags. Tags can be directly referenced when "
"constructing the constraints::"
msgstr ""

#: ../../cadquery/doc/primer.rst:364
msgid "The following constraints are currently implemented:"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "Axis"
msgstr ""

#: ../../cadquery/doc/primer.rst:366
msgid ""
"two normal vectors are anti-coincident or the angle (in radians) between "
"them is equal to the specified value. Can be defined for all entities with "
"consistent normal vector - planar faces, wires and edges."
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "Point"
msgstr ""

#: ../../cadquery/doc/primer.rst:367
msgid ""
"two points are coincident or separated by a specified distance. Can be "
"defined for all entities, center of mass is used for lines, faces, solids "
"and the vertex position for vertices."
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "Plane"
msgstr ""

#: ../../cadquery/doc/primer.rst:368
msgid "combination of :Axis: and :Point: constraints."
msgstr ""

#: ../../cadquery/doc/primer.rst:370
msgid "For a more elaborate assembly example see :ref:`assytutorial`."
msgstr ""
