# SOME DESCRIPTIVE TITLE.
# Copyright (C) Parametric Products Intellectual Holdings LLC, All Rights Reserved
# This file is distributed under the same license as the CadQuery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CadQuery 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-02 00:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cadquery/doc/classreference.rst:5
msgid "CadQuery Class Summary"
msgstr ""

#: ../../cadquery/doc/classreference.rst:7
msgid "This page documents all of the methods and functions of the CadQuery classes, organized alphabetically."
msgstr ""

#: ../../cadquery/doc/classreference.rst:11
msgid "For a listing organized by functional area, see the :ref:`apireference`"
msgstr ""

#: ../../cadquery/doc/classreference.rst:16
msgid "Core Classes"
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ":obj:`CQ <cadquery.CQ>`\\"
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid "alias of :class:`cadquery.cq.Workplane`"
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ":obj:`Workplane <cadquery.Workplane>`\\ \\(\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:1
msgid "Defines a coordinate system in space, in which 2D coordinates can be used."
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ":obj:`Assembly <cadquery.Assembly>`\\ \\(\\[obj\\, loc\\, name\\, color\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly:1
msgid "Nested assembly of Workplane and Shape objects defining their relative positions."
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
msgid ":obj:`Constraint <cadquery.Constraint>`\\ \\(objects\\, args\\, sublocs\\, kind\\[\\, param\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:24:<autosummary>:1
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint:1
msgid "Geometrical constraint between two shapes of an assembly."
msgstr ""

#: ../../cadquery/doc/classreference.rst:26
msgid "Topological Classes"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`Shape <cadquery.Shape>`\\ \\(obj\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid "Represents a shape in the system."
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`Vertex <cadquery.Vertex>`\\ \\(obj\\[\\, forConstruction\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Vertex:1
msgid "A Single Point in Space"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`Edge <cadquery.Edge>`\\ \\(obj\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge:1
msgid "A trimmed curve that represents the border of a face"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`cadquery.occ_impl.shapes.Mixin1D <cadquery.occ_impl.shapes.Mixin1D>`\\ \\(\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`Wire <cadquery.Wire>`\\ \\(obj\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire:1
msgid "A series of connected, ordered Edges, that typically bounds a Face"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`Face <cadquery.Face>`\\ \\(obj\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face:1
msgid "a bounded surface that represents part of the boundary of a solid"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`Shell <cadquery.Shell>`\\ \\(obj\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shell:1
msgid "the outer boundary of a surface"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`cadquery.occ_impl.shapes.Mixin3D <cadquery.occ_impl.shapes.Mixin3D>`\\ \\(\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`Solid <cadquery.Solid>`\\ \\(obj\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid:1
msgid "a single solid"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
msgid ":obj:`Compound <cadquery.Compound>`\\ \\(obj\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:40:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound:1
msgid "a collection of disconnected solids"
msgstr ""

#: ../../cadquery/doc/classreference.rst:42
msgid "Geometry Classes"
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid ":obj:`Vector <cadquery.Vector>`\\ \\(\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:1
msgid "Create a 3-dimensional vector"
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid ":obj:`Matrix <cadquery.Matrix>`\\ \\(\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix:1
msgid "A 3d , 4x4 transformation matrix."
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid ":obj:`Plane <cadquery.Plane>`\\ \\(origin\\[\\, xDir\\, normal\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane:1
msgid "A 2D coordinate system in space"
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid ":obj:`Location <cadquery.Location>`\\ \\(\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:50:<autosummary>:1
msgid "Location in 3D space."
msgstr ""

#: ../../cadquery/doc/classreference.rst:52
msgid "Selector Classes"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`Selector <cadquery.selectors.Selector>`\\ \\(\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.Selector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.Selector:1
msgid "Filters a list of objects."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`NearestToPointSelector <cadquery.selectors.NearestToPointSelector>`\\ \\(pnt\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.NearestToPointSelector:1
msgid "Selects object nearest the provided point."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`BoxSelector <cadquery.selectors.BoxSelector>`\\ \\(point0\\, point1\\[\\, boundingbox\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BoxSelector:1
msgid "Selects objects inside the 3D box defined by 2 points."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`BaseDirSelector <cadquery.selectors.BaseDirSelector>`\\ \\(vector\\[\\, tolerance\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector:1
msgid "A selector that handles selection on the basis of a single direction vector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`ParallelDirSelector <cadquery.selectors.ParallelDirSelector>`\\ \\(vector\\[\\, tolerance\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector:1
msgid "Selects objects parallel with the provided direction."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`DirectionSelector <cadquery.selectors.DirectionSelector>`\\ \\(vector\\[\\, tolerance\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector:1
msgid "Selects objects aligned with the provided direction."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`PerpendicularDirSelector <cadquery.selectors.PerpendicularDirSelector>`\\ \\(vector\\[\\, tolerance\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector:1
msgid "Selects objects perpendicular with the provided direction."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`TypeSelector <cadquery.selectors.TypeSelector>`\\ \\(typeString\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector:1
msgid "Selects objects having the prescribed geometry type."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`RadiusNthSelector <cadquery.selectors.RadiusNthSelector>`\\ \\(n\\[\\, directionMax\\, tolerance\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector:1
msgid "Select the object with the Nth radius."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`CenterNthSelector <cadquery.selectors.CenterNthSelector>`\\ \\(vector\\, n\\[\\, directionMax\\, ...\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector:1
msgid "Sorts objects into a list with order determined by the distance of their center projected onto the specified direction."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`DirectionMinMaxSelector <cadquery.selectors.DirectionMinMaxSelector>`\\ \\(vector\\[\\, ...\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionMinMaxSelector:1
msgid "Selects objects closest or farthest in the specified direction."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`DirectionNthSelector <cadquery.selectors.DirectionNthSelector>`\\ \\(vector\\, n\\[\\, ...\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector:1
msgid "Filters for objects parallel (or normal) to the specified direction then returns the Nth one."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`LengthNthSelector <cadquery.selectors.LengthNthSelector>`\\ \\(n\\[\\, directionMax\\, tolerance\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector:1
msgid "Select the object(s) with the Nth length"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`AreaNthSelector <cadquery.selectors.AreaNthSelector>`\\ \\(n\\[\\, directionMax\\, tolerance\\]\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:1
msgid "Selects the object(s) with Nth area"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`BinarySelector <cadquery.selectors.BinarySelector>`\\ \\(left\\, right\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Base class for selectors that operates with two other selectors."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`AndSelector <cadquery.selectors.AndSelector>`\\ \\(left\\, right\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Intersection selector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`SumSelector <cadquery.selectors.SumSelector>`\\ \\(left\\, right\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Union selector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`SubtractSelector <cadquery.selectors.SubtractSelector>`\\ \\(left\\, right\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Difference selector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`InverseSelector <cadquery.selectors.InverseSelector>`\\ \\(selector\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Inverts the selection of given selector."
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid ":obj:`StringSyntaxSelector <cadquery.selectors.StringSyntaxSelector>`\\ \\(selectorString\\)"
msgstr ""

#: ../../cadquery/doc/classreference.rst:78:<autosummary>:1
msgid "Filter lists objects using a simple string syntax."
msgstr ""

#: ../../cadquery/doc/classreference.rst:80
msgid "Class Details"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox:1
#: ../../cadquery/cadquery/occ_impl/assembly.py:docstring of cadquery.Color:1
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Location:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.Selector:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:1
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.Selector:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.save:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.__init__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.findOutsideBox2D:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.isInside:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.cut:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.fuse:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.intersect:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.makeCompound:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.makeText:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.__init__:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector.__init__:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector.test:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeLine:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.chamfer2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.fillet2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeFromWires:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeNSidedSurface:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.normalAt:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__getitem__:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector.test:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__init__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.rotated:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toLocalCoords:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toWorldCoords:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.BoundingBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CenterOfBoundBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenter:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenterOfBoundBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__init__:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.cast:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.centerOfMass:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.clean:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.computeMass:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.cut:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportBrep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStl:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fix:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fuse:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.importBrep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.intersect:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isEqual:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isSame:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.locate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.located:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mesh:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mirror:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.move:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.moved:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.rotate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.scale:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.split:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.toVtkPolyData:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformShape:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.translate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shell:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.interpPlate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.isSolid:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeCone:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeCylinder:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeLoft:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeSphere:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeTorus:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeWedge:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector.__init__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__eq__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.multiply:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.projectToPlane:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.projectToPlane:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Vertex:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Vertex.__init__:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.chamfer2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.fillet2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.makeCircle:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.makeEllipse:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.makeHelix:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.offset2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.stitch:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__add__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__and__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__or__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__sub__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.add:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.all:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.clean:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.close:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.consolidateWires:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.copyWorkplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutEach:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.exportSvg:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findFace:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.first:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.interpPlate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.interpPlate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.item:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.last:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.loft:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirror:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirror:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorX:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorY:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.move:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.move:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.moveTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.moveTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.newObject:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.offset2D:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polygon:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rarray:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.section:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tag:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toPending:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toSvg:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.transformed:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.translate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplaneFromTagged:0
#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.endPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.locationAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.locations:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.normal:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.paramAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.positionAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.positions:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.startPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.tangentAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.chamfer:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.fillet:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.isInside:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector.key:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector.filter:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector.key:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionMinMaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector.filter:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector.key:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector.key:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector:0
msgid "Parameters"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:1
msgid "construct an assembly"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:4
msgid "root object of the assembly (default: None)"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:6
msgid "location of the root object (default: None, interpreted as identity transformation)"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:8
msgid "unique name of the root object (default: None, reasulting in an UUID being generated)"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:10
msgid "color of the added object (default: None)"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.Center:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.normalAt:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.rotated:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toLocalCoords:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toWorldCoords:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Area:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.BoundingBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Center:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CenterOfBoundBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Closed:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CompSolids:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Compounds:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Edges:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Faces:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Shells:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Solids:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Vertices:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Volume:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Wires:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mirror:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.rotate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformShape:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.add:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.close:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.copyWorkplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findFace:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.largestDimension:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorX:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorY:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.newObject:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.offset2D:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polygon:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.section:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tag:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toPending:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toSvg:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.translate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.val:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vals:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplaneFromTagged:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.endPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.normal:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.paramAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.startPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.tangentAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.isInside:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "Returns"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:11
msgid "An Assembly object."
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:14
msgid "To create an empty assembly use::"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__init__:18
msgid "To create one constraint a root object::"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.__weakref__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.__weakref__:1
#: ../../cadquery/cadquery/occ_impl/assembly.py:docstring of cadquery.Color.__weakref__:1
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.__weakref__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Location.__weakref__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__weakref__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__weakref__:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.Selector.__weakref__:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__weakref__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__weakref__:1
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__weakref__:1
msgid "list of weak references to the object (if defined)"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.add:1
msgid "Add a subassembly to the current assembly."
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.constrain:1
msgid "Define a new constraint."
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.save:1
msgid "save as STEP or OCCT native XML file"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.save:4
msgid "filepath"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.save:6
msgid "export format (default: None, results in format being inferred form the path)"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.save:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.shapes:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.solve:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.toCompound:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.traverse:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.findOutsideBox2D:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.isInside:0
#: ../../cadquery/cadquery/occ_impl/assembly.py:docstring of cadquery.Color.toTuple:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.__iter__:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.cut:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.fuse:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.intersect:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.makeCompound:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.makeText:0
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.toPOD:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector.test:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.close:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.Center:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.chamfer2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.fillet2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeFromWires:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeNSidedSurface:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.normalAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.toPln:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Location.toTuple:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__getitem__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__repr__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.transposed_list:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector.test:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toWorldCoords:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Area:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.BoundingBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Center:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CenterOfBoundBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Closed:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenter:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenterOfBoundBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CompSolids:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Compounds:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Edges:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Faces:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Shells:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Solids:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Vertices:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Volume:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Wires:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__eq__:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__hash__:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.cast:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.centerOfMass:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.clean:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.computeMass:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.copy:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.cut:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportBrep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStl:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fix:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fuse:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.hashCode:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.importBrep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.intersect:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isEqual:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isNull:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isSame:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isValid:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.locate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.located:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.location:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mirror:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.move:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.moved:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.rotate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.scale:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.split:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.toVtkPolyData:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformShape:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.translate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.interpPlate:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.isSolid:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeBox:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeCone:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeCylinder:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeLoft:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeSphere:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeTorus:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeWedge:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.Center:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__eq__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__repr__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__str__:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.multiply:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.normalized:0
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.projectToPlane:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Vertex.Center:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.chamfer2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.close:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.fillet2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.makeHelix:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.offset2D:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.stitch:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__add__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__and__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__or__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__sub__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.all:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.clean:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.close:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.consolidateWires:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.copyWorkplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.exportSvg:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findFace:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.interpPlate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.largestDimension:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirror:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorX:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorY:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.move:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.moveTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.newObject:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.offset2D:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polygon:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rarray:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.section:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.size:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tag:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toPending:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toSvg:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.translate:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLineTo:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.val:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vals:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplaneFromTagged:0
#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.endPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.normal:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.paramAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.startPoint:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.tangentAt:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.isInside:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector.key:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector.filter:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector.key:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector.filter:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector.key:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector.test:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector.key:0
msgid "Return type"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.save:9
#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.solve:4
msgid ":py:class:`~cadquery.assembly.Assembly`"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.shapes:1
msgid "List of Shape objects in the .obj field"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.shapes:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector.filter:8
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector.filter:8
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Shape`]"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.solve:1
msgid "Solve the constraints."
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.toCompound:1
msgid "Returns a Compound made from this Assembly (including all children) with the current Locations applied. Usually this method would only be used after solving."
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.toCompound:5
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.makeCompound:8
msgid ":py:class:`~cadquery.occ_impl.shapes.Compound`"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.traverse:1
msgid "Yield (name, child) pairs in a bottom-up manner"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Assembly.traverse:4
msgid ":py:class:`~typing.Iterator`\\[:py:data:`~typing.Tuple`\\[:py:class:`str`, :py:class:`~cadquery.assembly.Assembly`]]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox:1
msgid "A BoundingBox for an object or set of objects. Wraps the OCP one"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.__init__:1
#: ../../cadquery/cadquery/occ_impl/assembly.py:docstring of cadquery.Color.__init__:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector.__init__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Location.__init__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__init__:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector.__init__:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__init__:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector.__init__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__init__:1
msgid "Initialize self.  See help(type(self)) for accurate signature."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:1
msgid "Returns a modified (expanded) bounding box"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:7
msgid "obj can be one of several things:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:4
msgid "a 3-tuple corresponding to x,y, and z amounts to add"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:5
msgid "a vector, containing the x,y,z values to add"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:6
msgid "another bounding box, where a new box will be created that encloses both."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:9
msgid "This bounding box is not changed."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.add:16
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.BoundingBox:5
msgid ":py:class:`~cadquery.occ_impl.geom.BoundBox`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.findOutsideBox2D:1
msgid "Compares bounding boxes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.findOutsideBox2D:3
msgid "Compares bounding boxes. Returns none if neither is inside the other. Returns the outer one if either is outside the other."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.findOutsideBox2D:6
msgid "BoundBox.isInside works in 3d, but this is a 2d bounding box, so it doesn't work correctly plus, there was all kinds of rounding error in the built-in implementation i do not understand."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.findOutsideBox2D:15
msgid ":py:data:`~typing.Optional`\\[:py:class:`~cadquery.occ_impl.geom.BoundBox`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.isInside:1
msgid "Is the provided bounding box inside this one?"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.BoundBox.isInside:6
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector.test:6
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector.test:6
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector.test:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Closed:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__eq__:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportBrep:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStl:14
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isEqual:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isNull:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isSame:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isValid:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.isSolid:6
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__eq__:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.isInside:8
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector.test:6
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector.test:6
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector.test:6
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector.test:6
msgid ":py:class:`bool`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.py:docstring of cadquery.Color:1
msgid "Wrapper for the OCCT color object Quantity_ColorRGBA."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.py:docstring of cadquery.Color.toTuple:1
msgid "Convert Color to RGB tuple."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/assembly.py:docstring of cadquery.Color.toTuple:4
msgid ":py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`, :py:class:`float`, :py:class:`float`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid:1
msgid "Bases: :class:`cadquery.occ_impl.shapes.Shape`, :class:`cadquery.occ_impl.shapes.Mixin3D`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.__iter__:1
msgid "Iterate over subshapes."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.__iter__:5
msgid ":py:class:`~typing.Iterator`\\[:py:class:`~cadquery.occ_impl.shapes.Shape`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.cut:1
msgid "Remove a shape from another one"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.cut:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.fuse:10
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.intersect:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.makeText:24
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.cast:10
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.copy:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.cut:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fuse:12
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.importBrep:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.intersect:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.located:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mirror:9
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.moved:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.scale:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.split:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:13
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformShape:5
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeSphere:19
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:17
msgid ":py:class:`~cadquery.occ_impl.shapes.Shape`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.fuse:1
msgid "Fuse shapes together"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.intersect:1
msgid "Construct shape intersection"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.makeCompound:1
msgid "Create a compound out of a list of shapes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Compound.makeText:1
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:1
msgid "Create a 3D text"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.__init__:1
msgid "Construct a constraint."
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.__init__:4
msgid "object names referenced in the constraint"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.__init__:6
msgid "subshapes (e.g. faces or edges) of the objects"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.__init__:8
msgid "locations of the objects (only relevant if the objects are nested in a sub-assembly)"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.__init__:10
msgid "constraint kind"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.__init__:12
msgid "optional arbitrary parameter passed to the solver"
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.toPOD:1
msgid "Convert the constraint to a representation used by the solver."
msgstr ""

#: ../../cadquery/cadquery/assembly.py:docstring of cadquery.Constraint.toPOD:4
msgid ":py:data:`~typing.Tuple`\\[:py:data:`~typing.Tuple`\\[:py:data:`~typing.Union`\\[:py:class:`~OCP.gp.gp_Pln`, :py:class:`~OCP.gp.gp_Dir`, :py:class:`~OCP.gp.gp_Pnt`], ...], :py:data:`~typing.Tuple`\\[:py:data:`~typing.Union`\\[:py:class:`~OCP.gp.gp_Pln`, :py:class:`~OCP.gp.gp_Dir`, :py:class:`~OCP.gp.gp_Pnt`, :py:obj:`None`], ...], :py:data:`~typing.Optional`\\[:py:data:`~typing.Any`]]"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionMinMaxSelector:1
msgid "Bases: :class:`cadquery.selectors.CenterNthSelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionMinMaxSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector:5
msgid "Applicability:"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionMinMaxSelector:4
msgid "All object types. for a vertex, its point is used. for all other kinds of objects, the center of mass of the object is used."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector:7
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionMinMaxSelector:7
msgid "You can use the string shortcuts >(X|Y|Z) or <(X|Y|Z) if you want to select based on a cardinal direction."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector:10
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionMinMaxSelector:10
msgid "For example this::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionMinMaxSelector:14
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionMinMaxSelector:14
msgid "Means to select the face having the center of mass farthest in the positive z direction, and is the same as::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector:1
msgid "Bases: :class:`cadquery.selectors.BaseDirSelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector:4
msgid "Linear Edges Planar Faces"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector:7
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector:7
msgid "Use the string syntax shortcut +/-(X|Y|Z) if you want to select based on a cardinal direction."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector:9
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector:9
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector:9
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector:10
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__and__:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__or__:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__sub__:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BoxSelector:9
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector:9
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.NearestToPointSelector:9
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector:9
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector:10
msgid "Example::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector:13
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector:13
msgid "selects faces with the normal in the z direction, and is equivalent to::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.DirectionSelector.test:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector.test:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector.test:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector.test:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionSelector.test:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector.test:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector.test:1
msgid "Test a specified vector. Subclasses override to provide other implementations"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire:1
msgid "Bases: :class:`cadquery.occ_impl.shapes.Shape`, :class:`cadquery.occ_impl.shapes.Mixin1D`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.close:1
msgid "Close an Edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.close:4
msgid ":py:data:`~typing.Union`\\[:py:class:`~cadquery.occ_impl.shapes.Edge`, :py:class:`~cadquery.occ_impl.shapes.Wire`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:1
msgid "Makes an Ellipse centered at the provided point, having normal in the provided direction."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:5
msgid "x radius of the ellipse (along the x-axis of plane the ellipse should lie in)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:8
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:7
msgid "y radius of the ellipse (along the y-axis of plane the ellipse should lie in)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:10
msgid "vector representing the center of the ellipse"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:12
msgid "vector representing the direction of the plane the ellipse should lie in"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:14
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:9
msgid "start angle of arc"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:16
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:11
msgid "end angle of arc (angle2 == angle1 return closed ellipse = default)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:18
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:15
msgid "clockwise (-1) or counter clockwise (1)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:19
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:23
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:13
msgid ":py:class:`~cadquery.occ_impl.shapes.Edge`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeEllipse:20
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:24
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:14
msgid "an Edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeLine:1
msgid "Create a line between two points :type v1: :py:class:`~cadquery.occ_impl.geom.Vector` :param v1: Vector that represents the first point :type v2: :py:class:`~cadquery.occ_impl.geom.Vector` :param v2: Vector that represents the second point :rtype: :py:class:`~cadquery.occ_impl.shapes.Edge` :return: A linear edge between the two provided points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:1
msgid "Interpolate a spline through the provided points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:4
msgid "a list of Vectors that represent the points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:6
msgid "tuple of Vectors specifying start and finish tangent"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:8
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:19
msgid "creation of periodic curves"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:10
msgid "the value of the parameter at each interpolation point. (The interpolated curve is represented as a vector-valued function of a scalar parameter.) If periodic == True, then len(parameters) must be len(intepolation points) + 1, otherwise len(parameters) must be equal to len(interpolation points)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:15
msgid "whether to scale the specified tangent vectors before interpolating. Each tangent is scaled, so it's length is equal to the derivative of the Lagrange interpolated curve. I.e., set this to True, if you want to use only the direction of the tangent vectors specified by ``tangents``, but not their magnitude."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSpline:20
msgid "tolerance of the algorithm (consult OCC documentation). Used to check that the specified points are not too close to each other, and that tangent vectors are not too short. (In either case interpolation may fail.)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:1
msgid "Approximate a spline through the provided points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:6
msgid "tolerance of the algorithm (consult OCC documentation)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:8
msgid "optional tuple of 3 weights use for variational smoothing (default: None)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:10
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:10
msgid "minimum spline degree. Enforced only when smothing is None (default: 1)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeSplineApprox:12
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:12
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:17
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:10
msgid "maximum spline degree (default: 6)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeTangentArc:1
msgid "Makes a tangent arc from point v1, in the direction of v2 and ends at v3. :type cls: :py:class:`~typing.Type`\\[:py:class:`~cadquery.occ_impl.shapes.Edge`] :param cls: :type v1: :py:class:`~cadquery.occ_impl.geom.Vector` :param v1: start vector :type v2: :py:class:`~cadquery.occ_impl.geom.Vector` :param v2: tangent vector :type v3: :py:class:`~cadquery.occ_impl.geom.Vector` :param v3: end vector :rtype: :py:class:`~cadquery.occ_impl.shapes.Edge` :return: an edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Edge.makeThreePointArc:1
msgid "Makes a three point arc through the provided points :type cls: :py:class:`~typing.Type`\\[:py:class:`~cadquery.occ_impl.shapes.Edge`] :param cls: :type v1: :py:class:`~cadquery.occ_impl.geom.Vector` :param v1: start vector :type v2: :py:class:`~cadquery.occ_impl.geom.Vector` :param v2: middle vector :type v3: :py:class:`~cadquery.occ_impl.geom.Vector` :param v3: end vector :rtype: :py:class:`~cadquery.occ_impl.shapes.Edge` :return: an edge object through the three points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shell:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Vertex:1
msgid "Bases: :class:`cadquery.occ_impl.shapes.Shape`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.Center:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.normalAt:3
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toWorldCoords:5
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Center:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CenterOfBoundBox:3
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenter:7
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenterOfBoundBox:7
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.centerOfMass:7
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.Center:9
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.multiply:6
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.normalized:4
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.projectToPlane:10
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Vertex.Center:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.endPoint:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.normal:3
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.startPoint:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.tangentAt:7
msgid ":py:class:`~cadquery.occ_impl.geom.Vector`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.Center:2
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Center:2
msgid "The point of the center of mass of this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.chamfer2D:1
msgid "Apply 2D chamfer to a face"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.chamfer2D:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.fillet2D:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeFromWires:10
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeNSidedSurface:58
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:13
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findFace:8
msgid ":py:class:`~cadquery.occ_impl.shapes.Face`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.fillet2D:1
msgid "Apply 2D fillet to a face"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeFromWires:1
msgid "Makes a planar face from one or more wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeNSidedSurface:1
msgid "Returns a surface enclosed by a closed polygon defined by 'edges' and going through 'points'. :param points :type points: list of gp_Pnt :param edges :type edges: list of Edge :param continuity=GeomAbs_C0 :type continuity: OCC.Core.GeomAbs continuity condition :param Degree = 3 (OCCT default) :type Degree: Integer >= 2 :param NbPtsOnCur = 15 (OCCT default) :type: NbPtsOnCur Integer >= 15 :param NbIter = 2 (OCCT default) :type: NbIterInteger >= 2 :param Anisotropie = False (OCCT default) :type Anisotropie: Boolean :param: Tol2d = 0.00001 (OCCT default) :type Tol2d: float > 0 :param Tol3d = 0.0001 (OCCT default) :type Tol3dReal: float > 0 :param TolAng = 0.01 (OCCT default) :type TolAngReal: float > 0 :param TolCurv = 0.1 (OCCT default) :type TolCurvReal: float > 0 :param MaxDeg = 8 (OCCT default) :type MaxDegInteger: Integer >= 2 (?) :param MaxSegments = 9 (OCCT default) :type MaxSegments: Integer >= 2 (?)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeRuledSurface:1
msgid "'makeRuledSurface(Edge|Wire,Edge|Wire) -- Make a ruled surface Create a ruled surface out of two edges or wires. If wires are used then these must have the same number of edges"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:1
msgid "Approximate a spline surface through the provided points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:4
msgid "a 2D list of Vectors that represent the points"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.makeSplineApprox:14
msgid "an Face"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.normalAt:1
msgid "Computes the normal vector at the desired location on the face."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.normalAt:4
msgid "a  vector representing the direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.normalAt:6
msgid "the location to compute the normal at. If none, the center of the face is used."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.toPln:1
msgid "Convert this face to a gp_Pln."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.toPln:3
msgid "Note the Location of the resulting plane may not equal the center of this face, however the resulting plane will still contain the center of this face."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Face.toPln:7
msgid ":py:class:`~OCP.gp.gp_Pln`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Location:1
msgid "Location in 3D space. Depending on usage can be absolute or relative."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Location:3
msgid "This class wraps the TopLoc_Location class from OCCT. It can be used to move Shape objects in both relative and absolute manner. It is the preferred type to locate objects in CQ."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Location.toTuple:1
msgid "Convert the location to a translation, rotation tuple."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Location.toTuple:4
msgid ":py:data:`~typing.Tuple`\\[:py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`, :py:class:`float`], :py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`, :py:class:`float`]]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix:3
msgid "Used to move geometry in space."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix:5
msgid "The provided \"matrix\" parameter may be None, a gp_GTrsf, or a nested list of values."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix:8
msgid "If given a nested list, it is expected to be of the form:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix:12
msgid "[[m11, m12, m13, m14],"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix:11
msgid "[m21, m22, m23, m24], [m31, m32, m33, m34]]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix:14
msgid "A fourth row may be given, but it is expected to be: [0.0, 0.0, 0.0, 1.0] since this is a transform matrix."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__getitem__:1
msgid "Provide Matrix[r, c] syntax for accessing individual values. The row and column parameters start at zero, which is consistent with most python libraries, but is counter to gp_GTrsf(), which is 1-indexed."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__getitem__:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Area:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Volume:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.computeMass:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.largestDimension:7
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.paramAt:5
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector.key:8
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector.key:8
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector.key:8
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector.key:8
msgid ":py:class:`float`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__repr__:1
msgid "Generate a valid python expression representing this Matrix"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.__repr__:4
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__repr__:4
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__str__:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toSvg:8
msgid ":py:class:`str`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.transposed_list:1
msgid "Needed by the cqparts gltf exporter"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Matrix.transposed_list:5
msgid ":py:class:`~typing.Sequence`\\[:py:class:`float`]"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BinarySelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BoxSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.InverseSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.NearestToPointSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector:1
msgid "Bases: :class:`cadquery.selectors.Selector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.NearestToPointSelector:3
msgid "If the object is a vertex or point, the distance is used. For other kinds of shapes, the center of mass is used to to compute which is closest."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector:7
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.NearestToPointSelector:7
msgid "Applicability: All Types of Shapes"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector:13
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.NearestToPointSelector:13
msgid "returns the vertex of the unit cube closest to the point x=0,y=1,z=0"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.Selector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BinarySelector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BoxSelector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.InverseSelector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.NearestToPointSelector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.Selector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector.filter:1
msgid "Filter the provided list."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.NearestToPointSelector.filter:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.Selector.filter:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BinarySelector.filter:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BoxSelector.filter:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.InverseSelector.filter:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.NearestToPointSelector.filter:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.Selector.filter:3
msgid "The default implementation returns the original list unfiltered. :param objectList: list to filter :type objectList: list of OCCT primitives :return: filtered list"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector:7
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector:7
msgid "Use the string syntax shortcut \\|(X|Y|Z) if you want to select based on a cardinal direction."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.ParallelDirSelector:13
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.ParallelDirSelector:13
msgid "selects faces with the normal parallel to the z direction, and is equivalent to::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector:7
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector:7
msgid "Use the string syntax shortcut #(X|Y|Z) if you want to select based on a cardinal direction."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.PerpendicularDirSelector:14
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.PerpendicularDirSelector:14
msgid "selects faces with the normal perpendicular to the z direction, and is equivalent to::"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane:3
msgid "A 2D coordinate system in space, with the x-y axes on the plane, and a particular point as the origin."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane:6
msgid "A plane allows the use of 2D coordinates, which are later converted to global, 3d coordinates when the operations are complete."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane:9
msgid "Frequently, it is not necessary to create work planes, as they can be created automatically from faces."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__eq__:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__eq__:1
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__eq__:1
msgid "Return self==value."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__init__:1
msgid "Create a Plane with an arbitrary orientation"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__init__:4
msgid "the origin in global coordinates"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__init__:6
msgid "an optional vector representing the xDirection."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__init__:8
msgid "the normal direction for the plane"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__init__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.largestDimension:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.section:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:0
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:0
msgid "Raises"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__init__:9
msgid "if the specified xDir is not orthogonal to the provided normal"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.__ne__:1
msgid "Return self!=value."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:1
msgid "Create a predefined Plane based on the conventional names."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:4
msgid "one of (XY|YZ|ZX|XZ|YX|ZY|front|back|left|right|top|bottom)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:6
msgid "the desired origin, specified in global coordinates"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:9
msgid "Available named planes are as follows. Direction references refer to the global directions."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:13
msgid "Name"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:13
msgid "xDir"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:13
msgid "yDir"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:13
msgid "zDir"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:15
msgid "XY"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:15
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:16
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:17
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:18
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:19
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:21
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:24
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:25
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:26
msgid "+x"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:15
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:16
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:17
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:19
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:20
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:21
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:22
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:23
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:24
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:25
msgid "+y"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:15
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:16
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:17
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:18
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:20
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:21
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:23
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:26
msgid "+z"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:16
msgid "YZ"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:17
msgid "ZX"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:18
msgid "XZ"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:18
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:26
msgid "-y"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:19
msgid "YX"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:19
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:22
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:24
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:25
msgid "-z"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:20
msgid "ZY"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:20
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:22
#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:23
msgid "-x"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:21
msgid "front"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:22
msgid "back"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:23
msgid "left"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:24
msgid "right"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:25
msgid "top"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:26
msgid "bottom"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.named:32
msgid ":py:class:`~cadquery.occ_impl.geom.Plane`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.rotated:1
msgid "Returns a copy of this plane, rotated about the specified axes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.rotated:3
msgid "Since the z axis is always normal the plane, rotating around Z will always produce a plane that is parallel to this one."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.rotated:6
msgid "The origin of the workplane is unaffected by the rotation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.rotated:8
msgid "Rotations are done in order x, y, z. If you need a different order, manually chain together multiple rotate() commands."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.rotated:11
msgid "Vector [xDegrees, yDegrees, zDegrees]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.rotated:12
msgid "a copy of this plane rotated as requested."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:1
msgid "Set a new origin in the plane itself"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:3
msgid "Set a new origin in the plane itself. The plane's orientation and xDrection are unaffected."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:6
msgid "offset in the x direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:7
msgid "offset in the y direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:8
msgid "void"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:10
msgid "The new coordinates are specified in terms of the current 2D system. As an example:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:13
msgid "p = Plane.XY() p.setOrigin2d(2, 2) p.setOrigin2d(2, 2)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.setOrigin2d:17
msgid "results in a plane with its origin at (x, y) = (4, 4) in global coordinates. Both operations were relative to local coordinates of the plane."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toLocalCoords:1
msgid "Project the provided coordinates onto this plane"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toLocalCoords:3
msgid "an object or vector to convert"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toLocalCoords:5
msgid "an object of the same type, but converted to local coordinates"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toLocalCoords:8
msgid "Most of the time, the z-coordinate returned will be zero, because most operations based on a plane are all 2D. Occasionally, though, 3D points outside of the current plane are transformed. One such example is :py:meth:`Workplane.box`, where 3D corners of a box are transformed to orient the box in space correctly."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toWorldCoords:1
msgid "Convert a point in local coordinates to global coordinates"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toWorldCoords:3
msgid "point in local coordinates to convert."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Plane.toWorldCoords:6
msgid "a Vector in global coordinates"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.Selector:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.Selector:3
msgid "Filters must provide a single method that filters objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape:1
msgid "Represents a shape in the system. Wraps TopoDS_Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Area:2
msgid "The surface area of all faces in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.BoundingBox:1
msgid "Create a bounding box for this Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.BoundingBox:4
msgid "Tolerance value passed to :py:class:`BoundBox`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.BoundingBox:6
msgid "A :py:class:`BoundBox` object for this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CenterOfBoundBox:2
msgid "Tolerance passed to the :py:meth:`BoundingBox` method"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CenterOfBoundBox:4
msgid "Center of the bounding box of this shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Closed:2
msgid "The closedness flag"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenter:1
msgid "Calculates the center of mass of multiple objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenter:4
msgid "A list of objects with mass"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenterOfBoundBox:1
msgid "Calculates the center of a bounding box of multiple objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CombinedCenterOfBoundBox:4
msgid "A list of objects"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CompSolids:1
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.CompSolid`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.CompSolids:2
msgid "All the compsolids in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Compounds:1
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Compound`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Compounds:2
msgid "All the compounds in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Edges:1
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Edge`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Edges:2
msgid "All the edges in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Faces:1
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Face`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Faces:2
msgid "All the faces in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Shells:1
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Shell`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Shells:2
msgid "All the shells in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Solids:1
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Solid`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Solids:2
msgid "All the solids in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Vertices:1
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Vertex`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Vertices:2
msgid "All the vertices in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Volume:2
msgid "The volume of this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Wires:1
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.offset2D:8
msgid ":py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Wire`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.Wires:2
msgid "All the wires in this Shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__hash__:1
msgid "Return hash(self)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.__hash__:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.hashCode:5
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.size:4
msgid ":py:class:`int`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.cast:1
msgid "Returns the right type of wrapper, given a OCCT object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.centerOfMass:1
msgid "Calculates the center of 'mass' of an object."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.centerOfMass:4
msgid "Compute the center of mass of this object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.clean:1
msgid "Experimental clean using ShapeUpgrade"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.computeMass:1
msgid "Calculates the 'mass' of an object."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.computeMass:4
msgid "Compute the mass of this object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.copy:1
msgid "Creates a new object that is a copy of this object."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.cut:1
msgid "Remove the positional arguments from this Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportBrep:1
msgid "Export this shape to a BREP file"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStep:1
msgid "Export this shape to a STEP file"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStep:6
msgid ":py:class:`~OCP.IFSelect.IFSelect_ReturnStatus`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStl:1
msgid "Exports a shape to a specified STL file."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStl:4
msgid "The path and file name to write the STL output to."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStl:7
msgid "A linear deflection setting which limits the distance between a curve and its tessellation. Setting this value too low will result in large meshes that can consume computing resources. Setting the value too high can result in meshes with a level of detail that is too low. Default is 0.1, which is good starting point for a range of cases."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStl:10
msgid "- Angular deflection setting which limits the angle between subsequent segments in a polyline. Default is 0.1."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.exportStl:10
msgid "Angular deflection setting which limits the angle between subsequent segments in a polyline. Default is 0.1."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fix:1
msgid "Try to fix shape if not valid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fuse:1
msgid "Fuse the positional arguments with this Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fuse:4
msgid "Sets the glue option for the algorithm, which allows increasing performance of the intersection of the input shapes"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.fuse:7
msgid "Additional tolerance"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:1
msgid "Gets the underlying geometry type."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:3
msgid "Implementations can return any values desired, but the values the user uses in type filters should correspond to these."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:6
msgid "As an example, if a user does::"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:10
msgid "The expectation is that the geomType attribute will return 'mytype'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:12
msgid "The return values depend on the type of the shape:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:14
msgid "Vertex:  always 'Vertex'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:15
msgid "Edge:   LINE, ARC, CIRCLE, SPLINE"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:16
msgid "Face:   PLANE, SPHERE, CONE"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:17
msgid "Solid:  'Solid'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:18
msgid "Shell:  'Shell'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:19
msgid "Compound: 'Compound'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:20
msgid "Wire:   'Wire'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:22
msgid ":py:data:`~typing.Literal`\\['Vertex', 'Wire', 'Shell', 'Solid', 'Compound', 'PLANE', 'CYLINDER', 'CONE', 'SPHERE', 'TORUS', 'BEZIER', 'BSPLINE', 'REVOLUTION', 'EXTRUSION', 'OFFSET', 'OTHER', 'LINE', 'CIRCLE', 'ELLIPSE', 'HYPERBOLA', 'PARABOLA']"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.geomType:23
msgid "A string according to the geometry type"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.hashCode:1
msgid "Returns a hashed value denoting this shape. It is computed from the TShape and the Location. The Orientation is not used."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.importBrep:1
msgid "Import shape from a BREP file"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.intersect:1
msgid "Intersection of the positional arguments and this Shape."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isEqual:1
msgid "Returns True if two shapes are equal, i.e. if they share the same TShape with the same Locations and Orientations. Also see :py:meth:`isSame`."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isNull:1
msgid "Returns true if this shape is null. In other words, it references no underlying shape with the potential to be given a location and an orientation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isSame:1
msgid "Returns True if other and this shape are same, i.e. if they share the same TShape with the same Locations. Orientations may differ. Also see :py:meth:`isEqual`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.isValid:1
msgid "Returns True if no defect is detected on the shape S or any of its subshapes. See the OCCT docs on BRepCheck_Analyzer::IsValid for a full description of what is checked."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.locate:1
msgid "Apply a location in absolute sense to self"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.located:1
msgid "Apply a location in absolute sense to a copy of self"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.location:1
msgid "Return the current location"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.location:4
msgid ":py:class:`~cadquery.occ_impl.geom.Location`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mesh:1
msgid "Generate triangulation if none exists."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mirror:1
msgid "Applies a mirror transform to this Shape. Does not duplicate objects about the plane."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mirror:5
msgid "The direction of the plane to mirror about - one of 'XY', 'XZ' or 'YZ'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mirror:8
msgid "The origin of the plane to mirror about"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.mirror:10
msgid "The mirrored shape"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.move:1
msgid "Apply a location in relative sense (i.e. update current location) to self"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.moved:1
msgid "Apply a location in relative sense (i.e. update current location) to a copy of self"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.rotate:1
msgid "Rotates a shape around an axis."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.rotate:4
msgid "start point of rotation axis"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.rotate:7
msgid "end point of rotation axis"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.rotate:10
msgid "angle to rotate, in degrees"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.rotate:12
msgid "a copy of the shape, rotated"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.scale:1
msgid "Scales this shape through a transformation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.split:1
msgid "Split this shape with the positional arguments."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.toVtkPolyData:1
msgid "Convert shape to vtkPolyData"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.toVtkPolyData:10
msgid ":py:class:`~vtkmodules.vtkCommonDataModel.vtkPolyData`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:1
msgid "Transforms this shape by tMatrix."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:3
msgid "WARNING: transformGeometry will sometimes convert lines and circles to splines, but it also has the ability to handle skew and stretching transformations."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:7
msgid "If your transformation is only translation and rotation, it is safer to use :py:meth:`transformShape`, which doesn't change the underlying type of the geometry, but cannot handle skew transformations."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:12
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformShape:4
msgid "The transformation matrix"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformGeometry:14
msgid "a copy of the object, but with geometry transformed instead of just rotated."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformShape:1
msgid "Transforms this Shape by tMatrix. Also see :py:meth:`transformGeometry`."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.transformShape:6
msgid "a copy of the object, transformed by the provided matrix, with all objects keeping their type"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Shape.translate:1
msgid "Translates this shape through a transformation."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:1
msgid "Make a prismatic feature (additive or subtractive)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:4
msgid "face to perform the operation on"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:4
msgid "list of profiles"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:8
msgid "depth of the cut or extrusion"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:10
msgid "cut thruAll"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:11
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:11
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:23
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeBox:16
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeCone:20
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeCylinder:18
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeLoft:12
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeTorus:21
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeWedge:25
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:16
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:9
msgid ":py:class:`~cadquery.occ_impl.shapes.Solid`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.dprism:12
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:12
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:17
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:18
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:10
msgid "a Solid object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:1
msgid "Attempt to extrude the list of wires  into a prismatic solid in the provided direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:4
msgid "the outermost wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:6
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:6
msgid "a list of inner wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:8
msgid "a vector along which to extrude the wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:10
msgid "taper angle, default=0"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:14
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:19
msgid "The wires must not intersect"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:16
msgid "Extruding wires is very non-trivial.  Nested wires imply very different geometry, and there are many geometries that are invalid. In general, the following conditions must be met:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:19
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:21
msgid "all wires must be closed"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:20
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:22
msgid "there cannot be any intersecting or self-intersecting wires"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:21
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:23
msgid "wires must be listed from outside in"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:22
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:24
msgid "more than one levels of nesting is not supported reliably"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinear:24
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:27
msgid "This method will attempt to sort the wires, but there is much work remaining to make this method reliable."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:1
msgid "Creates a 'twisted prism' by extruding, while simultaneously rotating around the extrusion vector."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:3
msgid "Though the signature may appear to be similar enough to extrudeLinear to merit combining them, the construction methods used here are different enough that they should be separate."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:6
msgid "At a high level, the steps followed are: (1) accept a set of wires (2) create another set of wires like this one, but which are transformed and rotated (3) create a ruledSurface between the sets of wires (4) create a shell and compute the resulting object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:13
msgid "the outermost wire, a cad.Wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:15
msgid "a list of inner wires, a list of cad.Wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:17
msgid "the center point about which to rotate.  the axis of rotation is defined by vecNormal, located at vecCenter. ( a cad.Vector )"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:20
msgid "a vector along which to extrude the wires ( a cad.Vector )"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:22
msgid "the angle to rotate through while extruding"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.extrudeLinearWithRotation:24
msgid "a cad.Solid object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.interpPlate:1
msgid "Returns a plate surface that is 'thickness' thick, enclosed by 'surf_edge_pts' points,  and going through 'surf_pts' points."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.interpPlate:3
msgid ":param surf_edges :type 1 surf_edges: list of [x,y,z] float ordered coordinates :type 2 surf_edges: list of ordered or unordered CadQuery wires :param surf_pts = [] (uses only edges if []) :type surf_pts: list of [x,y,z] float coordinates :param thickness = 0 (returns 2D surface if 0) :type thickness: float (may be negative or positive depending on thickening direction) :param Degree = 3 (OCCT default) :type Degree: Integer >= 2 :param NbPtsOnCur = 15 (OCCT default) :type: NbPtsOnCur Integer >= 15 :param NbIter = 2 (OCCT default) :type: NbIterInteger >= 2 :param Anisotropie = False (OCCT default) :type Anisotropie: Boolean :param: Tol2d = 0.00001 (OCCT default) :type Tol2d: float > 0 :param Tol3d = 0.0001 (OCCT default) :type Tol3dReal: float > 0 :param TolAng = 0.01 (OCCT default) :type TolAngReal: float > 0 :param TolCurv = 0.1 (OCCT default) :type TolCurvReal: float > 0 :param MaxDeg = 8 (OCCT default) :type MaxDegInteger: Integer >= 2 (?) :param MaxSegments = 9 (OCCT default) :type MaxSegments: Integer >= 2 (?)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.interpPlate:34
msgid ":py:data:`~typing.Union`\\[:py:class:`~cadquery.occ_impl.shapes.Solid`, :py:class:`~cadquery.occ_impl.shapes.Face`]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.isSolid:1
msgid "Returns true if the object is a solid, false otherwise"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeBox:1
msgid "By default pnt=Vector(0,0,0) and dir=Vector(0,0,1)'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeCone:1
msgid "Make a cone with given radii and height By default pnt=Vector(0,0,0), dir=Vector(0,0,1) and angle=360'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeCylinder:1
msgid "makeCylinder(radius,height,[pnt,dir,angle]) -- Make a cylinder with a given radius and height By default pnt=Vector(0,0,0),dir=Vector(0,0,1) and angle=360'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeLoft:1
msgid "makes a loft from a list of wires The wires will be converted into faces when possible-- it is presumed that nobody ever actually wants to make an infinitely thin shell for a real FreeCADPart."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeSphere:1
msgid "Make a sphere with a given radius By default pnt=Vector(0,0,0), dir=Vector(0,0,1), angle1=0, angle2=90 and angle3=360"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeTorus:1
msgid "makeTorus(radius1,radius2,[pnt,dir,angle1,angle2,angle]) -- Make a torus with a given radii and angles By default pnt=Vector(0,0,0),dir=Vector(0,0,1),angle1=0 ,angle1=360 and angle=360'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.makeWedge:1
msgid "Make a wedge located in pnt By default pnt=Vector(0,0,0) and dir=Vector(0,0,1)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:1
msgid "Attempt to revolve the list of wires into a solid in the provided direction"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:8
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:4
msgid "the angle to revolve through."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:11
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:7
msgid "the start point of the axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:14
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:10
msgid "the end point of the axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.revolve:25
msgid "the wire(s) that you're revolving cannot be centered"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:1
msgid "Attempt to sweep the list of wires  into a prismatic solid along the provided path"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:6
msgid "The wire to sweep the face resulting from the wires over"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:9
msgid "return Solid or Shell (default True)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:10
msgid "Frenet mode (default False)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:12
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:8
msgid "additional sweep mode parameters."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep:14
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:9
msgid "handling of profile orientation at C1 path discontinuities. Possible values are {'transformed','round', 'right'} (default: 'right')."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Solid.sweep_multi:1
msgid "Multi section sweep. Only single outer profile per section is allowed."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:1
msgid "Filter lists objects using a simple string syntax. All of the filters available in the string syntax are also available ( usually with more functionality ) through the creation of full-fledged selector objects. see :py:class:`Selector` and its subclasses"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:5
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:5
msgid "Filtering works differently depending on the type of object list being filtered."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:7
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:7
msgid "A two-part selector string, [selector][axis]"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:9
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:9
msgid "objects that match the specified selector"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:11
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:11
msgid "***Modifiers*** are ``('|','+','-','<','>','%')``"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "\\|"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:14
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:14
msgid "parallel to ( same as :py:class:`ParallelDirSelector` ). Can return multiple objects."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "#"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:16
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:16
msgid "perpendicular to (same as :py:class:`PerpendicularDirSelector` )"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "+"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:18
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:18
msgid "positive direction (same as :py:class:`DirectionSelector` )"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "-"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:20
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:20
msgid "negative direction (same as :py:class:`DirectionSelector`  )"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid ">"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:22
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:22
msgid "maximize (same as :py:class:`DirectionMinMaxSelector` with directionMax=True)"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "<"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:24
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:24
msgid "minimize (same as :py:class:`DirectionMinMaxSelector` with directionMax=False )"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "%"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:26
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:26
msgid "curve/surface type (same as :py:class:`TypeSelector`)"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:28
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:28
msgid "***axisStrings*** are: ``X,Y,Z,XY,YZ,XZ`` or ``(x,y,z)`` which defines an arbitrary direction"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:30
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:30
msgid "It is possible to combine simple selectors together using logical operations. The following operations are supported"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "and"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:34
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:34
msgid "Logical AND, e.g. >X and >Y"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "or"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:36
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:36
msgid "Logical OR, e.g. \\|X or \\|Y"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "not"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:38
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:38
msgid "Logical NOT, e.g. not #XY"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:0
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:0
msgid "exc(ept)"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:40
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:40
msgid "Set difference (equivalent to AND NOT): \\|X exc >Z"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:42
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:42
msgid "Finally, it is also possible to use even more complex expressions with nesting and arbitrary number of terms, e.g."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:45
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:45
msgid "(not >X[0] and #XY) or >XY[0]"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector:47
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector:47
msgid "Selectors are a complex topic: see :ref:`selector_reference` for more information"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector.__init__:1
msgid "Feed the input string through the parser and construct an relevant complex selector object"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.StringSyntaxSelector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.StringSyntaxSelector.filter:1
msgid "Filter give object list through th already constructed complex selector object"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector:4
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector:4
msgid "Faces: PLANE, CYLINDER, CONE, SPHERE, TORUS, BEZIER, BSPLINE, REVOLUTION, EXTRUSION, OFFSET, OTHER Edges: LINE, CIRCLE, ELLIPSE, HYPERBOLA, PARABOLA, BEZIER, BSPLINE, OFFSET, OTHER"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector:7
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector:7
msgid "You can use the string selector syntax. For example this::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector:11
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector:11
msgid "will select 6 faces, and is equivalent to::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.TypeSelector.filter:3
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.TypeSelector.filter:3
msgid "The default implementation returns the original list unfiltered. :type objectList: :py:class:`~typing.Sequence`\\[:py:class:`~cadquery.occ_impl.shapes.Shape`] :param objectList: list to filter :type objectList: list of OCCT primitives :rtype: :py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Shape`] :return: filtered list"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:3
msgid "a 3D vector, with x-y-z parts."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:13
msgid "you can either provide:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:6
msgid "nothing (in which case the null vector is return)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:7
msgid "a gp_Vec"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:8
msgid "a vector ( in which case it is copied )"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:9
msgid "a 3-tuple"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:10
msgid "a 2-tuple (z assumed to be 0)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:11
msgid "three float values: x, y, and z"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector:12
msgid "two float values: x,y"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.Center:1
msgid "Return the vector itself"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.Center:3
msgid "The center of myself is myself. Provided so that vectors, vertices, and other shapes all support a common interface, when Center() is requested for all objects on the stack."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__repr__:1
msgid "Return repr(self)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.__str__:1
msgid "Return str(self)."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.multiply:1
msgid "Return a copy multiplied by the provided scalar"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.normalized:1
msgid "Return a normalized version of this vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.projectToPlane:1
msgid "Vector is projected onto the plane provided as input."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.projectToPlane:3
msgid "Plane object"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/geom.py:docstring of cadquery.Vector.projectToPlane:5
msgid "Returns the projected vector."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Vertex.Center:1
msgid "The center of a vertex is itself!"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Vertex.__init__:1
msgid "Create a vertex from a FreeCAD Vertex"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.assembleEdges:1
msgid "Attempts to build a wire that consists of the edges in the provided list :type cls: :py:class:`~typing.Type`\\[:py:class:`~cadquery.occ_impl.shapes.Wire`] :param cls: :type listOfEdges: :py:class:`~typing.Iterable`\\[:py:class:`~cadquery.occ_impl.shapes.Edge`] :param listOfEdges: a list of Edge objects. The edges are not to be consecutive. :rtype: :py:class:`~cadquery.occ_impl.shapes.Wire` :return: a wire with the edges assembled :BRepBuilderAPI_MakeWire::Error() values"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.assembleEdges:9
msgid ":BRepBuilderAPI_WireDone = 0 :BRepBuilderAPI_EmptyWire = 1 :BRepBuilderAPI_DisconnectedWire = 2 :BRepBuilderAPI_NonManifoldWire = 3"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.chamfer2D:1
msgid "Apply 2D chamfer to a wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.chamfer2D:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.close:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.fillet2D:8
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.makeHelix:22
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.stitch:6
msgid ":py:class:`~cadquery.occ_impl.shapes.Wire`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.close:1
msgid "Close a Wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.combine:1
msgid "Attempt to combine a list of wires and edges into a new wire. :type cls: :py:class:`~typing.Type`\\[:py:class:`~cadquery.occ_impl.shapes.Wire`] :param cls: :type listOfWires: :py:class:`~typing.Iterable`\\[:py:data:`~typing.Union`\\[:py:class:`~cadquery.occ_impl.shapes.Wire`, :py:class:`~cadquery.occ_impl.shapes.Edge`]] :param listOfWires: :type tol: :py:class:`float` :param tol: default 1e-9 :rtype: :py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Wire`] :return: List[Wire]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.fillet2D:1
msgid "Apply 2D fillet to a wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.makeCircle:1
msgid "Makes a Circle centered at the provided point, having normal in the provided direction :type radius: :py:class:`float` :param radius: floating point radius of the circle, must be > 0 :type center: :py:class:`~cadquery.occ_impl.geom.Vector` :param center: vector representing the center of the circle :type normal: :py:class:`~cadquery.occ_impl.geom.Vector` :param normal: vector representing the direction of the plane the circle should lie in :rtype: :py:class:`~cadquery.occ_impl.shapes.Wire` :return:"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.makeEllipse:1
msgid "Makes an Ellipse centered at the provided point, having normal in the provided direction :type x_radius: :py:class:`float` :param x_radius: floating point major radius of the ellipse (x-axis), must be > 0 :type y_radius: :py:class:`float` :param y_radius: floating point minor radius of the ellipse (y-axis), must be > 0 :type center: :py:class:`~cadquery.occ_impl.geom.Vector` :param center: vector representing the center of the circle :type normal: :py:class:`~cadquery.occ_impl.geom.Vector` :param normal: vector representing the direction of the plane the circle should lie in :type angle1: :py:class:`float` :param angle1: start angle of arc :type angle2: :py:class:`float` :param angle2: end angle of arc :type rotation_angle: :py:class:`float` :param rotation_angle: angle to rotate the created ellipse / arc :rtype: :py:class:`~cadquery.occ_impl.shapes.Wire` :return: Wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.makeHelix:1
msgid "Make a helix with a given pitch, height and radius By default a cylindrical surface is used to create the helix. If the fourth parameter is set (the apex given in degree) a conical surface is used instead'"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.offset2D:1
msgid "Offsets a planar wire"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.Wire.stitch:1
msgid "Attempt to stich wires"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:3
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:3
msgid "the plane in which the workplane will be done"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:5
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:5
msgid "the desired origin of the new workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:7
msgid "an object to use initially for the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:0
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:0
msgid "raises"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:10
msgid "ValueError if the provided plane is not a plane, a valid named workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:11
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:11
msgid "A Workplane object, with coordinate system matching the supplied plane."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:13
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:13
msgid "The most common use is::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:17
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:17
msgid "After creation, the stack contains a single point, the origin of the underlying plane, and the *current point* is on the origin."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane:21
msgid "You can also create workplanes on the surface of existing faces using :py:meth:`CQ.workplane`"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__add__:1
msgid "Syntactic sugar for union. Notice that :code:`r = a + b` is equivalent to :code:`r = a.union(b)` and :code:`r = a | b`."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__and__:1
msgid "Syntactic sugar for intersect. Notice that :code:`r = a & b` is equivalent to :code:`r = a.intersect(b)`."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:1
msgid "make a workplane from a particular plane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__init__:10
msgid "ValueError if the provided plane is not a plane, or one of XY|YZ|XZ"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__or__:1
msgid "Syntactic sugar for union. Notice that :code:`r = a | b` is equivalent to :code:`r = a.union(b)` and :code:`r = a + b`."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.__sub__:1
msgid "Syntactic sugar for cut. Notice that :code:`r = a - b` is equivalent to :code:`r = a.cut(b)`."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.add:1
msgid "Adds an object or a list of objects to the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.add:3
msgid "an object to add"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.add:5
msgid "a Workplane with the requested operation performed"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.add:7
msgid "If an Workplane object, the values of that object's stack are added. If a list of cad primitives, they are all added. If a single CAD primitive then it is added."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.add:11
msgid "Used in rare cases when you need to combine the results of several CQ results into a single Workplane object. Shelling is one common example."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.all:1
msgid "Return a list of all CQ objects on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.all:3
msgid "useful when you need to operate on the elements individually."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.all:6
msgid "Contrast with vals, which returns the underlying objects for all of the items on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.all:12
msgid ":py:class:`~typing.List`\\[\\~T]"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:1
msgid "Return a 3d box with specified dimensions for each object on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:4
msgid "box size in X direction"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:7
msgid "box size in Y direction"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:10
msgid "box size in Z direction"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:13
msgid "If True, the box will be centered around the reference point. If False, the corner of the box will be on the reference point and it will extend in the positive x, y and z directions. Can also use a 3-tuple to specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:18
msgid "should the results be combined with other solids on the stack (and each other)?"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:21
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:10
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:25
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.interpPlate:14
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:28
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:16
msgid "call :py:meth:`clean` afterwards to have a clean shape"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:23
msgid "One box is created for each item on the current stack. If no items are on the stack, one box using the current workplane center is created."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:26
msgid "If combine is true, the result will be a single object on the stack. If a solid was found in the chain, the result is that solid with all boxes produced fused onto it otherwise, the result is the combination of all the produced boxes."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:30
msgid "If combine is false, the result will be a list of the boxes produced."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:32
msgid "Most often boxes form the basis for a part::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.box:37
msgid "But sometimes it is useful to create an array of them::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:1
msgid "Makes a counterbored hole for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:4
msgid "the diameter of the hole"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:7
msgid "the diameter of the cbore"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:10
msgid "depth of the counterbore"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:13
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:13
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:7
msgid "the depth of the hole"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:17
msgid "The surface of the hole is at the current workplane plane."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:19
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:19
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:13
msgid "One hole is created for each item on the stack.  A very common use case is to use a construction rectangle to define the centers of a set of holes, like so::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:24
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:24
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:18
msgid "This sample creates a plate with a set of holes at the corners."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:26
msgid "**Plugin Note**: this is one example of the power of plugins. Counterbored holes are quite time consuming to create, but are quite easily defined by users."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cboreHole:29
msgid "see :py:meth:`cskHole` to make countersinks instead of counterbores"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:1
msgid "Shift local coordinates to the specified location."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:3
msgid "The location is specified in terms of local coordinates."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:5
msgid "the new x location"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:6
msgid "the new y location"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:8
msgid "the workplane object, with the center adjusted."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:10
msgid "The current point is set to the new center. This method is useful to adjust the center point after it has been created automatically on a face, but not where you'd like it to be."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:14
msgid "In this example, we adjust the workplane center to be at the corner of a cube, instead of the center of a face, which is the default::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.center:24
msgid "The result is a cube with a round boss on the corner"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:1
msgid "Chamfers a solid on the selected edges."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:3
msgid "The edges on the stack are chamfered. The solid to which the edges belong must be in the parent chain of the selected edges."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:7
msgid "Optional parameter `length2` can be supplied with a different value than `length` for a chamfer that is shorter on one side longer on the other side."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:12
msgid "the length of the chamfer, must be greater than zero"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:14
msgid "optional parameter for asymmetrical chamfer"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:17
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:9
msgid "if at least one edge is not selected"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:18
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:10
msgid "if the solid containing the edge is not in the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:20
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:12
msgid "cq object with the resulting solid selected."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:22
msgid "This example will create a unit cube, with the top edges chamfered::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.chamfer:26
msgid "This example will create chamfers longer on the sides::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:1
msgid "Make a circle for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:4
msgid "radius of the circle"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:13
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:13
msgid "should the new wires be reference geometry only?"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:11
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:17
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:17
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:10
msgid "a new CQ object with the created wires on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:13
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:19
msgid "A common use case is to use a for-construction rectangle to define the centers of a hole pattern::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:18
msgid "Creates 4 circles at the corners of a square centered on the origin. Another common case is to use successive circle() calls to create concentric circles.  This works because the center of a circle is its reference point::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:24
msgid "Creates two concentric circles, which when extruded will form a ring."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:29
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:19
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:30
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:24
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:37
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:48
msgid "Future Enhancements:"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.circle:27
msgid "better way to handle forConstruction project points not in the workplane plane onto the workplane plane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.clean:1
msgid "Cleans the current solid by removing unwanted edges from the faces."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.clean:4
msgid "Normally you don't have to call this function. It is automatically called after each related operation. You can disable this behavior with `clean=False` parameter if method has any. In some cases this can improve performance drastically but is generally dis-advised since it may break some operations such as fillet."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.clean:11
msgid "Note that in some cases where lots of solid operations are chained, `clean()` may actually improve performance since the shape is 'simplified' at each step and thus next operation is easier."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.clean:16
msgid "Also note that, due to limitation of the underlying engine, `clean` may fail to produce a clean output in some cases such as spherical faces."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.close:1
msgid "End 2D construction, and attempt to build a closed wire."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.close:4
msgid "a CQ object with a completed wire on the stack, if possible."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.close:6
msgid "After 2D drafting with methods such as lineTo, threePointArc, tangentArcPoint and polyline, it is necessary to convert the edges produced by these into one or more wires."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.close:10
msgid "When a set of edges is closed, cadQuery assumes it is safe to build the group of edges into a wire. This example builds a simple triangular prism::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:1
msgid "Attempts to combine all of the items on the stack into a single item. WARNING: all of the items must be of the same type!"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:5
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:8
msgid "use a faster gluing mode for non-overlapping shapes (default False)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:9
msgid "tolerance value for fuzzy bool operation mode (default None)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:7
msgid "ValueError if there are no items on the stack, or if they cannot be combined"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combine:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:14
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:11
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:12
msgid "a CQ object with the resulting object selected"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:1
msgid "!!!DEPRECATED!!! use union() Combines all solids on the current stack, and any context object, together into a single object."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:5
msgid "After the operation, the returned solid is also the context solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:8
msgid "another CadQuery to combine."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplaneFromTagged:6
msgid ":py:class:`~cadquery.cq.Workplane`"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:10
msgid "a cQ object with the resulting combined solid on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.combineSolids:12
msgid "Most of the time, both objects will contain a single solid, which is combined and returned on the stack of the new object."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:1
msgid "Select compounds on the stack, optionally filtering the selection. If there are multiple objects on the stack, they are collected and a list of all the distinct compounds is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:6
msgid "A selector"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:9
msgid "if set, search the tagged CQ object instead of self"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:12
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:12
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:12
msgid "a CQ object who's stack contains all of the *distinct* solids of *all* objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.compounds:15
msgid "A compound contains multiple CAD primitives that resulted from a single operation, such as a union, cut, split, or fillet.  Compounds can contain multiple edges, wires, or solids."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.consolidateWires:1
msgid "Attempt to consolidate wires on the stack into a single. If possible, a new object with the results are returned. if not possible, the wires remain separated"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.copyWorkplane:1
msgid "Copies the workplane from obj."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.copyWorkplane:4
msgid "an object to copy the workplane from"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.copyWorkplane:7
msgid "a CQ object with obj's workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:1
msgid "Makes a countersunk hole for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:7
msgid "the diameter of the countersink"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:10
msgid "angle of the countersink, in degrees ( 82 is common )"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:17
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:11
msgid "The surface of the hole is at the current workplane."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:26
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:20
msgid "**Plugin Note**: this is one example of the power of plugins. CounterSunk holes are quite time consuming to create, but are quite easily defined by users."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cskHole:29
msgid "see :py:meth:`cboreHole` to make counterbores instead of countersinks"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:1
msgid "Cuts the provided solid from the current solid, IE, perform a solid subtraction"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:4
msgid "object to cut"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cut:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:12
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:8
msgid "if there is no solid to subtract from in the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:1
msgid "Use all un-extruded wires in the parent chain to create a prismatic cut from existing solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:3
msgid "Similar to extrude, except that a solid in the parent chain is required to remove material from. cutBlind always removes material from a part."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:7
msgid "distance to extrude before cutting"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:11
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:9
msgid "angle for optional tapered extrusion"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:16
msgid "see :py:meth:`cutThruAll` to cut material from the entire part"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutBlind:19
msgid "Cut Up to Surface"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutEach:1
msgid "Evaluates the provided function at each point on the stack (ie, eachpoint) and then cuts the result from the context solid. :type fcn: :py:data:`~typing.Callable`\\[\\[:py:class:`~cadquery.occ_impl.geom.Location`], :py:class:`~cadquery.occ_impl.shapes.Shape`] :param fcn: a function suitable for use in the eachpoint method: ie, that accepts a vector :type useLocalCoords: :py:class:`bool` :param useLocalCoords: same as for :py:meth:`eachpoint` :param boolean clean: call :py:meth:`clean` afterwards to have a clean shape :raises ValueError: if no solids or compounds are found in the stack or parent chain :rtype: \\~T :return: a CQ object that contains the resulting solid"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:1
msgid "Use all un-extruded wires in the parent chain to create a prismatic cut from existing solid. Cuts through all material in both normal directions of workplane."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:4
msgid "Similar to extrude, except that a solid in the parent chain is required to remove material from. cutThruAll always removes material from a part."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:9
msgid "if there are no pending wires to cut with"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cutThruAll:13
msgid "see :py:meth:`cutBlind` to cut material to a limited depth"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:1
msgid "Returns a cylinder with the specified radius and height for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:4
msgid "The height of the cylinder"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:7
msgid "The radius of the cylinder"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:10
msgid "The direction axis for the creation of the cylinder"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:13
msgid "The angle to sweep the cylinder arc through"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:16
msgid "If True, the cylinder will be centered around the reference point. If False, the corner of a bounding box around the cylinder will be on the reference point and it will extend in the positive x, y and z directions. Can also use a 3-tuple to specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:21
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:24
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:25
msgid "Whether the results should be combined with other solids on the stack (and each other)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:27
msgid "A cylinder object for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:29
msgid "One cylinder is created for each item on the current stack. If no items are on the stack, one cylinder is created using the current workplane center."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:32
msgid "If combine is true, the result will be a single object on the stack. If a solid was found in the chain, the result is that solid with all cylinders produced fused onto it otherwise, the result is the combination of all the produced cylinders."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.cylinder:36
msgid "If combine is false, the result will be a list of the cylinders produced."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:1
msgid "Runs the provided function on each value in the stack, and collects the return values into a new CQ object."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:4
msgid "Special note: a newly created workplane always has its center point as its only stack item"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:6
msgid "the function to call for each item on the current stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:8
msgid "should  values be converted from local coordinates first?"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:11
msgid "The callback function must accept one argument, which is the item on the stack, and return one object, which is collected. If the function returns None, nothing is added to the stack. The object passed into the callBackFunction is potentially transformed to local coordinates, if useLocalCoordinates is true"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:16
msgid "useLocalCoordinates is very useful for plugin developers."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:18
msgid "If false, the callback function is assumed to be working in global coordinates.  Objects created are added as-is, and objects passed into the function are sent in using global coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:22
msgid "If true, the calling function is assumed to be  working in local coordinates.  Objects are transformed to local coordinates before they are passed into the callback method, and result objects are transformed to global coordinates after they are returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:26
msgid "This allows plugin developers to create objects in local coordinates, without worrying about the fact that the working plane is different than the global coordinate system."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.each:30
msgid "TODO: wrapper object for Wire will clean up forConstruction flag everywhere"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:1
msgid "Same as each(), except each item on the stack is converted into a point before it is passed into the callback function."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:5
msgid "CadQuery object which contains a list of  vectors (points ) on its stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:8
msgid "should points be in local or global coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:11
msgid "The resulting object has a point on the stack for each object on the original stack. Vertices and points remain a point.  Faces, Wires, Solids, Edges, and Shells are converted to a point by using their center of mass."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.eachpoint:15
msgid "If the stack has zero length, a single point is returned, which is the center of the current workplane/coordinate system"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:1
msgid "Select the edges of objects on the stack, optionally filtering the selection. If there are multiple objects on the stack, the edges of all objects are collected and a list of all the distinct edges is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:12
msgid "a CQ object who's stack contains all of the *distinct* edges of *all* objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:15
msgid "If there are no edges for any objects on the current stack, an empty CQ object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:17
msgid "The typical use is to select the edges of a single object on the stack. For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:21
msgid "returns 4, because a cube has one face with a normal in the +Z direction. Similarly::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:25
msgid "returns 12, because a cube has a total of 12 edges, And::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.edges:29
msgid "returns 4, because a cube has 4 edges parallel to the z direction"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:1
msgid "Make an ellipse for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:4
msgid "x radius of the ellipse (x-axis of plane the ellipse should lie in)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:7
msgid "y radius of the ellipse (y-axis of plane the ellipse should lie in)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:10
msgid "angle to rotate the ellipse (0 = no rotation = default)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:19
msgid "*NOTE* Due to a bug in opencascade (https://tracker.dev.opencascade.org/view.php?id=31290) the center of mass (equals center for next shape) is shifted. To create concentric ellipses use Workplane(\"XY\")"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipse:22
msgid ".center(10, 20).ellipse(100,10) .center(0, 0).ellipse(50, 5)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:1
msgid "Draw an elliptical arc with x and y radiuses either with start point at current point or or current point being the center of the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:13
msgid "angle to rotate the created ellipse / arc"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:17
msgid "True: start point of arc is moved to current point; False: center of arc is on current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.ellipseArc:20
msgid "convert the resulting arc edge to a wire"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.end:1
msgid "Return the nth parent of this CQ element :type n: :py:class:`int` :param n: number of ancestor to return (default: 1) :rtype: a CQ object :raises: ValueError if there are no more parents in the chain."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.end:7
msgid "For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.end:11
msgid "will return the same as::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.exportSvg:1
msgid "Exports the first item on the stack as an SVG file"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.exportSvg:3
msgid "For testing purposes mainly."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.exportSvg:6
msgid "the filename to export"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.exportSvg:10
msgid ":py:obj:`None`"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:1
msgid "Use all un-extruded wires in the parent chain to create a prismatic solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:4
msgid "the distance to extrude, normal to the workplane plane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:13
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:15
msgid "True to combine the resulting solid with parent solids if found."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:8
msgid "extrude in both directions symmetrically"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:11
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:17
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:18
msgid "a CQ object with the resulting solid selected."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:13
msgid "extrude always *adds* material to a part."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:19
msgid "The returned object is always a CQ object, and depends on whether combine is True, and whether a context solid is already defined:"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:18
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:22
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:32
msgid "if combine is False, the new value is pushed onto the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:19
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:23
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:33
msgid "if combine is true, the value is combined with the context solid if it exists, and the resulting solid becomes the new context solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:25
msgid "FutureEnhancement:"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.extrude:23
msgid "Support for non-prismatic extrusion ( IE, sweeping along a profile, not just perpendicular to the plane extrude to surface. this is quite tricky since the surface selected may not be planar"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:1
msgid "Select the faces of objects on the stack, optionally filtering the selection. If there are multiple objects on the stack, the faces of all objects are collected and a list of all the distinct faces is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:12
msgid "a CQ object who's stack contains all of the *distinct* faces of *all* objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:15
msgid "If there are no vertices for any objects on the current stack, an empty CQ object is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:18
msgid "The typical use is to select the faces of a single object on the stack. For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:22
msgid "returns 1, because a cube has one face with a normal in the +Z direction. Similarly::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:26
msgid "returns 6, because a cube has a total of 6 faces, And::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.faces:30
msgid "returns 2, because a cube has 2 faces having normals parallel to the z direction"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:1
msgid "Fillets a solid on the selected edges."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:3
msgid "The edges on the stack are filleted. The solid to which the edges belong must be in the parent chain of the selected edges."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:7
msgid "the radius of the fillet, must be > zero"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.fillet:14
msgid "This example will create a unit cube, with the top edges filleted::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findFace:1
msgid "Finds the first face object in the chain, searching from the current node backwards through parents until one is found."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findFace:5
msgid "should objects on the stack be searched first."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findFace:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:7
msgid "should parents be searched?"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findFace:9
msgid "A face or None if no face is found."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:1
msgid "Finds the first solid object in the chain, searching from the current node backwards through parents until one is found."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:5
msgid "should objects on the stack be searched first?"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:8
msgid "if no solid is found"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:10
msgid "This function is very important for chains that are modifying a single parent object, most often a solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:13
msgid "Most of the time, a chain defines or selects a solid, and then modifies it using workplanes or other operations."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:16
msgid "Plugin Developers should make use of this method to find the solid that should be modified, if the plugin implements a unary operation, or if the operation will automatically merge its results with an object already on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.findSolid:21
msgid ":py:data:`~typing.Union`\\[:py:class:`~cadquery.occ_impl.shapes.Solid`, :py:class:`~cadquery.occ_impl.shapes.Compound`]"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.first:1
msgid "Return the first item on the stack :returns: the first item on the stack. :rtype: a CQ object"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLine:1
msgid "Make a horizontal line from the current point the provided distance"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLine:3
msgid "(x) distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLine:3
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLine:3
msgid "distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLine:5
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLineTo:8
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLine:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLineTo:9
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLineTo:8
msgid "the Workplane object with the current point at the end of the new line"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLineTo:1
msgid "Make a horizontal line from the current point to the provided x coordinate."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLineTo:3
msgid "Useful if it is more convenient to specify the end location rather than distance, as in :py:meth:`hLine`"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hLineTo:6
msgid "x coordinate for the end of the line"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:1
msgid "Makes a hole for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.hole:23
msgid "see :py:meth:`cboreHole` and :py:meth:`cskHole` to make counterbores or countersinks"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.interpPlate:1
msgid "Returns a plate surface that is 'thickness' thick, enclosed by 'surf_edge_pts' points,  and going through 'surf_pts' points.  Using pushpoints directly with interpPlate and combine=True, can be very resources intensive depending on the complexity of the shape. In this case set combine=False."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.interpPlate:3
msgid ":param surf_edges :type 1 surf_edges: list of [x,y,z] float ordered coordinates :type 2 surf_edges: list of ordered or unordered CadQuery wires :param surf_pts = [] (uses only edges if []) :type surf_pts: list of [x,y,z] float coordinates :param thickness = 0 (returns 2D surface if 0) :type thickness: float (may be negative or positive depending on thickening direction) :type combine: :py:class:`bool` :param combine: should the results be combined with other solids on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.interpPlate:12
msgid "(and each other)?"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.interpPlate:15
msgid ":param Degree = 3 (OCCT default) :type Degree: Integer >= 2 :param NbPtsOnCur = 15 (OCCT default) :type: NbPtsOnCur Integer >= 15 :param NbIter = 2 (OCCT default) :type: NbIterInteger >= 2 :param anisotropy = False (OCCT default) :type anisotropy: Boolean :param: Tol2d = 0.00001 (OCCT default) :type Tol2d: float > 0 :param Tol3d = 0.0001 (OCCT default) :type Tol3dReal: float > 0 :param TolAng = 0.01 (OCCT default) :type TolAngReal: float > 0 :param TolCurv = 0.1 (OCCT default) :type TolCurvReal: float > 0 :param MaxDeg = 8 (OCCT default) :type MaxDegInteger: Integer >= 2 (?) :param MaxSegments = 9 (OCCT default) :type MaxSegments: Integer >= 2 (?)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:1
msgid "Intersects the provided solid from the current solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:4
msgid "object to intersect"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.intersect:7
msgid "if there is no solid to intersect with in the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.item:1
msgid "Return the ith item on the stack. :rtype: a CQ object"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.largestDimension:1
msgid "Finds the largest dimension in the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.largestDimension:3
msgid "Used internally to create thru features, this is how you can compute how long or wide a feature must be to make sure to cut through all of the material"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.largestDimension:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.section:4
msgid "if no solids or compounds are found"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.largestDimension:8
msgid "A value representing the largest dimension of the first solid on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.last:1
msgid "Return the last item on the stack. :rtype: a CQ object"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:1
msgid "Make a line from the current point to the provided point, using dimensions relative to the current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:4
msgid "x distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:5
msgid "y distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:7
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLine:5
msgid "the workplane object with the current point at the end of the new line"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.line:9
msgid "see :py:meth:`lineTo` if you want to use absolute coordinates to make a line instead."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:1
msgid "Make a line from the current point to the provided point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:3
msgid "the x point, in workplane plane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:4
msgid "the y point, in workplane plane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.lineTo:8
msgid "see :py:meth:`line` if you want to use relative dimensions to make a line instead."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.loft:1
msgid "Make a lofted solid, through the set of wires. :rtype: \\~T :return: a CQ object containing the created loft"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirror:1
msgid "Mirror a single CQ object."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirror:4
msgid "the plane to mirror about"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirror:6
msgid "or the normal vector of the plane eg (1,0,0) or a Face object :type basePointVector: :py:data:`~typing.Union`\\[:py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`], :py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`, :py:class:`float`], :py:class:`~cadquery.occ_impl.geom.Vector`, :py:obj:`None`] :param basePointVector: the base point to mirror about (this is overwritten if a Face is passed) :type basePointVector: tuple :type union: :py:class:`bool` :param union: If true will perform a union operation on the mirrored object :type union: bool"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorX:1
msgid "Mirror entities around the x axis of the workplane plane."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorX:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorY:4
msgid "a new object with any free edges consolidated into as few wires as possible."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorX:6
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorY:6
msgid "All free edges are collected into a wire, and then the wire is mirrored, and finally joined into a new wire"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorX:9
msgid "Typically used to make creating wires with symmetry easier."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorY:1
msgid "Mirror entities around the y axis of the workplane plane."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorY:9
msgid "Typically used to make creating wires with symmetry easier. This line of code::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.mirrorY:13
msgid "Produces a flat, heart shaped object"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.move:1
msgid "Move the specified distance from the current point, without drawing."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.move:4
msgid "desired x distance, in local coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.move:7
msgid "desired y distance, in local coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.move:10
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.moveTo:10
msgid "Not to be confused with :py:meth:`center`, which moves the center of the entire workplane, this method only moves the current point ( and therefore does not affect objects already drawn )."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.move:14
msgid "See :py:meth:`moveTo` to do the same thing but using absolute coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.moveTo:1
msgid "Move to the specified point, without drawing."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.moveTo:4
msgid "desired x location, in local coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.moveTo:7
msgid "desired y location, in local coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.moveTo:14
msgid "See :py:meth:`move` to do the same thing but using relative dimensions"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.newObject:1
msgid "Create a new workplane object from this one."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.newObject:3
msgid "Overrides CQ.newObject, and should be used by extensions, plugins, and subclasses to create new objects."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.newObject:7
msgid "new objects to put on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.newObject:10
msgid "a new Workplane object with the current workplane as a parent."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.offset2D:1
msgid "Creates a 2D offset wire."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.offset2D:4
msgid "thickness. Negative thickness denotes offset to inside."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.offset2D:6
msgid "offset kind. Use \"arc\" for rounded and \"intersection\" for sharp edges (default: \"arc\")"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.offset2D:8
msgid "Should the result be added to pending wires?"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.offset2D:11
msgid "CQ object with resulting wire(s)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:1
msgid "Create a spline curve approximating the provided function."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:4
msgid "function f(t) that will generate (x,y,z) pairs"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:7
msgid "number of points for discretization"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:9
msgid "starting value of the parameter t"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:11
msgid "final value of the parameter t"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:13
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:6
msgid "tolerance of the algorithm (default: 1e-6)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:15
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:8
msgid "minimum spline degree (default: 1)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:19
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:19
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:12
msgid "optional parameters for the variational smoothing algorithm (default: (1,1,1))"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:21
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:48
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:16
msgid "convert the resulting spline edge to a wire"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricCurve:23
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:21
msgid "a Workplane object with the current point unchanged"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:1
msgid "Create a spline surface approximating the provided function."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:4
msgid "function f(u,v) that will generate (x,y,z) pairs"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:7
msgid "number of points for discretization in one direction"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:9
msgid "starting value of the parameters u,v"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:11
msgid "final value of the parameters u,v"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:13
msgid "tolerance used by the approximation algorithm (default: 1e-3)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:17
msgid "maximum spline degree (default: 3)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.parametricSurface:23
msgid "This method might be unstable and may require tuning of the tol parameter."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:1
msgid "Creates an polar array of points and pushes them onto the stack. The 0 degree reference angle is located along the local X-axis."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:5
msgid "Radius of the array."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:7
msgid "Starting angle (degrees) of array. 0 degrees is situated along local X-axis."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:10
msgid "The angle (degrees) to fill with elements. A positive value will fill in the counter-clockwise direction. If fill is false, angle is the angle between elements."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:14
msgid "Number of elements in array. ( > 0 )"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:16
msgid "Interpret the angle as total if True (default: True)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarArray:18
msgid "Rotate every item (default: True)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLine:1
msgid "Make a line of the given length, at the given angle from the current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLine:3
msgid "distance of the end of the line from the current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLine:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLineTo:7
msgid "angle of the vector to the end of the line with the x-axis"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLineTo:1
msgid "Make a line from the current point to the given polar coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLineTo:3
msgid "Useful if it is more convenient to specify the end location rather than the distance and angle from the current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polarLineTo:6
msgid "distance of the end of the line from the origin"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polygon:1
msgid "Creates a polygon inscribed in a circle of the specified diameter for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polygon:4
msgid "The first vertex is always oriented in the x direction."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polygon:7
msgid "number of sides, must be >= 3"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polygon:9
msgid "the size of the circle the polygon is inscribed into"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polygon:11
msgid "a polygon wire"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:1
msgid "Create a polyline from a list of points"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:4
msgid "a list of points in Workplane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:7
msgid "whether or not the edges are used for reference"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:11
msgid "use current point as a starting point of the polyline"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:13
msgid "a new CQ object with a list of edges on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.polyline:15
msgid "*NOTE* most commonly, the resulting wire should be closed."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:1
msgid "Pushes a list of points onto the stack as vertices. The points are in the 2D coordinate space of the workplane face"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:5
msgid "a list of points to push onto the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:8
msgid "a new workplane with the desired points on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:10
msgid "A common use is to provide a list of points for a subsequent operation, such as creating circles or holes. This example creates a cube, and then drills three holes through it, based on three points::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.pushPoints:17
msgid "Here the circle function operates on all three points, and is then extruded to create three holes. See :py:meth:`circle` for how it works."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:1
msgid "Draw an arc from the current point to endPoint with an arc defined by the radius."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:7
msgid "end point for the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:7
msgid "the radius of the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:10
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:10
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:10
msgid "a workplane with the current point at the end of the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.radiusArc:12
msgid "Given that a closed contour is drawn clockwise; A positive radius means convex arc and negative radius means concave arc."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rarray:1
msgid "Creates an array of points and pushes them onto the stack. If you want to position the array at another point, create another workplane that is shifted to the position you would like to use as a reference"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rarray:6
msgid "spacing between points in the x direction ( must be > 0)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rarray:8
msgid "spacing between points in the y direction ( must be > 0)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rarray:10
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rarray:12
msgid "number of points ( > 0 )"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rarray:14
msgid "If True, the array will be centered around the workplane center. If False, the lower corner will be on the reference point and the array will extend in the positive x and y directions. Can also use a 2-tuple to specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:1
msgid "Make a rectangle for each item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:4
msgid "length in the x direction (in workplane coordinates)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:6
msgid "length in the y direction (in workplane coordinates)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:8
msgid "If True, the rectangle will be centered around the reference point. If False, the corner of the rectangle will be on the reference point and it will extend in the positive x and y directions. Can also use a 2-tuple to specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:24
msgid "Creates 4 circles at the corners of a square centered on the origin."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:26
msgid "Negative values for xLen and yLen are permitted, although they only have an effect when centered is False."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rect:30
msgid "project points not in the workplane plane onto the workplane plane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.revolve:1
msgid "Use all un-revolved wires in the parent chain to create a solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotate:1
msgid "Returns a copy of all of the items on the stack rotated through and angle around the axis of rotation."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotate:5
msgid "The first point of the axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotate:8
msgid "The second point of the axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotate:11
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:10
msgid "the rotation angle, in degrees"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotate:14
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.translate:6
msgid "a CQ object"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:1
msgid "Rotates all items on the stack by the specified angle, about the specified axis"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:3
msgid "The center of rotation is a vector starting at the center of the object on the stack, and ended at the specified point."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:7
msgid "the second point of axis of rotation"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:13
msgid "a CQ object, with all items rotated."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:15
msgid "WARNING: This version returns the same cq object instead of a new one-- the old object is not accessible."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:19
msgid "A version of this method that returns a transformed copy, rather than modifying the originals"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.rotateAboutCenter:21
msgid "This method doesn't expose a very good interface, because the axis of rotation could be inconsistent between multiple objects.  This is because the beginning of the axis is variable, while the end is fixed. This is fine when operating on one object, but is not cool for multiple."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:1
msgid "Draw an arc from the current point to endPoint with an arc defined by the sag (sagitta)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:7
msgid "the sagitta of the arc"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sagittaArc:12
msgid "The sagitta is the distance from the center of the arc to the arc base. Given that a closed contour is drawn clockwise; A positive sagitta means convex arc and negative sagitta means concave arc. See \"https://en.wikipedia.org/wiki/Sagitta_(geometry)\" for more information."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.section:1
msgid "Slices current solid at the given height."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.section:3
msgid "height to slice at (default: 0)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.section:6
msgid "a CQ object with the resulting face(s)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:1
msgid "Remove the selected faces to create a shell of the specified thickness."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:3
msgid "To shell, first create a solid, and *in the same chain* select the faces you wish to remove."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:6
msgid "a positive float, representing the thickness of the desired shell. Negative values shell inwards, positive values shell outwards."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:9
msgid "kind of joints, intersection or arc (default: arc)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:10
msgid "if the current stack contains objects that are not faces of a solid further up in the chain."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:13
msgid "a CQ object with the resulting shelled solid selected."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:15
msgid "This example will create a hollowed out unit cube, where the top most face is open, and all other walls are 0.2 units thick::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:20
msgid "Shelling is one of the cases where you may need to use the add method to select several faces. For example, this example creates a 3-walled corner, by removing three faces of a cube::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:29
msgid "This fairly yucky syntax for selecting multiple faces is planned for improvement"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:31
msgid "**Note**:  When sharp edges are shelled inwards, they remain sharp corners, but **outward** shells are automatically filleted, because an outward offset from a corner generates a radius."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shell:37
msgid "Better selectors to make it easier to select multiple faces"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:1
msgid "Select the shells of objects on the stack, optionally filtering the selection. If there are multiple objects on the stack, the shells of all objects are collected and a list of all the distinct shells is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:15
msgid "If there are no shells for any objects on the current stack, an empty CQ object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.shells:17
msgid "Most solids will have a single shell, which represents the outer surface. A shell will typically be composed of multiple faces."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.size:1
msgid "Return the number of objects currently on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:1
msgid "Creates a rounded slot for each point on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:4
msgid "desired diameter, or width, of slot"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:6
msgid "desired end to end length of slot"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:8
msgid "angle of slot in degrees, with 0 being along x-axis"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:12
msgid "Can be used to create arrays of slots, such as in cooling applications:"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.slot2D:14
msgid "result = cq.Workplane(\"XY\").box(10,25,1).rarray(1,2,1,10).slot2D(8,1,0).cutThruAll()"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:1
msgid "Select the solids of objects on the stack, optionally filtering the selection. If there are multiple objects on the stack, the solids of all objects are collected and a list of all the distinct solids is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:15
msgid "If there are no solids for any objects on the current stack, an empty CQ object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:17
msgid "The typical use is to select the  a single object on the stack. For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:21
msgid "returns 1, because a cube consists of one solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.solids:23
msgid "It is possible for single CQ object ( or even a single CAD primitive ) to contain multiple solids."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:1
msgid "Returns a 3D sphere with the specified radius for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:4
msgid "The radius of the sphere"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:7
msgid "The direction axis for the creation of the sphere"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:10
msgid "The first angle to sweep the sphere arc through"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:13
msgid "The second angle to sweep the sphere arc through"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:16
msgid "The third angle to sweep the sphere arc through"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:19
msgid "If True, the sphere will be centered around the reference point. If False, the corner of a bounding box around the sphere will be on the reference point and it will extend in the positive x, y and z directions. Can also use a 3-tuple to specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:30
msgid "A sphere object for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:32
msgid "One sphere is created for each item on the current stack. If no items are on the stack, one box using the current workplane center is created."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:35
msgid "If combine is true, the result will be a single object on the stack. If a solid was found in the chain, the result is that solid with all spheres produced fused onto it otherwise, the result is the combination of all the produced spheres."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sphere:39
msgid "If combine is false, the result will be a list of the spheres produced."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:1
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:1
msgid "Create a spline interpolated through the provided points (2D or 3D)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:4
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:4
msgid "points to interpolate through"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:6
msgid "vectors specifying the direction of the tangent to the curve at each of the specified interpolation points.  If only 2 tangents are given, they will be used as the initial and final tangent.  If some tangents are not specified (i.e., are None), no tangent constraint will be applied to the corresponding interpolation point.  The spline will be C2 continuous at the interpolation points where no tangent constraint is specified, and C1 continuous at the points where a tangent constraint is specified."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:6
msgid "vectors specifying the direction of the tangent to the curve at each of the specified interpolation points."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:9
msgid "If only 2 tangents are given, they will be used as the initial and final tangent."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:12
msgid "If some tangents are not specified (i.e., are None), no tangent constraint will be applied to the corresponding interpolation point."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:15
msgid "The spline will be C2 continuous at the interpolation points where no tangent constraint is specified, and C1 continuous at the points where a tangent constraint is specified."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:21
msgid "the value of the parameter at each interpolation point. (The interpolated curve is represented as a vector-valued function of a scalar parameter.)  If periodic == True, then len(parameters) must be len(interpolation points) + 1, otherwise len(parameters) must be equal to len(interpolation points)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:21
msgid "the value of the parameter at each interpolation point. (The interpolated curve is represented as a vector-valued function of a scalar parameter.)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:25
msgid "If periodic == True, then len(parameters) must be len(interpolation points) + 1, otherwise len(parameters) must be equal to len(interpolation points)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:29
msgid "whether to scale the specified tangent vectors before interpolating.  Each tangent is scaled, so it's length is equal to the derivative of the Lagrange interpolated curve.  I.e., set this to True, if you want to use only the direction of the tangent vectors specified by ``tangents``, but not their magnitude."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:29
msgid "whether to scale the specified tangent vectors before interpolating."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:32
msgid "Each tangent is scaled, so it's length is equal to the derivative of the Lagrange interpolated curve."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:35
msgid "I.e., set this to True, if you want to use only the direction of the tangent vectors specified by ``tangents``, but not their magnitude."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:38
msgid "tolerance of the algorithm (consult OCC documentation)  Used to check that the specified points are not too close to each other, and that tangent vectors are not too short. (In either case interpolation may fail.)  Set to None to use the default tolerance."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:38
msgid "tolerance of the algorithm (consult OCC documentation)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:40
msgid "Used to check that the specified points are not too close to each other, and that tangent vectors are not too short. (In either case interpolation may fail.)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:44
msgid "Set to None to use the default tolerance."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:46
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:14
msgid "use current point as a starting point of the curve"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:50
#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:18
msgid "a Workplane object with the current point at the end of the spline"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:52
msgid "The spline will begin at the current point, and end with the last point in the XY tuple list"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:55
msgid "This example creates a block with a spline for one side::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.spline:70
msgid "*WARNING*  It is fairly easy to create a list of points that cannot be correctly interpreted as a spline."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.splineApprox:20
msgid "*WARNING*  for advanced users."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:1
msgid "Splits a solid on the stack into two parts, optionally keeping the separate parts."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:3
msgid "True to keep the top, False or None to discard it"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:4
msgid "True to keep the bottom, False or None to discard it"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:5
msgid "if keepTop and keepBottom are both false."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:6
msgid "if there is no solid in the current stack or parent chain"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:8
msgid "CQ object with the desired objects on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.split:10
msgid "The most common operation splits a solid and keeps one half. This sample creates split bushing::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:1
msgid "Use all un-extruded wires in the parent chain to create a swept solid."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:4
msgid "A wire along which the pending wires will be swept"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:5
msgid "False to create multiple swept from wires on the chain along path. True to create only one solid swept along path with shape following the list of wires on the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:11
msgid "optional fixed normal for extrusion"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.sweep:13
msgid "a wire defining the binormal along the extrusion path"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tag:1
msgid "Tags the current CQ object for later reference."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tag:4
msgid "the name to tag this object with"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tag:7
msgid "self, a cq object with tag applied"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:1
msgid "Draw an arc as a tangent from the end of the current edge to endpoint."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:4
msgid "point for the arc to end at"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:7
msgid "True if endpoint is specified relative to the current point, False if endpoint is in workplane coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:10
msgid "a Workplane object with an arc on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.tangentArcPoint:12
msgid "Requires the the current first object on the stack is an Edge, as would be the case after a lineTo operation or similar."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:4
msgid "text to be rendered"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:6
msgid "size of the font in model units"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:8
msgid "the distance to extrude or cut, normal to the workplane plane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:11
msgid "True to cut the resulting solid from the parent solids if found"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:13
msgid "True to combine the resulting solid with parent solids if found"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:17
msgid "font name"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:19
msgid "path to font file"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:21
msgid "font type"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:23
msgid "horizontal alignment"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:25
msgid "vertical alignment"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:27
msgid "a CQ object with the resulting solid selected"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:29
msgid "The returned object is always a Workplane object, and depends on whether combine is True, and whether a context solid is already defined:"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:36
msgid "Examples::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:40
msgid "Specify the font (name), and kind to use an installed system font::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:44
msgid "Specify fontPath to use a font from a given file::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.text:48
msgid "Cutting text into a solid::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:1
msgid "Draw an arc from the current point, through point1, and ending at point2"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:4
msgid "point to draw through"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.threePointArc:13
msgid "provide a version that allows an arc using relative measures provide a centerpoint arc provide tangent arcs"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toOCC:1
msgid "Directly returns the wrapped OCCT object. :rtype: :py:data:`~typing.Any` :return: The wrapped OCCT object :rtype TopoDS_Shape or a subclass"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toPending:1
msgid "Adds wires/edges to pendingWires/pendingEdges."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toPending:4
msgid "same CQ object with updated context."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toSvg:1
msgid "Returns svg text that represents the first item on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toSvg:3
msgid "for testing purposes."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toSvg:6
msgid "svg formatting options"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.toSvg:9
msgid "a string that contains SVG that represents this item."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.transformed:1
msgid "Create a new workplane based on the current one. The origin of the new plane is located at the existing origin+offset vector, where offset is given in coordinates local to the current plane The new plane is rotated through the angles specified by the components of the rotation vector. :type rotate: :py:data:`~typing.Union`\\[:py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`], :py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`, :py:class:`float`], :py:class:`~cadquery.occ_impl.geom.Vector`] :param rotate: 3-tuple of angles to rotate, in degrees relative to work plane coordinates :type offset: :py:data:`~typing.Union`\\[:py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`], :py:data:`~typing.Tuple`\\[:py:class:`float`, :py:class:`float`, :py:class:`float`], :py:class:`~cadquery.occ_impl.geom.Vector`] :param offset: 3-tuple to offset the new plane, in local work plane coordinates :rtype: \\~T :return: a new work plane, transformed as requested"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.translate:1
msgid "Returns a copy of all of the items on the stack moved by the specified translation vector."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.translate:3
msgid "distance to move, in global coordinates"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:1
msgid "Extrudes a wire in the direction normal to the plane, but also twists by the specified angle over the length of the extrusion"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:4
msgid "The center point of the rotation will be the center of the workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:6
msgid "See extrude for more details, since this method is the same except for the the addition of the angle. In fact, if angle=0, the result is the same as a linear extrude."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:9
msgid "**NOTE**  This method can create complex calculations, so be careful using it with complex geometries"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:13
msgid "the distance to extrude normal to the workplane"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.twistExtrude:14
msgid "angle (in degrees) to rotate through the extrusion"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:1
msgid "Unions all of the items on the stack of toUnion with the current solid. If there is no current solid, the items in toUnion are unioned together."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:7
msgid "call :py:meth:`clean` afterwards to have a clean shape (default True)"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.union:10
msgid "ValueError if there is no solid to add to in the chain"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLine:1
msgid "Make a vertical line from the current point the provided distance"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLine:3
msgid "(y) distance from current point"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLineTo:1
msgid "Make a vertical line from the current point to the provided y coordinate."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLineTo:3
msgid "Useful if it is more convenient to specify the end location rather than distance, as in :py:meth:`vLine`"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vLineTo:6
msgid "y coordinate for the end of the line"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.val:1
msgid "Return the first value on the stack. If no value is present, current plane origin is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.val:3
msgid "the first value on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vals:1
msgid "get the values in the current list"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vals:4
msgid "the values of the objects on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vals:6
msgid "Contrast with :py:meth:`all`, which returns CQ objects for all of the items on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:1
msgid "Select the vertices of objects on the stack, optionally filtering the selection. If there are multiple objects on the stack, the vertices of all objects are collected and a list of all the distinct vertices is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:12
msgid "a CQ object who's stack contains  the *distinct* vertices of *all* objects on the current stack, after being filtered by the selector, if provided"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:15
msgid "If there are no vertices for any objects on the current stack, an empty CQ object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:18
msgid "The typical use is to select the vertices of a single object on the stack. For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:22
msgid "returns 4, because the topmost face of cube will contain four vertices. While this::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:26
msgid "returns 8, because a cube has a total of 8 vertices"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:28
msgid "**Note** Circles are peculiar, they have a single vertex at the center!"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.vertices:30
msgid ":py:class:`StringSyntaxSelector`"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:2
msgid "Distance along the X axis"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:4
msgid "Distance along the Y axis"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:6
msgid "Distance along the Z axis"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:8
msgid "The minimum X location"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:10
msgid "The minimum Z location"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:12
msgid "The maximum X location"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:14
msgid "The maximum Z location"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:16
msgid "A vector (or tuple) for the origin of the direction for the wedge"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:18
msgid "The direction vector (or tuple) for the major axis of the wedge"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:20
msgid "If True, the wedge will be centered around the reference point. If False, the corner of the wedge will be on the reference point and it will extend in the positive x, y and z directions. Can also use a 3-tuple to specify centering along each axis."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:28
msgid "True to attempt to have the kernel clean up the geometry, False otherwise"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:30
msgid "A wedge object for each point on the stack"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:32
msgid "One wedge is created for each item on the current stack. If no items are on the stack, one wedge using the current workplane center is created."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:35
msgid "If combine is True, the result will be a single object on the stack. If a solid was found in the chain, the result is that solid with all wedges produced fused onto it otherwise, the result is the combination of all the produced wedges."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wedge:39
msgid "If combine is False, the result will be a list of the wedges produced."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:1
msgid "Returns a CQ object with all pending edges connected into a wire."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:3
msgid "All edges on the stack that can be combined will be combined into a single wire object, and other objects will remain on the stack unmodified. If there are no pending edges, this method will just return self."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:8
msgid "whether the wire should be used to make a solid, or if it is just for reference"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:11
msgid "This method is primarily of use to plugin developers making utilities for 2D construction. This method should be called when a user operation implies that 2D construction is finished, and we are ready to begin working in 3d."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:15
msgid "SEE '2D construction concepts' for a more detailed explanation of how CadQuery handles edges, wires, etc."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wire:18
msgid "Any non edges will still remain."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:1
msgid "Select the wires of objects on the stack, optionally filtering the selection. If there are multiple objects on the stack, the wires of all objects are collected and a list of all the distinct wires is returned."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:12
msgid "a CQ object who's stack contains all of the *distinct* wires of *all* objects on the current stack, filtered by the provided selector."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:15
msgid "If there are no wires for any objects on the current stack, an empty CQ object is returned"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:17
msgid "The typical use is to select the wires of a single object on the stack. For example::"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.wires:21
msgid "returns 1, because a face typically only has one outer wire"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:1
msgid "Creates a new 2D workplane, located relative to the first face on the stack."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:4
msgid "offset for the work plane in the Z direction. Default"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:6
msgid "invert the Z direction from that of the face."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:8
msgid "how local origin of workplane is determined."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:10
msgid "origin for plane center, requires 'ProjectedOrigin' centerOption."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:17
msgid "The first element on the stack must be a face, a set of co-planar faces or a vertex.  If a vertex, then the parent item on the chain immediately before the vertex must be a face."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:22
msgid "The result will be a 2D working plane with a new coordinate system set up as follows:"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:25
msgid "The centerOption parameter sets how the center is defined. Options are 'CenterOfMass', 'CenterOfBoundBox', or 'ProjectedOrigin'. 'CenterOfMass' and 'CenterOfBoundBox' are in relation to the selected face(s) or vertex (vertices). 'ProjectedOrigin' uses by default the current origin or the optional origin parameter (if specified) and projects it onto the plane defined by the selected face(s)."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:31
msgid "The Z direction will be normal to the plane of the face,computed at the center point."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:33
msgid "The X direction will be parallel to the x-y plane. If the workplane is  parallel to the global x-y plane, the x direction of the workplane will co-incide with the global x direction."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:37
msgid "Most commonly, the selected face will be planar, and the workplane lies in the same plane of the face ( IE, offset=0).  Occasionally, it is useful to define a face offset from an existing surface, and even more rarely to define a workplane based on a face that is not planar."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:42
msgid "To create a workplane without first having a face, use the Workplane() method."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:45
msgid "Allow creating workplane from planar wires"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplane:46
msgid "Allow creating workplane based on an arbitrary point on a face, not just the center. For now you can work around by creating a workplane and then offsetting the center afterwards."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplaneFromTagged:1
msgid "Copies the workplane from a tagged parent."
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplaneFromTagged:4
msgid "tag to search for"
msgstr ""

#: ../../cadquery/cadquery/cq.py:docstring of cadquery.Workplane.workplaneFromTagged:7
msgid "a CQ object with name's workplane"
msgstr ""

#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:1
msgid "Tries to determine how wires should be combined into faces."
msgstr ""

#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:8
msgid "Assume:"
msgstr ""

#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:4
msgid "The wires make up one or more faces, which could have 'holes' Outer wires are listed ahead of inner wires there are no wires inside wires inside wires ( IE, islands -- we can deal with that later on ) none of the wires are construction wires"
msgstr ""

#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:12
msgid "Compute:"
msgstr ""

#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:11
msgid "one or more sets of wires, with the outer wire listed first, and inner ones"
msgstr ""

#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:14
msgid "Returns, list of lists."
msgstr ""

#: ../../cadquery/cadquery/__init__.py:docstring of cadquery.sortWiresByBuildOrder:19
msgid ":py:class:`~typing.List`\\[:py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.shapes.Wire`]]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.endPoint:2
msgid "a vector representing the end point of this edge."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.endPoint:4
#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.startPoint:4
msgid "Note, circles may have the start and end points the same"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.locationAt:1
msgid "Generate a location along the underlying curve. :type d: :py:class:`float` :param d: distance or parameter value :type mode: :py:data:`~typing.Literal`\\['length', 'parameter'] :param mode: position calculation mode (default: length) :type frame: :py:data:`~typing.Literal`\\['frenet', 'corrected'] :param frame: moving frame calculation method (default: frenet) :rtype: :py:class:`~cadquery.occ_impl.geom.Location` :return: A Location object representing local coordinate system at the specified distance."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.locations:1
msgid "Generate location along the curve :type ds: :py:class:`~typing.Iterable`\\[:py:class:`float`] :param ds: distance or parameter values :type mode: :py:data:`~typing.Literal`\\['length', 'parameter'] :param mode: position calculation mode (default: length) :type frame: :py:data:`~typing.Literal`\\['frenet', 'corrected'] :param frame: moving frame calculation method (default: frenet) :rtype: :py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.geom.Location`] :return: A list of Location objects representing local coordinate systems at the specified distances."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.normal:1
msgid "Calculate the normal Vector. Only possible for planar curves."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.normal:4
msgid "normal vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.paramAt:1
msgid "Compute parameter value at the specified normalized distance."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.paramAt:4
msgid "normalized distance [0, 1]"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.paramAt:6
msgid "parameter value"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.positionAt:1
msgid "Generate a position along the underlying curve. :type d: :py:class:`float` :param d: distance or parameter value :type mode: :py:data:`~typing.Literal`\\['length', 'parameter'] :param mode: position calculation mode (default: length) :rtype: :py:class:`~cadquery.occ_impl.geom.Vector` :return: A Vector on the underlying curve located at the specified d value."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.positions:1
msgid "Generate positions along the underlying curve :type ds: :py:class:`~typing.Iterable`\\[:py:class:`float`] :param ds: distance or parameter values :type mode: :py:data:`~typing.Literal`\\['length', 'parameter'] :param mode: position calculation mode (default: length) :rtype: :py:class:`~typing.List`\\[:py:class:`~cadquery.occ_impl.geom.Vector`] :return: A list of Vector objects."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:1
msgid "Calculate the radius."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:3
msgid "Note that when applied to a Wire, the radius is simply the radius of the first edge."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:6
msgid "radius"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.radius:7
msgid "if kernel can not reduce the shape to a circular edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.startPoint:2
msgid "a vector representing the start point of this edge"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.tangentAt:1
msgid "Compute tangent vector at the specified location."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.tangentAt:4
msgid "distance or parameter value (default: 0.5)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.tangentAt:6
msgid "position calculation mode (default: parameter)"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin1D.tangentAt:8
msgid "tangent vector"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.chamfer:1
msgid "Chamfers the specified edges of this solid. :type length: :py:class:`float` :param length: length > 0, the length (length) of the chamfer :type length2: :py:data:`~typing.Optional`\\[:py:class:`float`] :param length2: length2 > 0, optional parameter for asymmetrical chamfer. Should be `None` if not required. :type edgeList: :py:class:`~typing.Iterable`\\[:py:class:`~cadquery.occ_impl.shapes.Edge`] :param edgeList:  a list of Edge objects, which must belong to this solid :rtype: :py:data:`~typing.Any` :return: Chamfered solid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.fillet:1
msgid "Fillets the specified edges of this solid. :type radius: :py:class:`float` :param radius: float > 0, the radius of the fillet :type edgeList: :py:class:`~typing.Iterable`\\[:py:class:`~cadquery.occ_impl.shapes.Edge`] :param edgeList:  a list of Edge objects, which must belong to this solid :rtype: :py:data:`~typing.Any` :return: Filleted solid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.isInside:1
msgid "Returns whether or not the point is inside a solid or compound object within the specified tolerance."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.isInside:5
msgid "tuple or Vector representing 3D point to be tested"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.isInside:7
msgid "tolerance for inside determination, default=1.0e-6"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.isInside:9
msgid "bool indicating whether or not point is within solid"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:1
msgid "Make a shelled solid of self."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:4
msgid "List of faces to be removed, which must be part of the solid. Can be an empty list."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:7
msgid "Floating point thickness. Positive shells outwards, negative shells inwards."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:10
msgid "Modelling tolerance of the method, default=0.0001."
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:11
msgid ":py:data:`~typing.Any`"
msgstr ""

#: ../../cadquery/cadquery/occ_impl/shapes.py:docstring of cadquery.occ_impl.shapes.Mixin3D.shell:12
msgid "A shelled solid."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors:1
msgid "Copyright (C) 2011-2015  Parametric Products Intellectual Holdings, LLC"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors:3
msgid "This file is part of CadQuery."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors:5
msgid "CadQuery is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors:10
msgid "CadQuery is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors:15
msgid "You should have received a copy of the GNU Lesser General Public License along with this library; If not, see <http://www.gnu.org/licenses/>"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AndSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.SubtractSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.SumSelector:1
msgid "Bases: :class:`cadquery.selectors.BinarySelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AndSelector:1
msgid "Intersection selector. Returns objects that is selected by both selectors."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector:1
msgid "Bases: :class:`cadquery.selectors._NthSelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:4
msgid "Faces, Shells, Solids - Shape.Area() is used to compute area"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:5
msgid "closed planar Wires - a temporary face is created to compute area"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:7
msgid "Will ignore non-planar or non-closed wires."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:9
msgid "Among other things can be used to select one of the nested coplanar wires or faces."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:12
msgid "For example to create a fillet on a shank::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector:25
msgid "Or to create a lip on a case seam::"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.AreaNthSelector.key:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector.key:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector.key:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector.key:1
msgid "Return the key for ordering. Can raise a ValueError if obj can not be used to create a key, which will result in obj being dropped by the clustering method."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BaseDirSelector.filter:1
#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector.filter:1
msgid "There are lots of kinds of filters, but for planes they are always based on the normal of the plane, and for edges on the tangent vector along the edge"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BinarySelector:1
msgid "Base class for selectors that operates with two other selectors. Subclass must implement the :filterResults(): method."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BoxSelector:3
msgid "If `boundingbox` is True only the objects that have their bounding box inside the given box is selected. Otherwise only center point of the object is tested."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.BoxSelector:7
msgid "Applicability: all types of shapes"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.CenterNthSelector:4
msgid "All Shapes."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.DirectionNthSelector:1
msgid "Bases: :class:`cadquery.selectors.ParallelDirSelector`, :class:`cadquery.selectors.CenterNthSelector`"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.InverseSelector:1
msgid "Inverts the selection of given selector. In other words, selects all objects that is not selected by given selector."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.LengthNthSelector:4
msgid "All Edge and Wire objects"
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector:4
msgid "All Edge and Wires."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.RadiusNthSelector:6
msgid "Will ignore any shape that can not be represented as a circle or an arc of a circle."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.SubtractSelector:1
msgid "Difference selector. Subtract results of a selector from another selectors results."
msgstr ""

#: ../../cadquery/cadquery/selectors.py:docstring of cadquery.selectors.SumSelector:1
msgid "Union selector. Returns the sum of two selectors results."
msgstr ""
