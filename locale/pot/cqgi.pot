# SOME DESCRIPTIVE TITLE.
# Copyright (C) CadQuery Development Team
# This file is distributed under the same license as the CadQuery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CadQuery 2.6.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-29 00:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cadquery/doc/cqgi.rst:4
msgid "The CadQuery Gateway Interface"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:7
msgid "CadQuery is first and foremost designed as a library, which can be used as a part of any project. In this context, there is no need for a standard script format or gateway API."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:10
msgid "Though the embedded use case is the most common, several tools have been created which run cadquery scripts on behalf of the user, and then render the result of the script visually."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:13
msgid "These execution environments (EE) generally accept a script and user input values for script parameters, and then display the resulting objects visually to the user."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:16
msgid "Today, three execution environments exist:"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:18
msgid "`CQ-editor <https://github.com/CadQuery/CQ-editor>`_, which runs scripts inside of a CadQuery IDE, and displays objects in the display window and includes features like debugging."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:20
msgid "The cq-directive, which is used to execute scripts inside of sphinx-doc, producing documented examples that include both a script and an SVG representation of the object that results."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:23
msgid "The CQGI is distributed with CadQuery, and standardizes the interface between execution environments and CadQuery scripts."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:27
msgid "The Script Side"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:29
msgid "CQGI compliant containers provide an execution environment for scripts. The environment includes:"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:31
msgid "the cadquery library is automatically imported as 'cq'."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:32
msgid "the :py:meth:`cadquery.cqgi.ScriptCallback.show_object()` method is defined that should be used to export a shape to the execution environment"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:33
msgid "the :py:meth:`cadquery.cqgi.ScriptCallBack.debug()` method is defined, which can be used by scripts to debug model output during execution."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:35
msgid "Scripts must call show_object at least once. Invoking show_object more than once will send multiple objects to the container.  An error will occur if the script does not return an object using the show_object() method."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:38
msgid "This CQGI compliant script produces a cube with a circle on top, and displays a workplane as well as an intermediate circle as debug output::"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:55
msgid "Note that importing cadquery is not required. At the end of this script, one object will be displayed, in addition to a workplane, a point, and a circle"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:58
msgid "Future enhancements will include several other methods, used to provide more metadata for the execution environment:"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:59
msgid ":py:meth:`cadquery.cqgi.ScriptCallback.add_error()`, indicates an error with an input parameter"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:60
msgid ":py:meth:`cadquery.cqgi.ScriptCallback.describe_parameter()`, provides extra information about a parameter in the script,"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:64
msgid "The execution environment side"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:66
msgid "CQGI makes it easy to run cadquery scripts in a standard way. To run a script from an execution environment, run code like this::"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:74
msgid "The :py:meth:`cadquery.cqgi.parse()` method returns a :py:class:`cadquery.cqgi.CQModel` object."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:76
msgid "The `metadata`p property of the object contains a `cadquery.cqgi.ScriptMetaData` object, which can be used to discover the user parameters available. This is useful if the execution environment would like to present a GUI to allow the user to change the model parameters.  Typically, after collecting new values, the environment will supply them in the build() method."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:80
msgid "This code will return a dictionary of parameter values in the model text SCRIPT::"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:81
msgid "parameters = cqgi.parse(SCRIPT).metadata.parameters"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:83
msgid "The dictionary you get back is a map where key is the parameter name, and value is an InputParameter object, which has a name, type, and default value."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:86
msgid "The type is an object which extends ParameterType-- you can use this to determine what kind of widget to render ( checkbox for boolean, for example )."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:88
msgid "The parameter object also has a description, valid values, minimum, and maximum values, if the user has provided them using the describe_parameter() method."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:93
msgid "Calling :py:meth:`cadquery.cqgi.CQModel.build()` returns a :py:class:`cadquery.cqgi.BuildResult` object, ,which includes the script execution time, and a success flag."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:96
msgid "If the script was successful, the results property will include a list of results returned by the script, as well as any debug the script produced"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:99
msgid "If the script failed, the exception property contains the exception object."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:101
msgid "If you have a way to get inputs from a user, you can override any of the constants defined in the user script with new values::"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:111
msgid "If a parameter called 'param' is defined in the model, it will be assigned the value 2 before the script runs. An error will occur if a value is provided that is not defined in the model, or if the value provided cannot be assigned to a variable with the given name."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:115
msgid "build_options is used to set server-side settings like timeouts, tessellation tolerances, and other details about how the model should be built."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:120
msgid "More about script variables"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:122
msgid "CQGI uses the following rules to find input variables for a script:"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:124
msgid "only top-level statements are considered"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:125
msgid "only assignments of constant values to a local name are considered."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:127
msgid "For example, in the following script::"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:137
msgid "h, w, and foo will be overridable script variables, but x is not."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:139
msgid "You can list the variables defined in the model by using the return value of the parse method::"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:146
msgid "The key of the dictionary is a string , and the value is a :py:class:`cadquery.cqgi.InputParameter` object See the CQGI API docs for more details."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:149
msgid "Future enhancements will include a safer sandbox to prevent malicious scripts."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:152
msgid "Automating export to STL"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:153
msgid "A common use-case for the CQGI is the automation of processing cadquery code into geometry, doing so via the CQGI rather than an export line in the script itself leads to a much tidier environment; you may need to do this as part of an automated-workflow, batch-conversion, exporting to another software for assembly, or running stress simulations on resulting bodies."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:155
msgid "The below Python script demonstrates how to open, process, and export an STL file from any valid cadquery script::"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:178
msgid "Important CQGI Methods"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:180
msgid "These are the most important Methods and classes of the CQGI"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:189:<autosummary>:1
msgid ":py:obj:`parse <cadquery.cqgi.parse>`\\ \\(script\\_source\\)"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.parse:1
#: ../../cadquery/doc/cqgi.rst:189:<autosummary>:1
msgid "Parses the script as a model, and returns a model."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:189:<autosummary>:1
msgid ":py:obj:`CQModel.build <cadquery.cqgi.CQModel.build>`\\ \\(\\[build\\_parameters\\, build\\_options\\]\\)"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel.build:1
#: ../../cadquery/doc/cqgi.rst:189:<autosummary>:1
msgid "Executes the script, using the optional parameters to override those in the model"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:189:<autosummary>:1
msgid ":py:obj:`BuildResult <cadquery.cqgi.BuildResult>`\\ \\(\\)"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:189:<autosummary>:1
msgid "The result of executing a CadQuery script."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:189:<autosummary>:1
msgid ":py:obj:`ScriptCallback.show_object <cadquery.cqgi.ScriptCallback.show_object>`\\ \\(shape\\[\\, options\\]\\)"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptCallback.show_object:1
#: ../../cadquery/doc/cqgi.rst:189:<autosummary>:1
msgid "Return an object to the executing environment, with options."
msgstr ""

#: ../../cadquery/doc/cqgi.rst:191
msgid "Complete CQGI API"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi:1
msgid "The CadQuery Gateway Interface. Provides classes and tools for executing CadQuery scripts"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.BuildResult:1
msgid "The result of executing a CadQuery script. The success property contains whether the execution was successful."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.BuildResult:4
msgid "If successful, the results property contains a list of all results, and the first_result property contains the first result."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.BuildResult:7
msgid "If unsuccessful, the exception property contains a reference to the stack trace that occurred."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel:1
msgid "Represents a Cadquery Script."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel:3
msgid "After construction, the metadata property contains a ScriptMetaData object, which describes the model in more detail, and can be used to retrieve the parameters defined by the model."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel:7
msgid "the build method can be used to generate a 3d model"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:0
msgid "Parameters"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel.build:3
msgid "a dictionary of variables. The variables must be assignable to the underlying variable type. These variables override default values in the script"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel.build:5
msgid "build options for how to build the model. Build options include things like timeouts, tessellation tolerances, etc"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel.build:0
msgid "raises"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel.build:7
msgid "Nothing. If there is an exception, it will be on the exception property of the result. This is the interface so that we can return other information on the result, such as the build time"
msgstr ""

#: ../../cadquery/doc/cqgi.rst:0
msgid "Returns"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel.build:9
msgid "a BuildResult object, which includes the status of the result, and either a resulting shape or an exception"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel.validate:1
msgid "Determine if the supplied parameters are valid. NOT IMPLEMENTED YET-- raises NotImplementedError"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.CQModel.validate:4
msgid "a dictionary of parameters"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ConstantAssignmentFinder:1
msgid "Visits a parse tree, and adds script parameters to the cqModel"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.EnvironmentBuilder:1
msgid "Builds an execution environment for a cadquery script. The environment includes the builtins, as well as the other methods the script will need."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.InputParameter:1
msgid "Defines a parameter that can be supplied when the model is executed."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.InputParameter:3
msgid "Name, varType, and default_value are always available, because they are computed from a variable assignment line of code:"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.InputParameter:6
msgid "The others are only available if the script has used define_parameter() to provide additional metadata"
msgstr ""

#: ../docstring of cadquery.cqgi.InputParameter.default_value:1
msgid "the default value for the variable."
msgstr ""

#: ../docstring of cadquery.cqgi.InputParameter.desc:1
msgid "help text describing the variable. Only available if the script used describe_parameter()"
msgstr ""

#: ../docstring of cadquery.cqgi.InputParameter.name:1
msgid "the name of the parameter."
msgstr ""

#: ../docstring of cadquery.cqgi.InputParameter.valid_values:1
msgid "valid values for the variable. Only available if the script used describe_parameter()"
msgstr ""

#: ../docstring of cadquery.cqgi.InputParameter.varType:1
msgid "type of the variable: BooleanParameter, StringParameter, NumericParameter"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.InvalidParameterError:1
msgid "Raised when an attempt is made to provide a new parameter value that cannot be assigned to the model"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.NoOutputError:1
msgid "Raised when the script does not execute the show_object() method to return a solid"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ParameterDescriptionFinder:1
msgid "Visits a parse tree, looking for function calls to describe_parameter(var, description )"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ParameterDescriptionFinder.visit_Call:1
msgid "Called when we see a function call. Is it describe_parameter?"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptCallback:1
msgid "Allows a script to communicate with the container the show_object() method is exposed to CQ scripts, to allow them to return objects to the execution environment"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptCallback.add_error:1
msgid "Not implemented yet: allows scripts to indicate that there are problems with inputs"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptCallback.debug:1
msgid "Debug print/output an object, with optional arguments."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptCallback.describe_parameter:1
msgid "Do Nothing-- we parsed the ast ahead of execution to get what we need."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptCallback.show_object:3
msgid "a cadquery object"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptCallback.show_object:4
msgid "a dictionary of options that will be made available to the executing environment"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptExecutionError:1
msgid "Represents a script syntax error. Useful for helping clients pinpoint issues with the script interactively"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ScriptMetadata:1
msgid "Defines the metadata for a parsed CQ Script. the parameters property is a dict of InputParameter objects."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.ShapeResult:1
msgid "An object created by a build, including the user parameters provided"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.parse:3
msgid "If you would prefer to access the underlying model without building it, for example, to inspect its available parameters, construct a CQModel object."
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.parse:6
msgid "the script to run. Must be a valid cadquery script"
msgstr ""

#: ../../cadquery/cadquery/cqgi.py:docstring of cadquery.cqgi.parse:7
msgid "a CQModel object that defines the script and allows execution"
msgstr ""
