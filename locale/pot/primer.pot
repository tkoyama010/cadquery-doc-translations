# SOME DESCRIPTIVE TITLE.
# Copyright (C) Parametric Products Intellectual Holdings LLC, All Rights Reserved
# This file is distributed under the same license as the CadQuery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CadQuery 2.5.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-16 00:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cadquery/doc/primer.rst:6
msgid "Concepts"
msgstr ""

#: ../../cadquery/doc/primer.rst:10
msgid "3D BREP Topology Concepts"
msgstr ""

#: ../../cadquery/doc/primer.rst:11
msgid "Before talking about CadQuery, it makes sense to talk a little about 3D CAD topology. CadQuery is based upon the OpenCascade kernel, which uses Boundary Representations (BREP) for objects.  This just means that objects are defined by their enclosing surfaces."
msgstr ""

#: ../../cadquery/doc/primer.rst:15
msgid "When working in a BREP system, these fundamental constructs exist to define a shape (working up the food chain):"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "vertex"
msgstr ""

#: ../../cadquery/doc/primer.rst:17
msgid "a single point in space"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "edge"
msgstr ""

#: ../../cadquery/doc/primer.rst:18
msgid "a connection between two or more vertices along a particular path (called a curve)"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "wire"
msgstr ""

#: ../../cadquery/doc/primer.rst:19
msgid "a collection of edges that are connected together."
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "face"
msgstr ""

#: ../../cadquery/doc/primer.rst:20
msgid "a set of edges or wires that enclose a surface"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "shell"
msgstr ""

#: ../../cadquery/doc/primer.rst:21
msgid "a collection of faces that are connected together along some of their edges"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "solid"
msgstr ""

#: ../../cadquery/doc/primer.rst:22
msgid "a shell that has a closed interior"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "compound"
msgstr ""

#: ../../cadquery/doc/primer.rst:23
msgid "a collection of solids"
msgstr ""

#: ../../cadquery/doc/primer.rst:25
msgid "When using CadQuery, all of these objects are created, hopefully with the least possible work. In the actual CAD kernel, there is another set of Geometrical constructs involved as well. For example, an arc-shaped edge will hold a reference to an underlying curve that is a full circle, and each linear edge holds underneath it the equation for a line.  CadQuery shields you from these constructs."
msgstr ""

#: ../../cadquery/doc/primer.rst:32
msgid "Workplane class"
msgstr ""

#: ../../cadquery/doc/primer.rst:34
msgid "The Workplane class contains the currently selected objects (a list of Shapes, Vectors or Locations in the :attr:`~cadquery.Workplane.objects` attribute), the modelling context (in the :attr:`~cadquery.Workplane.ctx` attribute), and CadQuery's fluent api methods. It is the main class that users will instantiate."
msgstr ""

#: ../../cadquery/doc/primer.rst:39
msgid "See :ref:`apireference` to learn more."
msgstr ""

#: ../../cadquery/doc/primer.rst:43
msgid "Workplanes"
msgstr ""

#: ../../cadquery/doc/primer.rst:45
msgid "Most CAD programs use the concept of Workplanes. If you have experience with other CAD programs you will probably feel comfortable with CadQuery's Workplanes, but if you don't have experience then they are an essential concept to understand."
msgstr ""

#: ../../cadquery/doc/primer.rst:49
msgid "Workplanes represent a plane in space, from which other features can be located. They have a center point and a local coordinate system. Most methods that create an object do so relative to the current workplane."
msgstr ""

#: ../../cadquery/doc/primer.rst:52
msgid "Usually the first workplane created is the \"XY\" plane, also known as the \"front\" plane. Once a solid is defined the most common way to create a workplane is to select a face on the solid that you intend to modify and create a new workplane relative to it. You can also create new workplanes in anywhere in world coordinate system, or relative to other planes using offsets or rotations."
msgstr ""

#: ../../cadquery/doc/primer.rst:57
msgid "The most powerful feature of workplanes is that they allow you to work in 2D space in the coordinate system of the workplane, and then CadQuery will transform these points from the workplane coordinate system to the world coordinate system so your 3D features are located where you intended. This makes scripts much easier to create and maintain."
msgstr ""

#: ../../cadquery/doc/primer.rst:61
msgid "See :py:class:`cadquery.Workplane` to learn more."
msgstr ""

#: ../../cadquery/doc/primer.rst:65
msgid "2D Construction"
msgstr ""

#: ../../cadquery/doc/primer.rst:67
msgid "Once you create a workplane, you can work in 2D, and then later use the features you create to make 3D objects. You'll find all of the 2D constructs you expect -- circles, lines, arcs, mirroring, points, etc."
msgstr ""

#: ../../cadquery/doc/primer.rst:70
msgid "See :ref:`2dOperations` to learn more."
msgstr ""

#: ../../cadquery/doc/primer.rst:74
msgid "3D Construction"
msgstr ""

#: ../../cadquery/doc/primer.rst:76
msgid "You can construct 3D primitives such as boxes, wedges, cylinders and spheres directly. You can also sweep, extrude, and loft 2D geometry to form 3D features.  Of course the basic primitive operations are also available."
msgstr ""

#: ../../cadquery/doc/primer.rst:79
msgid "See :ref:`3doperations` to learn more."
msgstr ""

#: ../../cadquery/doc/primer.rst:84
msgid "Selectors"
msgstr ""

#: ../../cadquery/doc/primer.rst:86
msgid "Selectors allow you to select one or more features, in order to define new features.  As an example, you might extrude a box, and then select the top face as the location for a new feature.  Or, you might extrude a box, and then select all of the vertical edges so that you can apply a fillet to them."
msgstr ""

#: ../../cadquery/doc/primer.rst:90
msgid "You can select Vertices, Edges, Faces, Solids, and Wires using selectors."
msgstr ""

#: ../../cadquery/doc/primer.rst:92
msgid "Think of selectors as the equivalent of your hand and mouse, if you were to build an object using a conventional CAD system."
msgstr ""

#: ../../cadquery/doc/primer.rst:94
msgid "See :ref:`selectors` to learn more."
msgstr ""

#: ../../cadquery/doc/primer.rst:98
msgid "Construction Geometry"
msgstr ""

#: ../../cadquery/doc/primer.rst:99
msgid "Construction geometry are features that are not part of the object, but are only defined to aid in building the object. A common example might be to define a rectangle, and then use the corners to define the location of a set of holes."
msgstr ""

#: ../../cadquery/doc/primer.rst:102
msgid "Most CadQuery construction methods provide a ``forConstruction`` keyword, which creates a feature that will only be used to locate other features."
msgstr ""

#: ../../cadquery/doc/primer.rst:107
msgid "The Stack"
msgstr ""

#: ../../cadquery/doc/primer.rst:109
msgid "As you work in CadQuery, each operation returns a new Workplane object with the result of that operations. Each Workplane object has a list of objects, and a reference to its parent."
msgstr ""

#: ../../cadquery/doc/primer.rst:112
msgid "You can always go backwards to older operations by removing the current object from the stack.  For example::"
msgstr ""

#: ../../cadquery/doc/primer.rst:116
msgid "returns a CadQuery object that contains all of the vertices on the highest face of someObject. But you can always move backwards in the stack to get the face as well::"
msgstr ""

#: ../../cadquery/doc/primer.rst:121
msgid "You can browse stack access methods here: :ref:`stackMethods`."
msgstr ""

#: ../../cadquery/doc/primer.rst:127
msgid "Chaining"
msgstr ""

#: ../../cadquery/doc/primer.rst:129
msgid "All Workplane methods return another Workplane object, so that you can chain the methods together fluently. Use the core Workplane methods to get at the objects that were created."
msgstr ""

#: ../../cadquery/doc/primer.rst:132
msgid "Each time a new Workplane object is produced during these chained calls, it has a :attr:`~cadquery.Workplane.parent` attribute that points to the Workplane object that created it. Several CadQuery methods search this parent chain, for example when searching for the context solid. You can also give a Workplane object a tag, and further down your chain of calls you can refer back to this particular object using its tag."
msgstr ""

#: ../../cadquery/doc/primer.rst:140
msgid "The Context Solid"
msgstr ""

#: ../../cadquery/doc/primer.rst:142
msgid "Most of the time, you are building a single object, and adding features to that single object.  CadQuery watches your operations, and defines the first solid object created as the 'context solid'.  After that, any features you create are automatically combined (unless you specify otherwise) with that solid.  This happens even if the solid was created  a long way up in the stack.  For example::"
msgstr ""

#: ../../cadquery/doc/primer.rst:149
msgid "Will create a 1x2x3 box, with a cylindrical boss extending from the top face.  It was not necessary to manually combine the cylinder created by extruding the circle with the box, because the default behavior for extrude is to combine the result with the context solid. The hole() method works similarly -- CadQuery presumes that you want to subtract the hole from the context solid."
msgstr ""

#: ../../cadquery/doc/primer.rst:154
msgid "If you want to avoid this, you can specify ``combine=False``, and CadQuery will create the solid separately."
msgstr ""

#: ../../cadquery/doc/primer.rst:158
msgid "Iteration"
msgstr ""

#: ../../cadquery/doc/primer.rst:160
msgid "CAD models often have repeated geometry, and its really annoying to resort to for loops to construct features. Many CadQuery methods operate automatically on each element on the stack, so that you don't have to write loops. For example, this::"
msgstr ""

#: ../../cadquery/doc/primer.rst:166
msgid "Will actually create 4 circles, because ``vertices()`` selects 4 vertices of a rectangular face, and the ``circle()`` method iterates on each member of the stack."
msgstr ""

#: ../../cadquery/doc/primer.rst:169
msgid "This is really useful to remember  when you author your own plugins. :py:meth:`cadquery.Workplane.each` is useful for this purpose."
msgstr ""

#: ../../cadquery/doc/primer.rst:172
msgid "CadQuery API layers"
msgstr ""

#: ../../cadquery/doc/primer.rst:174
msgid "Once you start to dive a bit more into CadQuery, you may find yourself a bit confused juggling between different types of objects the CadQuery APIs can return. This chapter aims to give an explanation on this topic and to provide background on the underlying implementation and kernel layers so you can leverage more of CadQuery functionality."
msgstr ""

#: ../../cadquery/doc/primer.rst:177
msgid "CadQuery is composed of 3 different API, which are implemented on top of each other."
msgstr ""

#: ../../cadquery/doc/primer.rst:179
#: ../../cadquery/doc/primer.rst:184
msgid "The Fluent API"
msgstr ""

#: ../../cadquery/doc/primer.rst:180
#: ../../cadquery/doc/primer.rst:214
msgid "The Direct API"
msgstr ""

#: ../../cadquery/doc/primer.rst:181
#: ../../cadquery/doc/primer.rst:249
msgid "The OCCT API"
msgstr ""

#: ../../cadquery/doc/primer.rst:186
msgid "What we call the fluent API is what you work with when you first start using CadQuery, the :class:`~cadquery.Workplane` class and all its methods defines the Fluent API. This is the API you will use and see most of the time, it's fairly easy to use and it simplifies a lot of things for you. A classic example could be : ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:191
msgid "Here we create a :class:`~cadquery.Workplane` object on which we subsequently call several methods to create our part. A general way of thinking about the Fluent API is to consider the :class:`~cadquery.Workplane` as your part object and all it's methods as operations that will affect your part. Often you will start with an empty :class:`~cadquery.Workplane`, then add more features by calling :class:`~cadquery.Workplane` methods."
msgstr ""

#: ../../cadquery/doc/primer.rst:195
msgid "This hierarchical structure of operations modifying a part is well seen with the traditional code style used in CadQuery code. Code written with the CadQuery fluent API will often look like this : ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:200
msgid "Or like this : ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:210
msgid "While the first code style is what people default to, it's important to note that when you write your code like this it's equivalent as writting it on a single line. It's then more difficult to debug as you cannot visualize each operation step by step, which is a functionality that is provided by the CQ-Editor debugger for example."
msgstr ""

#: ../../cadquery/doc/primer.rst:216
msgid "While the fluent API exposes much functionality, you may find scenarios that require extra flexibility or require working with lower level objects."
msgstr ""

#: ../../cadquery/doc/primer.rst:218
msgid "The direct API is the API that is called by the fluent API under the hood. The 9 topological classes and their methods compose the direct API. These classes actually wrap the equivalent Open CASCADE Technology (OCCT) classes. The 9 topological classes are :"
msgstr ""

#: ../../cadquery/doc/primer.rst:222
msgid ":class:`~cadquery.Shape`"
msgstr ""

#: ../../cadquery/doc/primer.rst:223
msgid ":class:`~cadquery.Compound`"
msgstr ""

#: ../../cadquery/doc/primer.rst:224
msgid ":class:`~cadquery.CompSolid`"
msgstr ""

#: ../../cadquery/doc/primer.rst:225
msgid ":class:`~cadquery.Solid`"
msgstr ""

#: ../../cadquery/doc/primer.rst:226
msgid ":class:`~cadquery.Shell`"
msgstr ""

#: ../../cadquery/doc/primer.rst:227
msgid ":class:`~cadquery.Face`"
msgstr ""

#: ../../cadquery/doc/primer.rst:228
msgid ":class:`~cadquery.Wire`"
msgstr ""

#: ../../cadquery/doc/primer.rst:229
msgid ":class:`~cadquery.Edge`"
msgstr ""

#: ../../cadquery/doc/primer.rst:230
msgid ":class:`~cadquery.Vertex`"
msgstr ""

#: ../../cadquery/doc/primer.rst:232
msgid "Each class has its own methods to create and/or edit shapes of their respective type. One can also use the :ref:`freefuncapi` to create and modify shapes. As already explained in :ref:`cadquery_concepts` there is also some kind of hierarchy in the topological classes. A Wire is made of several edges which are themselves made of several vertices. This means you can create geometry from the bottom up and have a lot of control over it."
msgstr ""

#: ../../cadquery/doc/primer.rst:235
msgid "For example we can create a circular face like so ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:241
msgid "In CadQuery (and OCCT) all the topological classes are shapes, the :class:`~cadquery.Shape` class is the most abstract topological class. The topological class inherits :class:`~cadquery.Mixin3D` or :class:`~cadquery.Mixin1D` which provide aditional methods that are shared between the classes that inherits them."
msgstr ""

#: ../../cadquery/doc/primer.rst:244
msgid "The direct API as its name suggests doesn't provide a parent/children data structure, instead each method call directly returns an object of the specified topological type. It is more verbose than the fluent API and more tedious to work with, but as it offers more flexibility (you can work with faces, which is something you can't do in the fluent API) it is sometimes more convenient than the fluent API."
msgstr ""

#: ../../cadquery/doc/primer.rst:251
msgid "Finally we are discussing about the OCCT API. The OCCT API is the lowest level of CadQuery. The direct API is built upon the OCCT API, where the OCCT API in CadQuery is available through OCP. OCP are the Python bindings of the OCCT C++ libraries CadQuery uses. This means you have access to (almost) all the OCCT C++ libraries in Python and in CadQuery. Working with the OCCT API will give you the maximum flexibility and control over you designs, it is however very verbose and difficult to use. You will need to have a strong knowledge of the different C++ libraries to be able to achieve what you want. To obtain this knowledge the most obvious ways are :"
msgstr ""

#: ../../cadquery/doc/primer.rst:256
msgid "Read the direct API source code, since it is build upon the OCCT API it is full of example usage."
msgstr ""

#: ../../cadquery/doc/primer.rst:257
msgid "Go through the `C++ documentation <https://dev.opencascade.org/doc/overview/html/>`_"
msgstr ""

#: ../../cadquery/doc/primer.rst:260
msgid "The general way of importing a specific class of the OCCT API is ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:264
msgid "For example if you want to use the class `BRepPrimAPI_MakeBox <https://dev.opencascade.org/doc/refman/html/class_b_rep_prim_a_p_i___make_box.html>`_. You will go by the following ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:269
msgid "The package name of any class is written at the top of the documentation page. Often it's written in the class name itself as a prefix."
msgstr ""

#: ../../cadquery/doc/primer.rst:272
msgid "Going back and forth between the APIs"
msgstr ""

#: ../../cadquery/doc/primer.rst:274
msgid "While the 3 APIs provide 3 different layer of complexity and functionality you can mix the 3 layers as you wish. Below is presented the different ways you can interact with the different API layers."
msgstr ""

#: ../../cadquery/doc/primer.rst:279
msgid "Fluent API <=> Direct API"
msgstr ""

#: ../../cadquery/doc/primer.rst:283
msgid "Here are all the possibilities you have to get an object from the Direct API (i.e a topological object)."
msgstr ""

#: ../../cadquery/doc/primer.rst:285
msgid "You can end the Fluent API call chain and get the last object on the stack with :py:meth:`Workplane.val` alternatively you can get all the objects with :py:meth:`Workplane.vals`"
msgstr ""

#: ../../cadquery/doc/primer.rst:298
msgid "If you are only interested in getting the context solid of your Workplane, you can use :py:meth:`Workplane.findSolid`:"
msgstr ""

#: ../../cadquery/doc/primer.rst:311
msgid "If you want to go the other way around i.e using objects from the topological API in the Fluent API here are your options :"
msgstr ""

#: ../../cadquery/doc/primer.rst:313
msgid "You can pass a topological object as a base object to the :class:`~cadquery.Workplane` object. ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:321
msgid "You can add a topological object as a new operation/step in the Fluent API call chain with :py:meth:`Workplane.newObject` ::"
msgstr ""

#: ../../cadquery/doc/primer.rst:332
msgid "Direct API <=> OCCT API"
msgstr ""

#: ../../cadquery/doc/primer.rst:334
msgid "Every object of the Direct API stores its OCCT equivalent object in its :attr:`wrapped` attribute.:"
msgstr ""

#: ../../cadquery/doc/primer.rst:347
msgid "If you want to cast an OCCT object into a Direct API one you can just pass it as a parameter of the intended class:"
msgstr ""

#: ../../cadquery/doc/primer.rst:360
msgid "You can cast into the direct API the types found `here <https://dev.opencascade.org/doc/refman/html/class_topo_d_s___shape.html>`_"
msgstr ""

#: ../../cadquery/doc/primer.rst:363
msgid "Multimethods"
msgstr ""

#: ../../cadquery/doc/primer.rst:365
msgid "CadQuery uses `Multimethod <https://coady.github.io/multimethod/>`_ to allow a call to a method to be dispatched depending on the types of the arguments. An example is :meth:`~cadquery.Sketch.arc`, where ``a_sketch.arc((1, 2), (2, 3))`` would be dispatched to one method but ``a_sketch.arc((1, 2), (2, 3), (3, 4))`` would be dispatched to a different method. For multimethods to work, you should not use keyword arguments to specify positional parameters. For example, you **should not** write ``a_sketch.arc(p1=(1, 2), p2=(2, 3), p3=(3, 4))``, instead you should use the previous example. Note CadQuery makes an attempt to fall back on the first registered multimethod in the event of a dispatch error, but it is still best practice to not use keyword arguments to specify positional arguments in CadQuery."
msgstr ""

#: ../../cadquery/doc/primer.rst:376
msgid "An Introspective Example"
msgstr ""

#: ../../cadquery/doc/primer.rst:379
msgid "If you are just beginning with CadQuery then you can leave this example for later.  If you have some experience with creating CadQuery models and now you want to read the CadQuery source to better understand what your code does, then it is recommended you read this example first."
msgstr ""

#: ../../cadquery/doc/primer.rst:383
msgid "To demonstrate the above concepts, we can define more detailed string representations for the :class:`~cadquery.Workplane`, :class:`~cadquery.Plane` and :class:`~cadquery.CQContext` classes and patch them in::"
msgstr ""

#: ../../cadquery/doc/primer.rst:431
msgid "Now we can make a simple part and examine the :class:`~cadquery.Workplane` and :class:`~cadquery.cq.CQContext` objects at each step. The final part looks like:"
msgstr ""

#: ../../cadquery/doc/primer.rst:453
msgid "Some of the modelling process for this part is a bit contrived and not a great example of fluent CadQuery techniques."
msgstr ""

#: ../../cadquery/doc/primer.rst:456
msgid "The start of our chain of calls is::"
msgstr ""

#: ../../cadquery/doc/primer.rst:461
#: ../../cadquery/doc/primer.rst:485
msgid "Which produces the output:"
msgstr ""

#: ../../cadquery/doc/primer.rst:476
msgid "This is simply an empty :class:`~cadquery.Workplane`. Being the first :class:`~cadquery.Workplane` in the chain, it does not have a parent. The :attr:`~cadquery.Workplane.plane` attribute contains a :class:`~cadquery.Plane` object that describes the XY plane."
msgstr ""

#: ../../cadquery/doc/primer.rst:480
msgid "Now we create a simple box. To keep things short, the ``print(part)`` line will not be shown for the rest of these code blocks::"
msgstr ""

#: ../../cadquery/doc/primer.rst:500
msgid "The first thing to note is that this is a different :class:`~cadquery.Workplane` object to the previous one, and in the :attr:`~cadquery.Workplane.parent` attribute of this :class:`~cadquery.Workplane` is our previous :class:`~cadquery.Workplane`. Returning a new instance of :class:`~cadquery.Workplane` is the normal behaviour of most :class:`~cadquery.Workplane` methods (with some exceptions, as will be shown below) and this is how the `chaining`_ concept is implemented."
msgstr ""

#: ../../cadquery/doc/primer.rst:507
msgid "Secondly, the modelling context object is the same as the one in the previous :class:`~cadquery.Workplane`, and this one modelling context at ``0x2730`` will be shared between every :class:`Workplane` object in this chain. If we instantiate a new :class:`~cadquery.Workplane` with ``part2 = cq.Workplane()``, then this ``part2`` would have a different instance of the :class:`~cadquery.cq.CQContext` attached to it."
msgstr ""

#: ../../cadquery/doc/primer.rst:513
msgid "Thirdly, in our objects list is a single :class:`~cadquery.Solid` object, which is the box we just created."
msgstr ""

#: ../../cadquery/doc/primer.rst:516
msgid "Often when creating models you will find yourself wanting to refer back to a specific :class:`~cadquery.Workplane` object, perhaps because it is easier to select the feature you want in this earlier state, or because you want to reuse a plane. Tags offer a way to refer back to a previous :class:`~cadquery.Workplane`. We can tag the :class:`~cadquery.Workplane` that contains this basic box now::"
msgstr ""

#: ../../cadquery/doc/primer.rst:523
msgid "The string representation of ``part`` is now:"
msgstr ""

#: ../../cadquery/doc/primer.rst:538
msgid "The :attr:`~cadquery.cq.CQContext.tags` attribute of the modelling context is simply a dict associating the string name given by the :meth:`~cadquery.Workplane.tag` method to the :class:`~cadquery.Workplane`. Methods such as :meth:`~cadquery.Workplane.workplaneFromTagged` and selection methods like :meth:`~cadquery.Workplane.edges` can operate on a tagged :class:`~cadquery.Workplane`. Note that unlike the ``part = part.box(1, 1, 1)`` step where we went from ``Workplane object at 0x2760`` to ``Workplane object at 0xaa90``, the :meth:`~cadquery.Workplane.tag` method has returned the same object at ``0xaa90``. This is unusual for a :class:`~cadquery.Workplane` method."
msgstr ""

#: ../../cadquery/doc/primer.rst:547
msgid "The next step is::"
msgstr ""

#: ../../cadquery/doc/primer.rst:551
msgid "The output is:"
msgstr ""

#: ../../cadquery/doc/primer.rst:566
msgid "Our selection method has taken the :class:`~cadquery.Solid` from the :attr:`~cadquery.Workplane.objects` list of the previous :class:`~cadquery.Workplane`, found the face with it's center furthest in the Z direction, and placed that face into the :attr:`~cadquery.Workplane.objects` attribute. The :class:`~cadquery.Solid` representing the box we are modelling is gone, and when a :class:`~cadquery.Workplane` method needs to access that solid it searches through the parent chain for the nearest solid. This action can also be done by a user through the :meth:`~cadquery.Workplane.findSolid` method."
msgstr ""

#: ../../cadquery/doc/primer.rst:574
msgid "Now we want to select the boundary of this :class:`~cadquery.Face` (a :class:`~cadquery.Wire`), so we use::"
msgstr ""

#: ../../cadquery/doc/primer.rst:579
msgid "The output is now:"
msgstr ""

#: ../../cadquery/doc/primer.rst:594
msgid "Modelling operations take their wires and edges from the modelling context's pending lists. In order to use the :meth:`~cadquery.Workplane.loft` command further down the chain, we need to push this wire to the modelling context with::"
msgstr ""

#: ../../cadquery/doc/primer.rst:600
msgid "Now we have:"
msgstr ""

#: ../../cadquery/doc/primer.rst:615
msgid "The :class:`~cadquery.Wire` object that was only in the :attr:`~cadquery.Workplane.objects` attribute before is now also in the modelling context's :attr:`~cadquery.cq.CQContext.pendingWires`. The :meth:`~cadquery.Workplane.toPending` method is also another of the unusual methods that return the same :class:`~cadquery.Workplane` object instead of a new one."
msgstr ""

#: ../../cadquery/doc/primer.rst:620
msgid "To set up the other side of the :meth:`~cadquery.Workplane.loft` command further down the chain, we translate the wire in :attr:`~cadquery.Workplane.objects` by calling::"
msgstr ""

#: ../../cadquery/doc/primer.rst:625
msgid "Now the string representation of ``part`` looks like:"
msgstr ""

#: ../../cadquery/doc/primer.rst:640
msgid "It may look similar to the previous step, but the :class:`~cadquery.Wire` object in :attr:`~cadquery.Workplane.objects` is different. To get this wire into the pending wires list, again we use::"
msgstr ""

#: ../../cadquery/doc/primer.rst:646
msgid "The result:"
msgstr ""

#: ../../cadquery/doc/primer.rst:661
msgid "The modelling context's :attr:`~cadquery.cq.CQContext.pendingWires` attribute now contains the two wires we want to loft between, and we simply call::"
msgstr ""

#: ../../cadquery/doc/primer.rst:666
msgid "After the loft operation, our Workplane looks quite different:"
msgstr ""

#: ../../cadquery/doc/primer.rst:681
msgid "In the :attr:`cq.Workplane.objects` attribute we now have one Compound object and the modelling context's :attr:`~cadquery.cq.CQContext.pendingWires` has been cleared by :meth:`~cadquery.Workplane.loft`."
msgstr ""

#: ../../cadquery/doc/primer.rst:686
msgid "To inspect the :class:`~cadquery.Compound` object further you can use :meth:`~cadquery.Workplane.val` or :meth:`~cadquery.Workplane.findSolid` to get at the :class:`~cadquery.Compound` object, then use :meth:`cadquery.Shape.Solids` to return a list of the :class:`~cadquery.Solid` objects contained in the :class:`~cadquery.Compound`, which in this example will be a single :class:`~cadquery.Solid` object. For example:"
msgstr ""

#: ../../cadquery/doc/primer.rst:699
msgid "Now we will create a small cylinder protruding from a face on the original box. We need to set up a workplane to draw a circle on, so firstly we will select the correct face::"
msgstr ""

#: ../../cadquery/doc/primer.rst:704
msgid "Which results in:"
msgstr ""

#: ../../cadquery/doc/primer.rst:719
msgid "We have the desired :class:`~cadquery.Face` in the :attr:`~cadquery.Workplane.objects` attribute, but the :attr:`~cadquery.Workplane.plane` has not changed yet. To create the new plane we use the :meth:`Workplane.workplane` method::"
msgstr ""

#: ../../cadquery/doc/primer.rst:725
#: ../../cadquery/doc/primer.rst:748
#: ../../cadquery/doc/primer.rst:772
msgid "Now:"
msgstr ""

#: ../../cadquery/doc/primer.rst:740
msgid "The :attr:`~cadquery.Workplane.objects` list has been cleared and the :class:`~cadquery.Plane` object has a local Z direction in the global X direction. Since the base of the plane is the side of the box, the origin is offset in the X direction."
msgstr ""

#: ../../cadquery/doc/primer.rst:744
msgid "Onto this plane we can draw a circle::"
msgstr ""

#: ../../cadquery/doc/primer.rst:763
msgid "The :meth:`~cadquery.Workplane.circle` method - like all 2D drawing methods - has placed the circle into both the :attr:`~cadquery.Workplane.objects` attribute (where it will be cleared during the next modelling step), and the modelling context's pending wires (where it will persist until used by another :class:`~cadquery.Workplane` method)."
msgstr ""

#: ../../cadquery/doc/primer.rst:768
msgid "The next step is to extrude this circle and create a cylindrical protrusion::"
msgstr ""

#: ../../cadquery/doc/primer.rst:787
msgid "The :meth:`~cadquery.Workplane.extrude` method has cleared all the pending wires and edges. The :attr:`~cadquery.Workplane.objects` attribute contains the final :class:`~cadquery.Compound` object that is shown in the 3D view above."
msgstr ""

#: ../../cadquery/doc/primer.rst:793
msgid "The :meth:`~cadquery.Workplane.extrude` has an argument for ``clean`` which defaults to ``True``. This extrudes the pending wires (creating a new :class:`~cadquery.Workplane` object), then runs the :meth:`~cadquery.Workplane.clean` method to refine the result, creating another :class:`~cadquery.Workplane`. If you were to run the example with the default ``clean=True`` then you would see an intermediate :class:`~cadquery.Workplane` object in :attr:`~cadquery.Workplane.parent` rather than the object from the previous step."
msgstr ""

#: ../../cadquery/doc/primer.rst:803
msgid "Assemblies"
msgstr ""

#: ../../cadquery/doc/primer.rst:805
msgid "Simple models can be combined into complex, possibly nested, assemblies."
msgstr ""

#: ../../cadquery/doc/primer.rst:809
msgid "A simple example could look as follows::"
msgstr ""

#: ../../cadquery/doc/primer.rst:829
msgid "Resulting in:"
msgstr ""

#: ../../cadquery/doc/primer.rst:833
msgid "Note that the locations of the children parts are defined with respect to their parents - in the above example ``part3`` will be located at (-5,-5,20) in the global coordinate system. Assemblies with different colors can be created this way and exported to STEP or the native OCCT xml format."
msgstr ""

#: ../../cadquery/doc/primer.rst:835
msgid "You can browse assembly related methods here: :ref:`assembly`."
msgstr ""

#: ../../cadquery/doc/primer.rst:838
msgid "Assemblies with constraints"
msgstr ""

#: ../../cadquery/doc/primer.rst:840
msgid "Sometimes it is not desirable to define the component positions explicitly but rather use constraints to obtain a fully parametric assembly. This can be achieved in the following way::"
msgstr ""

#: ../../cadquery/doc/primer.rst:866
msgid "This code results in identical object as one from the previous section. The added benefit is that with changing parameters ``w``, ``d``, ``h`` the final locations will be calculated automatically. It is admittedly dense and can be made clearer using tags. Tags can be directly referenced when constructing the constraints::"
msgstr ""

#: ../../cadquery/doc/primer.rst:899
msgid "The following constraints are currently implemented:"
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "Axis"
msgstr ""

#: ../../cadquery/doc/primer.rst:901
msgid "two normal vectors are anti-coincident or the angle (in radians) between them is equal to the specified value. Can be defined for all entities with consistent normal vector - planar faces, wires and edges."
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "Point"
msgstr ""

#: ../../cadquery/doc/primer.rst:902
msgid "two points are coincident or separated by a specified distance. Can be defined for all entities, center of mass is used for lines, faces, solids and the vertex position for vertices."
msgstr ""

#: ../../cadquery/doc/primer.rst:0
msgid "Plane"
msgstr ""

#: ../../cadquery/doc/primer.rst:903
msgid "combination of :Axis: and :Point: constraints."
msgstr ""

#: ../../cadquery/doc/primer.rst:905
msgid "For a more elaborate assembly example see :ref:`assytutorial`."
msgstr ""
