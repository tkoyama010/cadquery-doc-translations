# SOME DESCRIPTIVE TITLE.
# Copyright (C) Parametric Products Intellectual Holdings LLC, All Rights Reserved
# This file is distributed under the same license as the CadQuery package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CadQuery 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-20 00:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cadquery/doc/sketch.rst:5
msgid "Sketch"
msgstr ""

#: ../../cadquery/doc/sketch.rst:8
msgid "Sketch tutorial"
msgstr ""

#: ../../cadquery/doc/sketch.rst:10
msgid "The purpose of this section is to demonstrate how to construct sketches using different approaches."
msgstr ""

#: ../../cadquery/doc/sketch.rst:14
msgid "Face-based API"
msgstr ""

#: ../../cadquery/doc/sketch.rst:16
msgid "The main approach for constructing sketches is based on constructing faces and combining them using boolean operations."
msgstr ""

#: ../../cadquery/doc/sketch.rst:36
msgid "Note that selectors are implemented, but selection has to be explicitly reset. Sketch class does not implement history and all modifications happen in-place."
msgstr ""

#: ../../cadquery/doc/sketch.rst:40
msgid "Modes"
msgstr ""

#: ../../cadquery/doc/sketch.rst:42
msgid "Every operation from the face API accepts a mode parameter to define how to combine the created object with existing ones. It can be fused (``mode='a'``), cut (``mode='s'``), intersected (``mode='i'``) or just stored for construction (``mode='c'``). In the last case, it is mandatory to specify a ``tag`` in order to be able to refer to the object later on. By default faces are fused together. Note the usage of the subtractive and additive modes in the example above. The additional two are demonstrated below."
msgstr ""

#: ../../cadquery/doc/sketch.rst:62
msgid "Edge-based API"
msgstr ""

#: ../../cadquery/doc/sketch.rst:64
msgid "If needed, one can construct sketches by placing individual edges."
msgstr ""

#: ../../cadquery/doc/sketch.rst:83
msgid "Once the construction is finished it has to be converted to the face-based representation using :meth:`~cadquery.Sketch.assemble`. Afterwards, face based operations can be applied."
msgstr ""

#: ../../cadquery/doc/sketch.rst:88
msgid "Convex hull"
msgstr ""

#: ../../cadquery/doc/sketch.rst:90
msgid "For certain special use-cases convex hull can be constructed from straight segments and circles."
msgstr ""

#: ../../cadquery/doc/sketch.rst:105
msgid "Constraint-based sketches"
msgstr ""

#: ../../cadquery/doc/sketch.rst:107
msgid "Finally, if desired, geometric constraints can be used to construct sketches. So far only line segments and arcs can be used in such a use case."
msgstr ""

#: ../../cadquery/doc/sketch.rst:127
msgid "Following constraints are implemented. Arguments are passed in as one tuple in :meth:`~cadquery.Sketch.constrain`. In this table, `0..1` refers to a float between 0 and 1 where 0 would create a constraint relative to the start of the element, and 1 the end."
msgstr ""

#: ../../cadquery/doc/sketch.rst:133
msgid "Name"
msgstr ""

#: ../../cadquery/doc/sketch.rst:134
msgid "Arity"
msgstr ""

#: ../../cadquery/doc/sketch.rst:135
msgid "Entities"
msgstr ""

#: ../../cadquery/doc/sketch.rst:136
msgid "Arguments"
msgstr ""

#: ../../cadquery/doc/sketch.rst:137
msgid "Description"
msgstr ""

#: ../../cadquery/doc/sketch.rst:138
msgid "FixedPoint"
msgstr ""

#: ../../cadquery/doc/sketch.rst:139
#: ../../cadquery/doc/sketch.rst:154
#: ../../cadquery/doc/sketch.rst:164
#: ../../cadquery/doc/sketch.rst:169
#: ../../cadquery/doc/sketch.rst:174
msgid "1"
msgstr ""

#: ../../cadquery/doc/sketch.rst:140
#: ../../cadquery/doc/sketch.rst:145
#: ../../cadquery/doc/sketch.rst:150
#: ../../cadquery/doc/sketch.rst:155
#: ../../cadquery/doc/sketch.rst:160
msgid "All"
msgstr ""

#: ../../cadquery/doc/sketch.rst:141
msgid "`None` for arc center or `0..1` for point on segment/arc"
msgstr ""

#: ../../cadquery/doc/sketch.rst:142
msgid "Specified point is fixed"
msgstr ""

#: ../../cadquery/doc/sketch.rst:143
msgid "Coincident"
msgstr ""

#: ../../cadquery/doc/sketch.rst:144
#: ../../cadquery/doc/sketch.rst:149
#: ../../cadquery/doc/sketch.rst:159
msgid "2"
msgstr ""

#: ../../cadquery/doc/sketch.rst:146
msgid "None"
msgstr ""

#: ../../cadquery/doc/sketch.rst:147
msgid "Specified points coincide"
msgstr ""

#: ../../cadquery/doc/sketch.rst:148
msgid "Angle"
msgstr ""

#: ../../cadquery/doc/sketch.rst:151
#: ../../cadquery/doc/sketch.rst:176
msgid "`angle`"
msgstr ""

#: ../../cadquery/doc/sketch.rst:152
msgid "Angle between the tangents of the two entities is fixed"
msgstr ""

#: ../../cadquery/doc/sketch.rst:153
msgid "Length"
msgstr ""

#: ../../cadquery/doc/sketch.rst:156
msgid "`length`"
msgstr ""

#: ../../cadquery/doc/sketch.rst:157
msgid "Specified entity has fixed length"
msgstr ""

#: ../../cadquery/doc/sketch.rst:158
msgid "Distance"
msgstr ""

#: ../../cadquery/doc/sketch.rst:161
msgid "`None or 0..1, None or 0..1, distance`"
msgstr ""

#: ../../cadquery/doc/sketch.rst:162
msgid "Distance between two points is fixed"
msgstr ""

#: ../../cadquery/doc/sketch.rst:163
msgid "Radius"
msgstr ""

#: ../../cadquery/doc/sketch.rst:165
#: ../../cadquery/doc/sketch.rst:175
msgid "Arc"
msgstr ""

#: ../../cadquery/doc/sketch.rst:166
msgid "`radius`"
msgstr ""

#: ../../cadquery/doc/sketch.rst:167
msgid "Specified entity has a fixed radius"
msgstr ""

#: ../../cadquery/doc/sketch.rst:168
msgid "Orientation"
msgstr ""

#: ../../cadquery/doc/sketch.rst:170
msgid "Segment"
msgstr ""

#: ../../cadquery/doc/sketch.rst:171
msgid "`x,y`"
msgstr ""

#: ../../cadquery/doc/sketch.rst:172
msgid "Specified entity is parallel to `(x,y)`"
msgstr ""

#: ../../cadquery/doc/sketch.rst:173
msgid "ArcAngle"
msgstr ""

#: ../../cadquery/doc/sketch.rst:177
msgid "Specified entity is fixed angular span"
msgstr ""

#: ../../cadquery/doc/sketch.rst:181
msgid "Workplane integration"
msgstr ""

#: ../../cadquery/doc/sketch.rst:183
msgid "Once created, a sketch can be used to construct various features on a workplane. Supported operations include :meth:`~cadquery.Workplane.extrude`, :meth:`~cadquery.Workplane.twistExtrude`, :meth:`~cadquery.Workplane.revolve`, :meth:`~cadquery.Workplane.sweep`, :meth:`~cadquery.Workplane.cutBlind`, :meth:`~cadquery.Workplane.cutThruAll` and :meth:`~cadquery.Workplane.loft`."
msgstr ""

#: ../../cadquery/doc/sketch.rst:188
msgid "Sketches can be created as separate entities and reused, but also created ad-hoc in one fluent chain of calls as shown below."
msgstr ""

#: ../../cadquery/doc/sketch.rst:192
msgid "Note that the sketch is placed on all locations that are on the top of the stack."
msgstr ""

#: ../../cadquery/doc/sketch.rst:194
msgid "Constructing sketches in-place can be accomplished as follows."
msgstr ""

#: ../../cadquery/doc/sketch.rst:214
msgid "Sketch API is available after the :meth:`~cadquery.Workplane.sketch` call and original `workplane`."
msgstr ""

#: ../../cadquery/doc/sketch.rst:216
msgid "When multiple elements are selected before constructing the sketch, multiple sketches will be created."
msgstr ""

#: ../../cadquery/doc/sketch.rst:242
msgid "Sometimes it is desired to reuse existing sketches and place them as-is on a workplane."
msgstr ""

#: ../../cadquery/doc/sketch.rst:267
msgid "Reusing of existing sketches is needed when using :meth:`~cadquery.Workplane.loft`."
msgstr ""

#: ../../cadquery/doc/sketch.rst:294
msgid "When lofting only outer wires are taken into account and inner wires are silently ignored."
msgstr ""
